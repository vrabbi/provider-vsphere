name: hashicorp/vsphere
resources:
    Entity Permissions:
        subCategory: Security
        description: Provides CRUD operations on a vsphere entity permissions. Permissions can be created on an entity for a given user or group with the specified roles.
        name: Entity Permissions
        title: Entity Permissions
        argumentDocs:
            entity_id: |-
                - (Required) The managed object id (uuid for some entities) on
                which permissions are to be created.
            entity_type: |-
                - (Required) The managed object type, types can be found in the
                managed object type section
                here.
            is_group: |-
                - (Required) Whether user_or_group field refers to a user or a
                group. True for a group and false for a user.
            permissions: |-
                - (Required) The permissions to be given on this entity. Keep
                the permissions sorted alphabetically on user_or_group for a better user
                experience.
            propagate: |-
                - (Required) Whether or not this permission propagates down the
                hierarchy to sub-entities.
            role_id: |-
                - (Required) The role id of the role to be given to the user on
                the specified entity.
            user_or_group: '- (Required) The user/group getting the permission.'
        importStatements: []
    Role:
        subCategory: Security
        description: Provides CRUD operations on a vsphere role. A role can be created and privileges can be associated with it,
        name: Role
        title: Role
        argumentDocs:
            name: '- (Required) The name of the role.'
            role_privileges: '- (Optional) The privileges to be associated with this role.'
        importStatements: []
    vsphere_compute_cluster:
        subCategory: Host and Cluster Management
        description: Provides a vSphere cluster resource. This can be used to create and manage clusters of hosts.
        name: vsphere_compute_cluster
        title: vsphere_compute_cluster
        examples:
            - name: compute_cluster
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "drs_automation_level": "fullyAutomated",
                  "drs_enabled": true,
                  "ha_enabled": true,
                  "host_system_ids": "${[for host in data.vsphere_host.host : host.id]}",
                  "name": "terraform-compute-cluster-test"
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
            - name: compute_cluster
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "name": "cluster-01"
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
            - name: compute_cluster
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "dpm_automation_level": "automated",
                  "drs_automation_level": "fullyAutomated",
                  "drs_enabled": true,
                  "ha_datastore_apd_response": "restartConservative",
                  "ha_datastore_pdl_response": "restartAggressive",
                  "host_system_ids": "${[for host in data.vsphere_host.host : host.id]}",
                  "name": "cluster-01",
                  "vsan_enabled": true,
                  "vsan_performance_enabled": true
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
        argumentDocs:
            cache: '- The canonical name of the disk to use for vSAN cache.'
            component: '- A custom component to add to the base image. TODO - add link to offline depot resource docs'
            custom_attributes: |-
                - (Optional) A map of custom attribute ids to attribute
                value strings to set for the datastore cluster. See
                here for a reference on how to set values
                for custom attributes.
            datacenter_id: |-
                - (Required) The managed object ID of
                the datacenter to create the cluster in. Forces a new resource if changed.
            dpm_automation_level: |-
                - (Optional) The automation level for host power
                operations in this cluster. Can be one of manual or automated. Default:
                manual.
            dpm_enabled: |-
                - (Optional) Enable DPM support for DRS in this cluster.
                Requires drs_enabled to be true in order to be effective.
                Default: false.
            dpm_threshold: |-
                - (Optional) A value between 1 and 5 indicating the
                threshold of load within the cluster that influences host power operations.
                This affects both power on and power off operations - a lower setting will
                tolerate more of a surplus/deficit than a higher setting. Default: 3.
            drs_advanced_options: |-
                - (Optional) A key/value map that specifies advanced
                options for DRS and DPM.
            drs_automation_level: |-
                (Optional) The default automation level for all
                virtual machines in this cluster. Can be one of manual,
                partiallyAutomated, or fullyAutomated. Default: manual.
            drs_enable_predictive_drs: |-
                - (Optional) When true, enables DRS to use data
                from VMware Aria Operations to make proactive DRS
                recommendations. *
            drs_enable_vm_overrides: |-
                - (Optional) Allow individual DRS overrides to be
                set for virtual machines in the cluster. Default: true.
            drs_enabled: '- (Optional) Enable DRS for this cluster. Default: false.'
            drs_migration_threshold: |-
                - (Optional) A value between 1 and 5 indicating
                the threshold of imbalance tolerated between hosts. A lower setting will
                tolerate more imbalance while a higher setting will tolerate less. Default:
                3.
            drs_scale_descendants_shares: |-
                - (Optional) Enable scalable shares for all
                resource pools in the cluster. Can be one of disabled or
                scaleCpuAndMemoryShares. Default: disabled.
            esx_version: '- The ESXi version which will be used as a base for the image. See host_base_images.'
            failoverHosts: .
            fault_domain: '- The configuration for single fault domain.'
            folder: |-
                - (Optional) The relative path to a folder to put this cluster in.
                This is a path relative to the datacenter you are deploying the cluster to.
                Example: for the dc1 datacenter, and a provided folder of foo/bar,
                Terraform will place a cluster named terraform-compute-cluster-test in a
                host folder located at /dc1/host/foo/bar, with the final inventory path
                being /dc1/host/foo/bar/terraform-datastore-cluster-test.
            force_evacuate_on_destroy: |-
                - When destroying the resource, setting this to
                true will auto-remove any hosts that are currently a member of the cluster,
                as if they were removed by taking their entry out of host_system_ids (see
                below). This is an advanced
                option and should only be used for testing. Default: false.
            ha_admission_control_failover_host_system_ids: |-
                - (Optional) Defines the
                managed object IDs of hosts to use as dedicated failover
                hosts. These hosts are kept as available as possible - admission control will
                block access to the host, and DRS will ignore the host when making
                recommendations.
            ha_admission_control_host_failure_tolerance: |-
                - (Optional) The maximum number
                of failed hosts that admission control tolerates when making decisions on
                whether to permit virtual machine operations. The maximum is one less than
                the number of hosts in the cluster. Default: 1.
                *
            ha_admission_control_performance_tolerance: |-
                - (Optional) The percentage of
                resource reduction that a cluster of virtual machines can tolerate in case of
                a failover. A value of 0 produces warnings only, whereas a value of 100
                disables the setting. Default: 100 (disabled).
            ha_admission_control_policy: |-
                - (Optional) The type of admission control
                policy to use with vSphere HA. Can be one of resourcePercentage,
                slotPolicy, failoverHosts, or disabled. Default: resourcePercentage.
            ha_admission_control_resource_percentage_auto_compute: |-
                - (Optional)
                Automatically determine available resource percentages by subtracting the
                average number of host resources represented by the
                ha_admission_control_host_failure_tolerance
                setting from the total amount of resources in the cluster. Disable to supply
                user-defined values. Default: true.
                *
            ha_admission_control_resource_percentage_cpu: |-
                - (Optional) Controls the
                user-defined percentage of CPU resources in the cluster to reserve for
                failover. Default: 100.
            ha_admission_control_resource_percentage_memory: |-
                - (Optional) Controls the
                user-defined percentage of memory resources in the cluster to reserve for
                failover. Default: 100.
            ha_admission_control_slot_policy_explicit_cpu: |-
                - (Optional) Controls the
                user-defined CPU slot size, in MHz. Default: 32.
            ha_admission_control_slot_policy_explicit_memory: |-
                - (Optional) Controls the
                user-defined memory slot size, in MB. Default: 100.
            ha_admission_control_slot_policy_use_explicit_size: |-
                - (Optional) Controls
                whether or not you wish to supply explicit values to CPU and memory slot
                sizes. The default is false, which tells vSphere to gather a automatic
                average based on all powered-on virtual machines currently in the cluster.
            ha_advanced_options: |-
                - (Optional) A key/value map that specifies advanced
                options for vSphere HA.
            ha_datastore_apd_recovery_action: |-
                - (Optional) Controls the action to take
                on virtual machines if an APD status on an affected datastore clears in the
                middle of an APD event. Can be one of none or reset. Default: none.
                *
            ha_datastore_apd_response: |-
                - (Optional) Controls the action to take on
                virtual machines when the cluster has detected loss to all paths to a
                relevant datastore. Can be one of disabled, warning,
                restartConservative, or restartAggressive.  Default: disabled.
                *
            ha_datastore_apd_response_delay: |-
                - (Optional) The time, in seconds,
                to wait after an APD timeout event to run the response action defined in
                ha_datastore_apd_response. Default: 180
                seconds (3 minutes). *
            ha_datastore_pdl_response: |-
                - (Optional) Controls the action to take on
                virtual machines when the cluster has detected a permanent device loss to a
                relevant datastore. Can be one of disabled, warning, or
                restartAggressive. Default: disabled.
                *
            ha_enabled: |-
                - (Optional) Enable vSphere HA for this cluster. Default:
                false.
            ha_heartbeat_datastore_ids: |-
                - (Optional) The list of managed object IDs for
                preferred datastores to use for HA heartbeats. This setting is only useful
                when ha_heartbeat_datastore_policy is set
                to either userSelectedDs or allFeasibleDsWithUserPreference.
            ha_heartbeat_datastore_policy: |-
                - (Optional) The selection policy for HA
                heartbeat datastores. Can be one of allFeasibleDs, userSelectedDs, or
                allFeasibleDsWithUserPreference. Default:
                allFeasibleDsWithUserPreference.
            ha_host_isolation_response: |-
                - (Optional) The action to take on virtual
                machines when a host has detected that it has been isolated from the rest of
                the cluster. Can be one of none, powerOff, or shutdown. Default:
                none.
            ha_host_monitoring: |-
                - (Optional) Global setting that controls whether
                vSphere HA remediates virtual machines on host failure. Can be one of enabled
                or disabled. Default: enabled.
            ha_vm_component_protection: |-
                - (Optional) Controls vSphere VM component
                protection for virtual machines in this cluster. Can be one of enabled or
                disabled. Default: enabled.
                *
            ha_vm_dependency_restart_condition: |-
                - (Optional) The condition used to
                determine whether or not virtual machines in a certain restart priority class
                are online, allowing HA to move on to restarting virtual machines on the next
                priority. Can be one of none, poweredOn, guestHbStatusGreen, or
                appHbStatusGreen. The default is none, which means that a virtual machine
                is considered ready immediately after a host is found to start it on.
                *
            ha_vm_failure_interval: |-
                - (Optional) The time interval, in seconds, a heartbeat
                from a virtual machine is not received within this configured interval,
                the virtual machine is marked as failed. Default: 30 seconds.
            ha_vm_maximum_failure_window: |-
                - (Optional) The time, in seconds, for the reset window in
                which ha_vm_maximum_resets can operate. When this
                window expires, no more resets are attempted regardless of the setting
                configured in ha_vm_maximum_resets. -1 means no window, meaning an
                unlimited reset time is allotted. Default: -1 (no window).
            ha_vm_maximum_resets: |-
                - (Optional) The maximum number of resets that HA will
                perform to a virtual machine when responding to a failure event. Default: 3
            ha_vm_minimum_uptime: |-
                - (Optional) The time, in seconds, that HA waits after
                powering on a virtual machine before monitoring for heartbeats. Default:
                120 seconds (2 minutes).
            ha_vm_monitoring: |-
                - (Optional) The type of virtual machine monitoring to use
                when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
                vmMonitoringOnly, or vmAndAppMonitoring. Default: vmMonitoringDisabled.
            ha_vm_restart_additional_delay: |-
                - (Optional) Additional delay, in seconds,
                after ready condition is met. A VM is considered ready at this point.
                Default: 0 seconds (no delay). *
            ha_vm_restart_priority: |-
                - (Optional) The default restart priority
                for affected virtual machines when vSphere detects a host failure. Can be one
                of lowest, low, medium, high, or highest. Default: medium.
            ha_vm_restart_timeout: |-
                - (Optional) The maximum time, in seconds,
                that vSphere HA will wait for virtual machines in one priority to be ready
                before proceeding with the next priority. Default: 600 seconds (10 minutes).
                *
            host_cluster_exit_timeout: |-
                - The timeout, in seconds, for each host maintenance
                mode operation when removing hosts from a cluster. Default: 3600 seconds (1 hour).
            host_ids: '- The managed object IDs of the hosts to put in the fault domain.'
            host_image: '- (Optional) Enables vLCM on the cluster and applies an ESXi image with the provided configuration.'
            host_managed: |-
                - (Optional) Can be set to true if compute cluster
                membership will be managed through the host resource rather than the
                compute_cluster resource. Conflicts with: host_system_ids.
            host_system_ids: |-
                - (Optional) The managed object IDs of
                the hosts to put in the cluster. Conflicts with: host_managed.
            id: ': The managed object ID of the cluster.'
            key: '- The identifier of the component'
            name: '- (Required) The name of the cluster.'
            preferred_fault_domain_host_ids: '- The managed object IDs of the hosts to put in the first fault domain.'
            preferred_fault_domain_name: '- (Optional) The name of first fault domain. Default is Preferred.'
            proactive_ha_automation_level: |-
                - (Optional) Determines how the host
                quarantine, maintenance mode, or virtual machine migration recommendations
                made by proactive HA are to be handled. Can be one of Automated or
                Manual. Default: Manual. *
            proactive_ha_enabled: |-
                - (Optional) Enables Proactive HA. Default: false.
                *
            proactive_ha_moderate_remediation: |-
                - (Optional) The configured remediation
                for moderately degraded hosts. Can be one of MaintenanceMode or
                QuarantineMode. Note that this cannot be set to MaintenanceMode when
                proactive_ha_severe_remediation is set
                to QuarantineMode. Default: QuarantineMode.
                *
            proactive_ha_provider_ids: |-
                - (Optional) The list of IDs for health update
                providers configured for this cluster.
                *
            proactive_ha_severe_remediation: |-
                - (Optional) The configured remediation for
                severely degraded hosts. Can be one of MaintenanceMode or QuarantineMode.
                Note that this cannot be set to QuarantineMode when
                proactive_ha_moderate_remediation is
                set to MaintenanceMode. Default: QuarantineMode.
                *
            resource_pool_id: |-
                The managed object ID of the primary
                resource pool for this cluster. This can be passed directly to the
                resource_pool_id
                attribute of the
                vsphere_virtual_machine resource.
            resourcePercentage: .
            secondary_fault_domain_host_ids: '- The managed object IDs of the hosts to put in the second fault domain.'
            secondary_fault_domain_name: '- (Optional) The name of second fault domain. Default is Secondary.'
            slotPolicy: .
            storage: '- An array of disk canonical names for vSAN storage.'
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
            version: '- The version of the component'
            vsan_compression_enabled: |-
                - (Optional) Enables vSAN compression on the
                cluster.
            vsan_dedup_enabled: |-
                - (Optional) Enables vSAN deduplication on the cluster.
                Cannot be independently set to true. When vSAN deduplication is enabled, vSAN
                compression must also be enabled.
            vsan_disk_group: |-
                - (Optional) Represents the configuration of a host disk
                group in the cluster.
            vsan_dit_encryption_enabled: |-
                - (Optional) Enables vSAN data-in-transit
                encryption on the cluster. Conflicts with vsan_remote_datastore_ids, i.e.,
                vSAN data-in-transit feature cannot be enabled with the vSAN HCI Mesh feature
                at the same time.
            vsan_dit_rekey_interval: |-
                - (Optional) Indicates the rekey interval in
                minutes for data-in-transit encryption. The valid rekey interval is 30 to
                10800 (feature defaults to 1440). Conflicts with vsan_remote_datastore_ids.
            vsan_enabled: '- (Optional) Enables vSAN on the cluster.'
            vsan_esa_enabled: '- (Optional) Enables vSAN ESA on the cluster.'
            vsan_fault_domains: '- (Optional) Configurations of vSAN fault domains.'
            vsan_network_diagnostic_mode_enabled: |-
                - (Optional) Enables network
                diagnostic mode for vSAN performance service on the cluster.
            vsan_performance_enabled: |-
                - (Optional) Enables vSAN performance service on
                the cluster. Default: true.
            vsan_remote_datastore_ids: |-
                - (Optional) The remote vSAN datastore IDs to be
                mounted to this cluster. Conflicts with vsan_dit_encryption_enabled and
                vsan_dit_rekey_interval, i.e., vSAN HCI Mesh feature cannot be enabled with
                data-in-transit encryption feature at the same time.
            vsan_stretched_cluster: '- (Optional) Configurations of vSAN stretched cluster.'
            vsan_unmap_enabled: |-
                - (Optional) Enables vSAN unmap on the cluster.
                You must explicitly enable vSAN unmap when you enable vSAN ESA on the cluster.
            vsan_verbose_mode_enabled: |-
                - (Optional) Enables verbose mode for vSAN
                performance service on the cluster.
            witness_node: '- The managed object IDs of the host selected as witness node when enable stretched cluster.'
        importStatements: []
    vsphere_compute_cluster_host_group:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere cluster virtual machine group. This can be used to manage groups of virtual machines for relevant rules in a cluster.
        name: vsphere_compute_cluster_host_group
        title: vsphere_compute_cluster_host_group
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the group in.  Forces a new
                resource if changed.
            host_system_ids: |-
                - (Optional) The managed object IDs of
                the hosts to put in the cluster.
            name: |-
                - (Required) The name of the host group. This must be unique in the
                cluster. Forces a new resource if changed.
        importStatements: []
    vsphere_compute_cluster_vm_affinity_rule:
        subCategory: Host and Cluster Management
        description: Provides the VMware vSphere Distributed Resource Scheduler affinity rule resource.
        name: vsphere_compute_cluster_vm_affinity_rule
        title: vsphere_compute_cluster_vm_affinity_rule
        examples:
            - name: vm_affinity_rule
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "name": "vm-affinity-rule",
                  "virtual_machine_ids": "${[for k, v in vsphere_virtual_machine.vm : v.id]}"
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "count": 2,
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 1024,
                      "name": "foo-${count.index}",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 1,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
            - name: vm_affinity_rule
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "enabled": true,
                  "name": "vm-affinity-rule",
                  "virtual_machine_ids": "${data.vsphere_virtual_machine.vms[*].id}"
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the group in.  Forces a new
                resource if changed.
            enabled: '- (Optional) Enable this rule in the cluster. Default: true.'
            mandatory: |-
                - (Optional) When this value is true, prevents any virtual
                machine operations that may violate this rule. Default: false.
            name: '- (Required) The name of the rule. This must be unique in the cluster.'
            virtual_machine_ids: |-
                - (Required) The UUIDs of the virtual machines to run
                on the same host together.
        importStatements: []
    vsphere_compute_cluster_vm_anti_affinity_rule:
        subCategory: Host and Cluster Management
        description: Provides the VMware vSphere Distributed Resource Scheduler anti-affinity rule resource.
        name: vsphere_compute_cluster_vm_anti_affinity_rule
        title: vsphere_compute_cluster_vm_anti_affinity_rule
        examples:
            - name: vm_anti_affinity_rule
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "lifecycle": [
                    {
                      "replace_triggered_by": [
                        "${vsphere_virtual_machine.vm}"
                      ]
                    }
                  ],
                  "name": "vm-anti-affinity-rule",
                  "virtual_machine_ids": "${[for k, v in vsphere_virtual_machine.vm : v.id]}"
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "count": 2,
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 1024,
                      "name": "foo-${count.index}",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 1,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
            - name: vm_anti_affinity_rule
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "enabled": true,
                  "name": "vm-anti-affinity-rule",
                  "virtual_machine_ids": "${data.vsphere_virtual_machine.vms[*].id}"
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the group in.  Forces a new
                resource if changed.
            enabled: '- (Optional) Enable this rule in the cluster. Default: true.'
            mandatory: |-
                - (Optional) When this value is true, prevents any virtual
                machine operations that may violate this rule. Default: false.
            name: '- (Required) The name of the rule. This must be unique in the cluster.'
            virtual_machine_ids: |-
                - (Required) The UUIDs of the virtual machines to run
                on hosts different from each other.
        importStatements: []
    vsphere_compute_cluster_vm_dependency_rule:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere cluster VM dependency rule. This can be used to manage VM dependency rules for vSphere HA.
        name: vsphere_compute_cluster_vm_dependency_rule
        title: vsphere_compute_cluster_vm_dependency_rule
        examples:
            - name: cluster_vm_dependency_rule
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "dependency_vm_group_name": "${vsphere_compute_cluster_vm_group.cluster_vm_group1.name}",
                  "name": "terraform-test-cluster-vm-dependency-rule",
                  "vm_group_name": "${vsphere_compute_cluster_vm_group.cluster_vm_group2.name}"
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
                dependency_vm_group_name: vsphere_compute_cluster_vm_group.cluster_vm_group1.name
                vm_group_name: vsphere_compute_cluster_vm_group.cluster_vm_group2.name
              dependencies:
                vsphere_compute_cluster_vm_group.cluster_vm_group1: |-
                    {
                      "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                      "name": "terraform-test-cluster-vm-group1",
                      "virtual_machine_ids": [
                        "${vsphere_virtual_machine.vm1.id}"
                      ]
                    }
                vsphere_compute_cluster_vm_group.cluster_vm_group2: |-
                    {
                      "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                      "name": "terraform-test-cluster-vm-group2",
                      "virtual_machine_ids": [
                        "${vsphere_virtual_machine.vm2.id}"
                      ]
                    }
                vsphere_virtual_machine.vm1: |-
                    {
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 2048,
                      "name": "terraform-test1",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
                vsphere_virtual_machine.vm2: |-
                    {
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 2048,
                      "name": "terraform-test2",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the group in.  Forces a new
                resource if changed.
            dependency_vm_group_name: |-
                - (Required) The name of the VM group that this
                rule depends on. The VMs defined in the group specified by
                vm_group_name will not be started until the VMs in this
                group are started.
            enabled: '- (Optional) Enable this rule in the cluster. Default: true.'
            mandatory: |-
                - (Optional) When this value is true, prevents any virtual
                machine operations that may violate this rule. Default: false.
            name: |-
                - (Required) The name of the rule. This must be unique in the
                cluster.
            vm_group_name: |-
                - (Required) The name of the VM group that is the subject of
                this rule. The VMs defined in this group will not be started until the VMs in
                the group specified by
                dependency_vm_group_name are started.
        importStatements: []
    vsphere_compute_cluster_vm_group:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere cluster virtual machine group. This can be used to manage groups of virtual machines for relevant rules in a cluster.
        name: vsphere_compute_cluster_vm_group
        title: vsphere_compute_cluster_vm_group
        examples:
            - name: cluster_vm_group
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "name": "terraform-test-cluster-vm-group",
                  "virtual_machine_ids": [
                    "${vsphere_virtual_machine.vm.*.id}"
                  ]
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "count": 2,
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 2048,
                      "name": "terraform-test-${count.index}",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the group in.  Forces a new
                resource if changed.
            name: |-
                - (Required) The name of the VM group. This must be unique in the
                cluster. Forces a new resource if changed.
            virtual_machine_ids: |-
                - (Required) The UUIDs of the virtual machines in this
                group.
        importStatements: []
    vsphere_compute_cluster_vm_host_rule:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere cluster VM/host rule. This can be used to manage VM-to-host affinity and anti-affinity rules.
        name: vsphere_compute_cluster_vm_host_rule
        title: vsphere_compute_cluster_vm_host_rule
        argumentDocs:
            affinity_host_group_name: |-
                - (Optional) When this field is used, the virtual
                machines defined in vm_group_name will be run on the
                hosts defined in this host group.
            anti_affinity_host_group_name: |-
                - (Optional) When this field is used, the
                virtual machines defined in vm_group_name will not be
                run on the hosts defined in this host group.
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the group in.  Forces a new
                resource if changed.
            enabled: '- (Optional) Enable this rule in the cluster. Default: true.'
            mandatory: |-
                - (Optional) When this value is true, prevents any virtual
                machine operations that may violate this rule. Default: false.
            name: |-
                - (Required) The name of the rule. This must be unique in the
                cluster.
            vm_group_name: |-
                - (Required) The name of the virtual machine group to use
                with this rule.
        importStatements: []
    vsphere_content_library:
        subCategory: Virtual Machine
        description: Provides a vSphere content library. Content libraries allow you to manage and share virtual machines, vApp templates, and other types of files. Content libraries enable you to share content across vCenter Server instances in the same or different locations.
        name: vsphere_content_library
        title: vsphere_content_library
        examples:
            - name: publisher_content_library
              manifest: |-
                {
                  "description": "A publishing content library.",
                  "name": "Publisher Content Library",
                  "storage_backing": [
                    "${data.vsphere_datastore.publisher_datastore.id}"
                  ]
                }
            - name: subscriber_content_library
              manifest: |-
                {
                  "description": "A subscribing content library.",
                  "name": "Subscriber Content Library",
                  "storage_backing": [
                    "${data.vsphere_datastore.subscriber_datastore.id}"
                  ],
                  "subscription": [
                    {
                      "automatic_sync": true,
                      "on_demand": false,
                      "subscription_url": "https://vc-01-a.example.com:443/cls/vcsp/lib/f42a4b25-844a-44ec-9063-a3a5e9cc88c7/lib.json"
                    }
                  ]
                }
        argumentDocs:
            authentication_method: '- (Optional) Method to authenticate users. Must be NONE or BASIC.'
            automatic_sync: '- (Optional) Enable automatic synchronization with the published library. Default false.'
            description: '- (Optional) A description for the content library.'
            id: The managed object reference ID of the content library.
            name: '- (Required) The name of the content library.'
            on_demand: '- (Optional) Download the library from a content only when needed. Default true.'
            password: '- (Optional) Password used by subscribers to authenticate.'
            publication: '- (Optional) Options to publish a local content library.'
            publish_url: '- The URL of the published content library.'
            published: '- (Optional) Publish the content library. Default false.'
            storage_backing: '- (Required) The managed object reference ID of the datastore on which to store the content library items.'
            subscription: '- (Optional) Options subscribe to a published content library.'
            subscription_url: '- (Required) URL of the published content library.'
            username: '- (Optional) Username used by subscribers to authenticate. Currently can only be vcsp.'
        importStatements: []
    vsphere_content_library_item:
        subCategory: Virtual Machine
        description: Creates an item in a vSphere content library. Each item can contain multiple files.
        name: vsphere_content_library_item
        title: vsphere_content_library_item
        examples:
            - name: content_library_item
              manifest: |-
                {
                  "description": "Ubuntu Server LTS OVF Template",
                  "file_url": "https://releases.example.com/ubuntu/ubuntu/ubuntu-live-server-amd64.ovf",
                  "library_id": "${data.vsphere_content_library.content_library.id}",
                  "name": "ovf-linux-ubuntu-server-lts"
                }
              references:
                library_id: data.vsphere_content_library.content_library.id
            - name: content_library_item
              manifest: |-
                {
                  "description": "Ubuntu Server LTS .iso",
                  "file_url": "https://releases.example.com/ubuntu/ubuntu-live-server-amd64.iso",
                  "library_id": "${data.vsphere_content_library.content_library.id}",
                  "name": "iso-linux-ubuntu-server-lts",
                  "type": "iso"
                }
              references:
                library_id: data.vsphere_content_library.content_library.id
            - name: content_library_item
              manifest: |-
                {
                  "description": "Ubuntu Server LTS",
                  "library_id": "${data.vsphere_content_library.content_library.id}",
                  "name": "tpl-linux-ubuntu-server-lts",
                  "source_uuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              references:
                library_id: data.vsphere_content_library.content_library.id
        argumentDocs:
            description: '- (Optional) A description for the content library item.'
            file_url: '- (Optional) File to import as the content library item.'
            library_id: '- (Required) The ID of the content library in which to create the item.'
            name: '- (Required) The name of the item to be created in the content library.'
            source_uuid: '- (Optional) Virtual machine UUID to clone to content library.'
            type: |-
                - (Optional) Type of content library item.
                One of "ovf", "iso", or "vm-template". Default: ovf.
        importStatements: []
    vsphere_custom_attribute:
        subCategory: Inventory
        description: Provides a VMware vSphere custom attribute resource. This can be used to manage custom attributes in vSphere.
        name: vsphere_custom_attribute
        title: vsphere_custom_attribute
        examples:
            - name: attribute
              manifest: |-
                {
                  "managed_object_type": "VirtualMachine",
                  "name": "terraform-test-attribute"
                }
            - name: attribute
              manifest: |-
                {
                  "managed_object_type": "VirtualMachine",
                  "name": "Owner"
                }
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "custom_attributes": "${tomap({\"${data.vsphere_custom_attribute.attribute.id}\" = \"John Doe\"})}"
                    }
        argumentDocs:
            managed_object_type: |-
                - (Optional) The object type that this attribute may be
                applied to. If not set, the custom attribute may be applied to any object
                type. For a full list, review the Managed Object Types. Forces a new resource if changed.
            name: '- (Required) The name of the custom attribute.'
        importStatements: []
    vsphere_datacenter:
        subCategory: Inventory
        description: Provides a VMware vSphere datacenter resource. This can be used as the primary container of inventory objects such as hosts and virtual machines.
        name: vsphere_datacenter
        title: vsphere_datacenter
        examples:
            - name: prod_datacenter
              manifest: |-
                {
                  "name": "my_prod_datacenter"
                }
            - name: research_datacenter
              manifest: |-
                {
                  "folder": "/research/",
                  "name": "my_research_datacenter"
                }
        argumentDocs:
            custom_attributes: |-
                - (Optional) Map of custom attribute ids to value
                strings to set for datacenter resource. See
                here for a reference on how to set values
                for custom attributes.
            folder: |-
                - (Optional) The folder where the datacenter should be created.
                Forces a new resource if changed.
            id: |-
                - The name of this datacenter. This will be changed to the managed
                object ID in v2.0.
            moid: '- Managed object ID of this datacenter.'
            name: |-
                - (Required) The name of the datacenter. This name needs to be unique
                within the folder. Forces a new resource if changed.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
        importStatements: []
    vsphere_datastore_cluster:
        subCategory: Storage
        description: Provides a vSphere datastore cluster resource. This can be used to create and manage datastore clusters.
        name: vsphere_datastore_cluster
        title: vsphere_datastore_cluster
        argumentDocs:
            custom_attributes: |-
                - (Optional) A map of custom attribute ids to attribute
                value strings to set for the datastore cluster. See
                here for a reference on how to set values
                for custom attributes.
            datacenter_id: |-
                - (Required) The managed object ID of
                the datacenter to create the datastore cluster in. Forces a new resource if
                changed.
            folder: |-
                - (Optional) The relative path to a folder to put this datastore
                cluster in.  This is a path relative to the datacenter you are deploying the
                datastore to.  Example: for the dc1 datacenter, and a provided folder of
                foo/bar, Terraform will place a datastore cluster named
                terraform-datastore-cluster-test in a datastore folder located at
                /dc1/datastore/foo/bar, with the final inventory path being
                /dc1/datastore/foo/bar/terraform-datastore-cluster-test.
            name: '- (Required) The name of the datastore cluster.'
            sdrs_advanced_options: |-
                - (Optional) A key/value map of advanced Storage DRS
                settings that are not exposed via Terraform or the vSphere client.
            sdrs_automation_level: |-
                - (Optional) The global automation level for all
                virtual machines in this datastore cluster. Default: manual.
            sdrs_default_intra_vm_affinity: |-
                - (Optional) When true, all disks in a
                single virtual machine will be kept on the same datastore. Default: true.
            sdrs_enabled: |-
                - (Optional) Enable Storage DRS for this datastore cluster.
                Default: false.
            sdrs_free_space_threshold: |-
                - (Optional) The threshold, in GB, that storage
                DRS uses to make decisions to migrate VMs out of a datastore. Default: 50
                GB.
            sdrs_free_space_utilization_difference: |-
                - (Optional) The threshold, in
                percent of used space, that storage DRS uses to make decisions to migrate VMs
                out of a datastore. Default: 80 percent.
            sdrs_io_balance_automation_level: |-
                - (Optional) Overrides the default
                automation settings when correcting I/O load imbalances.
            sdrs_io_latency_threshold: |-
                - (Optional) The I/O latency threshold, in
                milliseconds, that storage DRS uses to make recommendations to move disks
                from this datastore. Default: 15 seconds.
            sdrs_io_load_balance_enabled: |-
                - (Optional) Enable I/O load balancing for
                this datastore cluster. Default: true.
            sdrs_io_load_imbalance_threshold: |-
                - (Optional) The difference between load
                in datastores in the cluster before storage DRS makes recommendations to
                balance the load. Default: 5 percent.
            sdrs_io_reservable_iops_threshold: |-
                - (Optional) The threshold of reservable
                IOPS of all virtual machines on the datastore before storage DRS makes
                recommendations to move VMs off of a datastore. Note that this setting should
                only be set if sdrs_io_reservable_percent_threshold cannot make an accurate
                estimate of the capacity of the datastores in your cluster, and should be set
                to roughly 50-60% of the worst case peak performance of the backing LUNs.
            sdrs_io_reservable_percent_threshold: |-
                - (Optional) The threshold, in
                percent, of actual estimated performance of the datastore (in IOPS) that
                storage DRS uses to make recommendations to move VMs off of a datastore when
                the total reservable IOPS exceeds the threshold. Default: 60 percent.
            sdrs_io_reservable_threshold_mode: |-
                - (Optional) The reservable IOPS
                threshold setting to use, sdrs_io_reservable_percent_threshold in the event
                of automatic, or sdrs_io_reservable_iops_threshold in the event of
                manual. Default: automatic.
            sdrs_load_balance_interval: |-
                - (Optional) The storage DRS poll interval, in
                minutes. Default: 480 minutes.
            sdrs_policy_enforcement_automation_level: |-
                - (Optional) Overrides the default
                automation settings when correcting storage and VM policy violations.
            sdrs_rule_enforcement_automation_level: |-
                - (Optional) Overrides the default
                automation settings when correcting affinity rule violations.
            sdrs_space_balance_automation_level: |-
                - (Optional) Overrides the default
                automation settings when correcting disk space imbalances.
            sdrs_space_utilization_threshold: |-
                - (Optional) Runtime thresholds govern
                when Storage DRS performs or recommends migrations
                (based on the selected automation level). Default: 80 percent.
            sdrs_vm_evacuation_automation_level: |-
                - (Optional) Overrides the default
                automation settings when generating recommendations for datastore evacuation.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
        importStatements: []
    vsphere_datastore_cluster_vm_anti_affinity_rule:
        subCategory: Storage
        description: Provides a VMware vSphere datastore cluster virtual machine anti-affinity rule. This can be used to manage rules to tell virtual machines to run on separate datastores.
        name: vsphere_datastore_cluster_vm_anti_affinity_rule
        title: vsphere_datastore_cluster_vm_anti_affinity_rule
        examples:
            - name: cluster_vm_anti_affinity_rule
              manifest: |-
                {
                  "datastore_cluster_id": "${data.vsphere_datastore_cluster.datastore_cluster.id}",
                  "name": "terraform-test-datastore-cluster-vm-anti-affinity-rule",
                  "virtual_machine_ids": [
                    "${vsphere_virtual_machine.vm.*.id}"
                  ]
                }
              references:
                datastore_cluster_id: data.vsphere_datastore_cluster.datastore_cluster.id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "count": 2,
                      "datastore_cluster_id": "${data.vsphere_datastore_cluster.datastore_cluster.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 2048,
                      "name": "terraform-test-${count.index}",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
        argumentDocs:
            datastore_cluster_id: |-
                - (Required) The managed object reference
                ID of the datastore cluster to put the group in.  Forces
                a new resource if changed.
            enabled: '- (Optional) Enable this rule in the cluster. Default: true.'
            mandatory: |-
                - (Optional) When this value is true, prevents any virtual
                machine operations that may violate this rule. Default: false.
            name: '- (Required) The name of the rule. This must be unique in the cluster.'
            virtual_machine_ids: |-
                - (Required) The UUIDs of the virtual machines to run
                on different datastores from each other.
        importStatements: []
    vsphere_distributed_port_group:
        subCategory: Networking
        description: Provides a vSphere distributed port group resource. This can be used to create and manage port groups on a vSphere Distributed Switch.
        name: vsphere_distributed_port_group
        title: vsphere_distributed_port_group
        examples:
            - name: pg
              manifest: |-
                {
                  "distributed_virtual_switch_uuid": "${vsphere_distributed_virtual_switch.vds.id}",
                  "name": "pg-01",
                  "vlan_id": 1000
                }
              references:
                distributed_virtual_switch_uuid: vsphere_distributed_virtual_switch.vds.id
              dependencies:
                vsphere_distributed_virtual_switch.vds: |-
                    {
                      "active_uplinks": [
                        "uplink1",
                        "uplink2"
                      ],
                      "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                      "host": [
                        {
                          "devices": [
                            "${var.network_interfaces}"
                          ],
                          "host_system_id": "${data.vsphere_host.host.0.id}"
                        },
                        {
                          "devices": [
                            "${var.network_interfaces}"
                          ],
                          "host_system_id": "${data.vsphere_host.host.1.id}"
                        },
                        {
                          "devices": [
                            "${var.network_interfaces}"
                          ],
                          "host_system_id": "${data.vsphere_host.host.2.id}"
                        }
                      ],
                      "name": "vds-01",
                      "standby_uplinks": [
                        "uplink3",
                        "uplink4"
                      ],
                      "uplinks": [
                        "uplink1",
                        "uplink2",
                        "uplink3",
                        "uplink4"
                      ]
                    }
            - name: pg
              manifest: |-
                {
                  "active_uplinks": [
                    "uplink1",
                    "uplink2"
                  ],
                  "distributed_virtual_switch_uuid": "${vsphere_distributed_virtual_switch.vds.id}",
                  "name": "pg-01",
                  "standby_uplinks": [],
                  "vlan_id": 1000
                }
              references:
                distributed_virtual_switch_uuid: vsphere_distributed_virtual_switch.vds.id
              dependencies:
                vsphere_distributed_virtual_switch.vds: |-
                    {
                      "active_uplinks": [
                        "uplink1"
                      ],
                      "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                      "name": "vds-01",
                      "standby_uplinks": [
                        "uplink2"
                      ],
                      "uplinks": [
                        "uplink1",
                        "uplink2"
                      ]
                    }
        argumentDocs:
            auto_expand: |-
                - (Optional) Allows the port group to create additional ports
                past the limit specified in number_of_ports if necessary. Default: true.
            block_override_allowed: |-
                - (Optional) Allow the port shutdown
                policy to be overridden on an individual port.
            config_version: |-
                : The current version of the port group configuration,
                incremented by subsequent updates to the port group.
            custom_attributes: |-
                (Optional) Map of custom attribute ids to attribute
                value string to set for port group. See here
                for a reference on how to set values for custom attributes.
            description: '- (Optional) An optional description for the port group.'
            distributed_virtual_switch_uuid: |-
                - (Required) The ID of the VDS to add the
                port group to. Forces a new resource if changed.
            id: |-
                : The managed object reference ID of the created
                port group.
            key: ': The generated UUID of the port group.'
            live_port_moving_allowed: |-
                - (Optional) Allow a port in this port group to be
                moved to another port group while it is connected.
            name: '- (Required) The name of the port group.'
            netflow_override_allowed: |-
                - (Optional) Allow the
                Netflow policy on this port group to be overridden on an
                individual port.
            network_resource_pool_key: |-
                - (Optional) The key of a network resource pool
                to associate with this port group. The default is -1, which implies no
                association.
            network_resource_pool_override_allowed: |-
                - (Optional) Allow the network
                resource pool set on this port group to be overridden on an individual port.
            number_of_ports: |-
                - (Optional) The number of ports available on this port
                group. Cannot be decreased below the amount of used ports on the port group.
            port_config_reset_at_disconnect: |-
                - (Optional) Reset a port's settings to the
                settings defined on this port group policy when the port disconnects.
            port_name_format: |-
                - (Optional) An optional formatting policy for naming of
                the ports in this port group. See the portNameFormat attribute listed
                here for details on the format syntax.
            port_private_secondary_vlan_id: |-
                - (Optional) Used to define a secondary VLAN
                ID when using private VLANs.
            security_policy_override_allowed: |-
                - (Optional) Allow the
                security policy settings defined in this port group
                policy to be overridden on an individual port.
            shaping_override_allowed: |-
                - (Optional) Allow the
                traffic shaping options on this port group policy
                to be overridden on an individual port.
            traffic_filter_override_allowed: |-
                - (Optional) Allow any traffic filters on
                this port group to be overridden on an individual port.
            type: |-
                - (Optional) The port group type. Can be one of earlyBinding (static
                binding) or ephemeral. Default: earlyBinding.
            uplink_teaming_override_allowed: |-
                - (Optional) Allow the
                uplink teaming options on this port group to be
                overridden on an individual port.
            vlan_id: |-
                - (Optional) The member VLAN for the ports this policy applies to. A
                value of 0 means no VLAN.
            vlan_override_allowed: |-
                - (Optional) Allow the
                VLAN settings on this port group to be overridden on an
                individual port.
            vlan_range: |-
                - (Optional) Used to denote VLAN trunking. Use the min_vlan
                and max_vlan sub-arguments to define the tagged VLAN range. Multiple
                vlan_range definitions are allowed, but they must not overlap. Example
                below:
        importStatements: []
    vsphere_distributed_virtual_switch:
        subCategory: Networking
        description: Provides a vSphere Distributed Switch resource. This can be used to create and manage the vSphere Distributed Switch resources in vCenter Server.
        name: vsphere_distributed_virtual_switch
        title: vsphere_distributed_virtual_switch
        examples:
            - name: vds
              manifest: |-
                {
                  "active_uplinks": [
                    "uplink1",
                    "uplink2"
                  ],
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "host": [
                    {
                      "devices": [
                        "${var.network_interfaces}"
                      ],
                      "host_system_id": "${data.vsphere_host.host.0.id}"
                    },
                    {
                      "devices": [
                        "${var.network_interfaces}"
                      ],
                      "host_system_id": "${data.vsphere_host.host.1.id}"
                    },
                    {
                      "devices": [
                        "${var.network_interfaces}"
                      ],
                      "host_system_id": "${data.vsphere_host.host.2.id}"
                    }
                  ],
                  "name": "vds-01",
                  "standby_uplinks": [
                    "uplink3",
                    "uplink4"
                  ],
                  "uplinks": [
                    "uplink1",
                    "uplink2",
                    "uplink3",
                    "uplink4"
                  ]
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
                host.host_system_id: data.vsphere_host.host.2.id
            - name: vds
              manifest: |-
                {
                  "active_uplinks": [
                    "uplink1"
                  ],
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "name": "vds-01",
                  "standby_uplinks": [
                    "uplink2"
                  ],
                  "uplinks": [
                    "uplink1",
                    "uplink2"
                  ]
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
            - name: vds
              manifest: |-
                {
                  "virtualmachine_maximum_mbit": 200,
                  "virtualmachine_reservation_mbit": 20,
                  "virtualmachine_share_count": 150,
                  "virtualmachine_share_level": "custom"
                }
            - name: vds
              manifest: |-
                {
                  "vlan_range": [
                    {
                      "max_vlan": 199,
                      "min_vlan": 100
                    },
                    {
                      "max_vlan": 399,
                      "min_vlan": 300
                    }
                  ]
                }
        argumentDocs:
            active_uplinks: |-
                - (Optional) A list of active uplinks to be used in load
                balancing. These uplinks need to match the definitions in the
                uplinks VDS argument. See
                here for more details.
            allow_forged_transmits: |-
                - (Optional) Controls whether or not a virtual
                network adapter is allowed to send network traffic with a different MAC
                address than that of its own.
            allow_mac_changes: |-
                - (Optional) Controls whether or not the Media Access
                Control (MAC) address can be changed.
            allow_promiscuous: |-
                - (Optional) Enable promiscuous mode on the network. This
                flag indicates whether or not all traffic is seen on a given port.
            block_all_ports: |-
                - (Optional) Shuts down all ports in the port groups that
                this policy applies to, effectively blocking all network access to connected
                virtual devices.
            check_beacon: |-
                - (Optional) Enables beacon probing as an additional measure
                to detect NIC failure.
            config_version: |-
                : The current version of the VDS configuration, incremented
                by subsequent updates to the VDS.
            contact_detail: |-
                - (Optional) The detailed contact information for the person
                who is responsible for the VDS.
            contact_name: |-
                - (Optional) The name of the person who is responsible for the
                VDS.
            custom_attributes: |-
                - (Optional) Map of custom attribute ids to attribute
                value strings to set for VDS. See here
                for a reference on how to set values for custom attributes.
            datacenter_id: |-
                - (Required) The ID of the datacenter where the VDS will be
                created. Forces a new resource if changed.
            description: '- (Optional) A detailed description for the VDS.'
            devices: |-
                - (Optional) The list of NIC devices to map to uplinks on the VDS,
                added in order they are specified.
            directpath_gen2_allowed: |-
                - (Optional) Allow VMDirectPath Gen2 for the ports
                for which this policy applies to.
            egress_shaping_average_bandwidth: |-
                - (Optional) The average bandwidth in bits
                per second if egress traffic shaping is enabled on the port.
            egress_shaping_burst_size: |-
                - (Optional) The maximum burst size allowed in
                bytes if egress traffic shaping is enabled on the port.
            egress_shaping_enabled: |-
                - (Optional) true if the traffic shaper is enabled
                on the port for egress traffic.
            egress_shaping_peak_bandwidth: |-
                - (Optional) The peak bandwidth during bursts
                in bits per second if egress traffic shaping is enabled on the port.
            failback: |-
                - (Optional) If true, the teaming policy will re-activate failed
                uplinks higher in precedence when they come back up.
            folder: |-
                - (Optional) The folder in which to create the VDS.
                Forces a new resource if changed.
            host: |-
                - (Optional) Use the host block to declare a host specification. The
                options are:
            host_system_id: |-
                - (Required) The host system ID of the host to add to the
                VDS.
            id: ': The UUID of the created VDS.'
            ignore_other_pvlan_mappings: |-
                - (Optional) Whether to ignore existing PVLAN
                mappings not managed by this resource. Defaults to false.
            ingress_shaping_average_bandwidth: |-
                - (Optional) The average bandwidth in
                bits per second if ingress traffic shaping is enabled on the port.
            ingress_shaping_burst_size: |-
                - (Optional) The maximum burst size allowed in
                bytes if ingress traffic shaping is enabled on the port.
            ingress_shaping_enabled: |-
                - (Optional) true if the traffic shaper is
                enabled on the port for ingress traffic.
            ingress_shaping_peak_bandwidth: |-
                - (Optional) The peak bandwidth during
                bursts in bits per second if ingress traffic shaping is enabled on the port.
            ipv4_address: |-
                - (Optional) An IPv4 address to identify the switch. This is
                mostly useful when used with the Netflow arguments.
            lacp_api_version: |-
                - (Optional) The Link Aggregation Control Protocol group
                version to use with the VDS. Possible values are singleLag and
                multipleLag.
            lacp_enabled: |-
                - (Optional) Enables LACP for the ports that this policy
                applies to.
            lacp_mode: '- (Optional) The LACP mode. Can be one of active or passive.'
            link_discovery_operation: |-
                - (Optional) Whether to advertise or listen
                for link discovery traffic.
            link_discovery_protocol: |-
                - (Optional) The discovery protocol type. Valid
                types are cdp and lldp.
            max_mtu: '- (Optional) The maximum transmission unit (MTU) for the VDS.'
            maximum_mbit: |-
                - (Optional) The maximum amount of bandwidth allowed for this
                traffic class in Mbits/sec.
            multicast_filtering_mode: |-
                - (Optional) The multicast filtering mode to use
                with the VDS. Can be one of legacyFiltering or snooping.
            name: '- (Required) The name of the VDS.'
            netflow_active_flow_timeout: |-
                - (Optional) The number of seconds after which
                active flows are forced to be exported to the collector. Allowed range is
                60 to 3600. Default: 60.
            netflow_collector_ip_address: |-
                - (Optional) IP address for the Netflow
                collector, using IPv4 or IPv6. Must be set before Netflow can be enabled.
            netflow_collector_port: |-
                - (Optional) Port for the Netflow collector. This
                must be set before Netflow can be enabled.
            netflow_enabled: |-
                - (Optional) Enables Netflow on all ports that this policy
                applies to.
            netflow_idle_flow_timeout: |-
                - (Optional) The number of seconds after which
                idle flows are forced to be exported to the collector. Allowed range is 10
                to 600. Default: 15.
            netflow_internal_flows_only: |-
                - (Optional) Whether to limit analysis to
                traffic that has both source and destination served by the same host.
                Default: false.
            netflow_observation_domain_id: |-
                - (Optional) The observation domain ID for
                the Netflow collector.
            netflow_sampling_rate: |-
                - (Optional) The ratio of total number of packets to
                the number of packets analyzed. The default is 0, which indicates that the
                VDS should analyze all packets. The maximum value is 1000, which
                indicates an analysis rate of 0.001%.
            network_resource_control_enabled: |-
                - (Optional) Set to true to enable
                network I/O control. Default: false.
            network_resource_control_version: |-
                - (Optional) The version of network I/O
                control to use. Can be one of version2 or version3. Default: version2.
            notify_switches: |-
                - (Optional) If true, the teaming policy will notify the
                broadcast network of an uplink failover, triggering cache updates.
            port_private_secondary_vlan_id: |-
                - (Optional) Used to define a secondary VLAN
                ID when using private VLANs.
            primary_vlan_id: |-
                - (Required) The primary VLAN ID. The VLAN IDs of 0 and
                4095 are reserved and cannot be used in this property.
            pvlan_mapping: |-
                - (Optional) Use the pvlan_mapping block to declare a
                private VLAN mapping. The options are:
            pvlan_type: |-
                - (Required) The private VLAN type. Valid values are
                promiscuous, community and isolated.
            reservation_mbit: |-
                - (Optional) The guaranteed amount of bandwidth for this
                traffic class in Mbits/sec.
            secondary_vlan_id: |-
                - (Required) The secondary VLAN ID. The VLAN IDs of 0
                and 4095 are reserved and cannot be used in this property.
            share_count: |-
                - (Optional) The number of shares for a custom level. This is
                ignored if share_level is not custom.
            share_level: |-
                - (Optional) A pre-defined share level that can be assigned to
                this resource class. Can be one of low, normal, high, or custom.
            standby_uplinks: |-
                - (Optional) A list of standby uplinks to be used in
                failover. These uplinks need to match the definitions in the
                uplinks VDS argument. See
                here for more details.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
            teaming_policy: |-
                - (Optional) The uplink teaming policy. Can be one of
                loadbalance_ip, loadbalance_srcmac, loadbalance_srcid,
                failover_explicit, or loadbalance_loadbased.
            tx_uplink: |-
                - (Optional) Forward all traffic transmitted by ports for which
                this policy applies to its VDS uplinks.
            uplinks: |-
                - (Optional) A list of strings that uniquely identifies the names
                of the uplinks on the VDS across hosts. The number of items in this list
                controls the number of uplinks that exist on the VDS, in addition to the
                names. See here for an example on how to
                use this option.
            version: |-
                - (Optional) - The version of the VDS. BY default, a VDS is created
                at the latest version supported by the vSphere version if not specified.
                A VDS can be upgraded to a newer version, but can not be downgraded.
            vlan: |-
                - (Optional) The member VLAN for the ports this policy applies to. A
                value of 0 means no VLAN.
            vlan_range: |-
                - (Optional) Used to denote VLAN trunking. Use the min_vlan
                and max_vlan sub-arguments to define the tagged VLAN range. Multiple
                vlan_range definitions are allowed, but they must not overlap. Example
                below:
        importStatements: []
    vsphere_dpm_host_override:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere DPM host override resource. This can be used to override power management settings for a host in a cluster.
        name: vsphere_dpm_host_override
        title: vsphere_dpm_host_override
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the override in.  Forces a new
                resource if changed.
            dpm_automation_level: |-
                - (Optional) The automation level for host power
                operations on this host. Can be one of manual or automated. Default:
                manual.
            dpm_enabled: |-
                - (Optional) Enable DPM support for this host. Default:
                false.
            host_system_ids: |-
                - (Optional) The managed object ID of
                the host to create the override for.
        importStatements: []
    vsphere_drs_vm_override:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere DRS virtual machine override resource. This can be used to override DRS settings in a cluster.
        name: vsphere_drs_vm_override
        title: vsphere_drs_vm_override
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the override in.  Forces a new
                resource if changed.
            drs_automation_level: |-
                - (Optional) Overrides the automation level for this virtual
                machine in the cluster. Can be one of manual, partiallyAutomated, or
                fullyAutomated. Default: manual.
            drs_enabled: |-
                - (Optional) Overrides the default DRS setting for this virtual
                machine. Can be either true or false. Default: false.
            virtual_machine_id: |-
                - (Required) The UUID of the virtual machine to create
                the override for.  Forces a new resource if changed.
        importStatements: []
    vsphere_file:
        subCategory: Storage
        description: Provides a VMware vSphere file resource. This can be used to upload files (e.g. .iso and .vmdk) from the Terraform host machine to a remote vSphere or copy files within vSphere.
        name: vsphere_file
        title: vsphere_file
        examples:
            - name: ubuntu_vmdk_upload
              manifest: |-
                {
                  "create_directories": true,
                  "datacenter": "dc-01",
                  "datastore": "datastore-01",
                  "destination_file": "/my/dst/path/custom_ubuntu.vmdk",
                  "source_file": "/my/src/path/custom_ubuntu.vmdk"
                }
            - name: ubuntu_copy
              manifest: |-
                {
                  "create_directories": true,
                  "datacenter": "dc-01",
                  "datastore": "datastore-01",
                  "destination_file": "/my/dst/path/custom_ubuntu.vmdk",
                  "source_datacenter": "dc-01",
                  "source_datastore": "datastore-01",
                  "source_file": "/my/src/path/custom_ubuntu.vmdk"
                }
        argumentDocs:
            create_directories: |-
                - (Optional) Create directories in destination_file
                path parameter on first apply if any are missing for copy operation.
            datacenter: |-
                - (Optional) The name of a datacenter to which the file will be
                uploaded.
            datastore: |-
                - (Required) The name of the datastore to which to upload the
                file.
            destination_file: |-
                - (Required) The path to where the file should be uploaded
                or copied to on the destination datastore in vSphere.
            source_datacenter: |-
                - (Optional) The name of a datacenter from which the file
                will be copied. Forces a new resource if changed.
            source_datastore: |-
                - (Optional) The name of the datastore from which file will
                be copied. Forces a new resource if changed.
            source_file: |-
                - (Required) The path to the file being uploaded from the
                Terraform host to the vSphere environment or copied within vSphere
                environment. Forces a new resource if changed.
        importStatements: []
    vsphere_folder:
        subCategory: Inventory
        description: Provides a VMware vSphere folder resource. This can be used to manage vSphere inventory folders.
        name: vsphere_folder
        title: vsphere_folder
        examples:
            - name: folder
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "path": "terraform-test-folder",
                  "type": "vm"
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
            - name: parent
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "path": "terraform-test-parent",
                  "type": "vm"
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
            - name: folder
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "path": "${vsphere_folder.parent.path}/terraform-test-folder",
                  "type": "vm"
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
        argumentDocs:
            custom_attributes: |-
                - (Optional) Map of custom attribute ids to attribute
                value strings to set for folder. See here
                for a reference on how to set values for custom attributes.
            datacenter_id: |-
                - The ID of the datacenter the folder will be created in.
                Required for all folder types except for datacenter folders. Forces a new
                resource if changed.
            path: |-
                - (Required) The path of the folder to be created. This is relative to
                the root of the type of folder you are creating, and the supplied datacenter.
                For example, given a default datacenter of default-dc, a folder of type
                vm (denoting a virtual machine folder), and a supplied folder of
                terraform-test-folder, the resulting path would be
                /default-dc/vm/terraform-test-folder.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
            type: |-
                - (Required) The type of folder to create. Allowed options are
                datacenter for datacenter folders, host for host and cluster folders,
                vm for virtual machine folders, datastore for datastore folders, and
                network for network folders. Forces a new resource if changed.
        importStatements: []
    vsphere_guest_os_customization:
        subCategory: Virtual Machine
        description: Provides a VMware vSphere customization specification resource. This can be used to apply a customization specification to the guest operating system of a virtual machine after cloning.
        name: vsphere_guest_os_customization
        title: vsphere_guest_os_customization
        examples:
            - name: windows
              manifest: |-
                {
                  "name": "windows",
                  "spec": [
                    {
                      "windows_options": [
                        {
                          "admin_password": "VMware1!",
                          "auto_logon": false,
                          "auto_logon_count": 0,
                          "computer_name": "windows",
                          "run_once_command_list": [
                            "command-1",
                            "command-2"
                          ],
                          "time_zone": 4,
                          "workgroup": "workgroup"
                        }
                      ]
                    }
                  ],
                  "type": "Windows"
                }
        argumentDocs:
            change_version: '- The number of last changed version to the customization specification.'
            description: '- (Optional) The description for the customization specification.'
            last_update_time: '- The time of last modification to the customization specification.'
            name: '- (Required) The name of the customization specification is the unique identifier per vCenter Server instance.'
            spec: '- Container object for the Guest OS properties about to be customized . See virtual machine customizations'
            type: '- (Required) The type of customization specification: One among: Windows, Linux.'
        importStatements: []
    vsphere_ha_vm_override:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere HA virtual machine override resource. This can be used to override high availability settings in a cluster.
        name: vsphere_ha_vm_override
        title: vsphere_ha_vm_override
        examples:
            - name: ha_vm_override
              manifest: |-
                {
                  "compute_cluster_id": "${data.vsphere_compute_cluster.cluster.id}",
                  "ha_vm_restart_priority": "highest",
                  "virtual_machine_id": "${vsphere_virtual_machine.vm.id}"
                }
              references:
                compute_cluster_id: data.vsphere_compute_cluster.cluster.id
                virtual_machine_id: vsphere_virtual_machine.vm.id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 2048,
                      "name": "terraform-test",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                    }
        argumentDocs:
            compute_cluster_id: |-
                - (Required) The managed object reference
                ID of the cluster to put the override in.  Forces a new
                resource if changed.
            ha_datastore_apd_recovery_action: |-
                - (Optional) Controls the action to take
                on this virtual machine if an APD status on an affected datastore clears in
                the middle of an APD event. Can be one of useClusterDefault, none or
                reset.  Default: useClusterDefault.
                *
            ha_datastore_apd_response: |-
                - (Optional) Controls the action to take on this
                virtual machine when the cluster has detected loss to all paths to a relevant
                datastore. Can be one of clusterDefault, disabled, warning,
                restartConservative, or restartAggressive.  Default: clusterDefault.
                *
            ha_datastore_apd_response_delay: |-
                - (Optional) Controls the delay in seconds
                to wait after an APD timeout event to execute the response action defined in
                ha_datastore_apd_response. Use -1 to use
                the cluster default. Default: -1.
                *
            ha_datastore_pdl_response: |-
                - (Optional) Controls the action to take on this
                virtual machine when the cluster has detected a permanent device loss to a
                relevant datastore. Can be one of clusterDefault, disabled, warning, or
                restartAggressive. Default: clusterDefault.
                *
            ha_host_isolation_response: |-
                - (Optional) The action to take on this virtual
                machine when a host has detected that it has been isolated from the rest of
                the cluster. Can be one of clusterIsolationResponse, none, powerOff, or
                shutdown. Default: clusterIsolationResponse.
            ha_vm_failure_interval: |-
                - (Optional) If a heartbeat from this virtual
                machine is not received within this configured interval, the virtual machine
                is marked as failed. The value is in seconds. Default: 30.
            ha_vm_maximum_failure_window: |-
                - (Optional) The length of the reset window in
                which ha_vm_maximum_resets can operate. When this
                window expires, no more resets are attempted regardless of the setting
                configured in ha_vm_maximum_resets. -1 means no window, meaning an
                unlimited reset time is allotted. The value is specified in seconds. Default:
                -1 (no window).
            ha_vm_maximum_resets: |-
                - (Optional) The maximum number of resets that HA will
                perform to this virtual machine when responding to a failure event. Default:
                3
            ha_vm_minimum_uptime: |-
                - (Optional) The time, in seconds, that HA waits after
                powering on this virtual machine before monitoring for heartbeats. Default:
                120 (2 minutes).
            ha_vm_monitoring: |-
                - (Optional) The type of virtual machine monitoring to use
                when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
                vmMonitoringOnly, or vmAndAppMonitoring. Default: vmMonitoringDisabled.
            ha_vm_monitoring_use_cluster_defaults: |-
                - (Optional) Determines whether or
                not the cluster's default settings or the VM override settings specified in
                this resource are used for virtual machine monitoring. The default is true
                (use cluster defaults) - set to false to have overrides take effect.
            ha_vm_restart_priority: |-
                - (Optional) The restart priority for the virtual
                machine when vSphere detects a host failure. Can be one of
                clusterRestartPriority, lowest, low, medium, high, highest, or disabled.
                Default: clusterRestartPriority.
            ha_vm_restart_timeout: |-
                - (Optional) The maximum time, in seconds, that
                vSphere HA will wait for this virtual machine to be ready. Use -1 to
                specify the cluster default.  Default: -1.
                *
            virtual_machine_id: |-
                - (Required) The UUID of the virtual machine to create
                the override for.  Forces a new resource if changed.
        importStatements: []
    vsphere_host:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere host resource. This represents an ESXi host that can be used as a member of a cluster or as a standalone host.
        name: vsphere_host
        title: vsphere_host
        examples:
            - name: esx-01
              manifest: |-
                {
                  "datacenter": "${data.vsphere_datacenter.datacenter.id}",
                  "hostname": "esxi-01.example.com",
                  "license": "00000-00000-00000-00000-00000",
                  "password": "password",
                  "thumbprint": "${data.vsphere_host_thumbprint.thumbprint.id}",
                  "username": "root"
                }
              references:
                datacenter: data.vsphere_datacenter.datacenter.id
                thumbprint: data.vsphere_host_thumbprint.thumbprint.id
            - name: esx-01
              manifest: |-
                {
                  "cluster": "${data.vsphere_compute_cluster.cluster.id}",
                  "hostname": "esxi-01.example.com",
                  "license": "00000-00000-00000-00000-00000",
                  "password": "password",
                  "services": [
                    {
                      "ntpd": [
                        {
                          "enabled": true,
                          "ntp_servers": [
                            "pool.ntp.org"
                          ],
                          "policy": "on"
                        }
                      ]
                    }
                  ],
                  "thumbprint": "${data.vsphere_host_thumbprint.thumbprint.id}",
                  "username": "root"
                }
              references:
                cluster: data.vsphere_compute_cluster.cluster.id
                thumbprint: data.vsphere_host_thumbprint.thumbprint.id
            - name: esx-01
              manifest: |-
                {
                  "datacenter": "${data.vsphere_datacenter.datacenter.id}",
                  "hostname": "esxi-01.example.com",
                  "password": "password",
                  "thumbprint": "${data.vsphere_host_thumbprint.thumbprint.id}",
                  "username": "root"
                }
              references:
                datacenter: data.vsphere_datacenter.datacenter.id
                thumbprint: data.vsphere_host_thumbprint.thumbprint.id
            - name: esx-01
              manifest: |-
                {
                  "cluster": "${data.vsphere_compute_cluster.cluster.id}",
                  "hostname": "esxi-01.example.com",
                  "license": "00000-00000-00000-00000-00000",
                  "password": "password",
                  "services": [
                    {
                      "ntpd": [
                        {
                          "enabled": true,
                          "ntp_servers": [
                            "pool.ntp.org"
                          ],
                          "policy": "on"
                        }
                      ]
                    }
                  ],
                  "thumbprint": "${data.vsphere_host_thumbprint.thumbprint.id}",
                  "username": "root"
                }
              references:
                cluster: data.vsphere_compute_cluster.cluster.id
                thumbprint: data.vsphere_host_thumbprint.thumbprint.id
        argumentDocs:
            cluster: |-
                - (Optional) The ID of the Compute Cluster this host should
                be added to. This should not be set if datacenter is set. Conflicts with:
                cluster_managed.
            cluster_managed: |-
                - (Optional) Can be set to true if compute cluster
                membership will be managed through the compute_cluster resource rather
                than thehost resource. Conflicts with: cluster.
            connected: |-
                - (Optional) If set to false then the host will be disconnected.
                Default is false.
            custom_attributes: |-
                - (Optional) A map of custom attribute IDs and string
                values to apply to the resource. Please refer to the
                vsphere_custom_attributes resource for more information on applying
                tags to resources.
            datacenter: |-
                - (Optional) The ID of the datacenter this host should
                be added to. This should not be set if cluster is set.
            force: |-
                - (Optional) If set to true then it will force the host to be added,
                even if the host is already connected to a different vCenter Server instance.
                Default is false.
            hostname: '- (Required) FQDN or IP address of the host to be added.'
            id: '- The ID of the host.'
            license: |-
                - (Optional) The license key that will be applied to the host.
                The license key is expected to be present in vSphere.
            lockdown: |-
                - (Optional) Set the lockdown state of the host. Valid options are
                disabled, normal, and strict. Default is disabled.
            maintenance: |-
                - (Optional) Set the management state of the host.
                Default is false.
            ntpd: service has three settings, enabled sets service to running or not running, policy sets service based on setting of on which sets service to "Start and stop with host", off which sets service to "Start and stop manually", automatic which sets service to "Start and stop with port usage".
            password: |-
                - (Required) Password that will be used by vSphere to authenticate
                to the host.
            services: '- (Optional) Set Services on host, the settings to be set are based on service being set as part of import.'
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. Please
                refer to the vsphere_tag resource for more information on applying
                tags to resources.
            thumbprint: |-
                - (Optional) Host's certificate SHA-1 thumbprint. If not set the
                CA that signed the host's certificate should be trusted. If the CA is not
                trusted and no thumbprint is set then the operation will fail. See data source
                vsphere_host_thumbprint.
            username: |-
                - (Required) Username that will be used by vSphere to authenticate
                to the host.
        importStatements: []
    vsphere_host_port_group:
        subCategory: Networking
        description: Provides a vSphere port group resource to manage port groups on ESXi hosts.
        name: vsphere_host_port_group
        title: vsphere_host_port_group
        examples:
            - name: pg
              manifest: |-
                {
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "name": "portgroup-01",
                  "virtual_switch_name": "${vsphere_host_virtual_switch.host_virtual_switch.name}"
                }
              references:
                host_system_id: data.vsphere_host.host.id
                virtual_switch_name: vsphere_host_virtual_switch.host_virtual_switch.name
              dependencies:
                vsphere_host_virtual_switch.host_virtual_switch: |-
                    {
                      "active_nics": [
                        "vmnic0"
                      ],
                      "host_system_id": "${data.vsphere_host.host.id}",
                      "name": "switch-01",
                      "network_adapters": [
                        "vmnic0",
                        "vmnic1"
                      ],
                      "standby_nics": [
                        "vmnic1"
                      ]
                    }
            - name: pg
              manifest: |-
                {
                  "allow_promiscuous": true,
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "name": "portgroup-01",
                  "virtual_switch_name": "${vsphere_host_virtual_switch.host_virtual_switch.name}",
                  "vlan_id": 4095
                }
              references:
                host_system_id: data.vsphere_host.host.id
                virtual_switch_name: vsphere_host_virtual_switch.host_virtual_switch.name
              dependencies:
                vsphere_host_virtual_switch.host_virtual_switch: |-
                    {
                      "active_nics": [
                        "vmnic0"
                      ],
                      "host_system_id": "${data.vsphere_host.host.id}",
                      "name": "switch-01",
                      "network_adapters": [
                        "vmnic0",
                        "vmnic1"
                      ],
                      "standby_nics": [
                        "vmnic1"
                      ]
                    }
        argumentDocs:
            computed_policy: |-
                - A map with a full set of the policy
                options computed from defaults and overrides,
                explaining the effective policy for this port group.
            host_system_id: |-
                - (Required) The managed object ID of
                the host to set the port group up on. Forces a new resource if changed.
            id: |-
                - An ID for the port group that is unique to Terraform.
                The convention is a prefix, the host system ID, and the port group name.
                For example,tf-HostPortGroup:host-10:portgroup-01. Tracking a port group
                on a standard switch, which can be created with or without a vCenter Server,
                is different than a dvPortGroup which is tracked as a managed object ID in
                vCenter Server versus a key on a host.
            key: '- The key for this port group as returned from the vSphere API.'
            name: |-
                - (Required) The name of the port group.  Forces a new resource if
                changed.
            ports: '- A list of ports that currently exist and are used on this port group.'
            virtual_switch_name: |-
                - (Required) The name of the virtual switch to bind
                this port group to. Forces a new resource if changed.
            vlan_id: |-
                - (Optional) The VLAN ID/trunk mode for this port group.  An ID of
                0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an
                ID of 4095 enables trunk mode, allowing the guest to manage its own
                tagging. Default: 0.
        importStatements: []
    vsphere_host_virtual_switch:
        subCategory: Networking
        description: Provides a vSphere Host Virtual Switch Resource. This can be used to configure vSwitches direct on an ESXi host.
        name: vsphere_host_virtual_switch
        title: vsphere_host_virtual_switch
        argumentDocs:
            active_nics: |-
                - (Required) The list of active network adapters used for load
                balancing.
            allow_forged_transmits: |-
                - (Optional) Controls whether or not the virtual
                network adapter is allowed to send network traffic with a different MAC
                address than that of its own. Default: true.
            allow_mac_changes: |-
                - (Optional) Controls whether or not the Media Access
                Control (MAC) address can be changed. Default: true.
            allow_promiscuous: |-
                - (Optional) Enable promiscuous mode on the network. This
                flag indicates whether or not all traffic is seen on a given port. Default:
                false.
            beacon_interval: |-
                - (Optional) The interval, in seconds, that a NIC beacon
                packet is sent out. This can be used with check_beacon to
                offer link failure capability beyond link status only. Default: 1.
            check_beacon: |-
                - (Optional) Enable beacon probing - this requires that the
                beacon_interval option has been set in the bridge
                options. If this is set to false, only link status is used to check for
                failed NICs.  Default: false.
            failback: |-
                - (Optional) If set to true, the teaming policy will re-activate
                failed interfaces higher in precedence when they come back up.  Default:
                true.
            host_system_id: |-
                - (Required) The managed object ID of
                the host to set the virtual switch up on. Forces a new resource if changed.
            link_discovery_operation: |-
                - (Optional) Whether to advertise or listen
                for link discovery traffic. Default: listen.
            link_discovery_protocol: |-
                - (Optional) The discovery protocol type.  Valid
                types are cpd and lldp. Default: cdp.
            mtu: |-
                - (Optional) The maximum transmission unit (MTU) for the virtual
                switch. Default: 1500.
            name: |-
                - (Required) The name of the virtual switch. Forces a new resource if
                changed.
            network_adapters: '- (Required) The network interfaces to bind to the bridge.'
            notify_switches: |-
                - (Optional) If set to true, the teaming policy will
                notify the broadcast network of a NIC failover, triggering cache updates.
                Default: true.
            number_of_ports: |-
                - (Optional) The number of ports to create with this
                virtual switch. Default: 128.
            shaping_average_bandwidth: |-
                - (Optional) The average bandwidth in bits per
                second if traffic shaping is enabled. Default: 0
            shaping_burst_size: |-
                - (Optional) The maximum burst size allowed in bytes if
                shaping is enabled. Default: 0
            shaping_enabled: |-
                - (Optional) Set to true to enable the traffic shaper for
                ports managed by this virtual switch. Default: false.
            shaping_peak_bandwidth: |-
                - (Optional) The peak bandwidth during bursts in
                bits per second if traffic shaping is enabled. Default: 0
            standby_nics: |-
                - (Optional) The list of standby network adapters used for
                failover.
            teaming_policy: |-
                - (Optional) The network adapter teaming policy. Can be one
                of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, or
                failover_explicit. Default: loadbalance_srcid.
        importStatements: []
    vsphere_license:
        subCategory: Administration
        description: Provides a VMware vSphere license resource. This can be used to add and remove license keys.
        name: vsphere_license
        title: vsphere_license
        examples:
            - name: licenseKey
              manifest: |-
                {
                  "labels": [
                    {
                      "VpxClientLicenseLabel": "Hello World",
                      "Workflow": "Hello World"
                    }
                  ],
                  "license_key": "452CQ-2EK54-K8742-00000-00000"
                }
        argumentDocs:
            edition_key: '- The product edition of the license key.'
            labels: '- (Optional) A map of key/value pairs to be attached as labels (tags) to the license key.'
            license_key: '- (Required) The license key to add.'
            name: '- The display name for the license.'
            total: '- Total number of units (example: CPUs) contained in the license.'
            used: '- The number of units (example: CPUs) assigned to this license.'
        importStatements: []
    vsphere_nas_datastore:
        subCategory: Storage
        description: Provides a vSphere NAS datastore resource. This can be used to mount a NFS share as a datastore on a host.
        name: vsphere_nas_datastore
        title: vsphere_nas_datastore
        argumentDocs:
            access_mode: |-
                - (Optional) Access mode for the mount point. Can be one of
                readOnly or readWrite. Note that readWrite does not necessarily mean
                that the datastore will be read-write depending on the permissions of the
                actual share. Default: readWrite. Forces a new resource if changed.
            accessible: |-
                - The connectivity status of the datastore. If this is false,
                some other computed attributes may be out of date.
            capacity: '- Maximum capacity of the datastore, in megabytes.'
            custom_attributes: |-
                - (Optional) Map of custom attribute ids to attribute
                value strings to set on resource. See here
                for a reference on how to set values for custom attributes.
            datastore_cluster_id: |-
                - (Optional) The managed object
                ID of a datastore cluster to put this datastore in.
                Conflicts with folder.
            folder: |-
                - (Optional) The relative path to a folder to put this datastore in.
                This is a path relative to the datacenter you are deploying the datastore to.
                Example: for the dc1 datacenter, and a provided folder of foo/bar,
                Terraform will place a datastore named terraform-test in a datastore folder
                located at /dc1/datastore/foo/bar, with the final inventory path being
                /dc1/datastore/foo/bar/terraform-test. Conflicts with
                datastore_cluster_id.
            free_space: '- Available space of this datastore, in megabytes.'
            host_system_ids: |-
                - (Required) The managed object IDs of
                the hosts to mount the datastore on.
            id: '- The managed object reference ID of the datastore.'
            maintenance_mode: '- The current maintenance mode state of the datastore.'
            multiple_host_access: |-
                - If true, more than one host in the datacenter has
                been configured with access to the datastore.
            name: |-
                - (Required) The name of the datastore. Forces a new resource if
                changed.
            protocol_endpoint: |-
                - Indicates that this NAS volume is a protocol endpoint.
                This field is only populated if the host supports virtual datastores.
            remote_hosts: |-
                - (Required) The hostnames or IP addresses of the remote
                servers. Only one element should be present for NFS v3 but multiple
                can be present for NFS v4.1. Forces a new resource if changed.
            remote_path: |-
                - (Required) The remote path of the mount point. Forces a new
                resource if changed.
            security_type: |-
                - (Optional) The security type to use when using NFS v4.1.
                Can be one of AUTH_SYS, SEC_KRB5, or SEC_KRB5I. Forces a new resource
                if changed.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
            type: |-
                - (Optional) The type of NAS volume. Can be one of NFS (to denote
                v3) or NFS41 (to denote NFS v4.1). Default: NFS. Forces a new resource if
                changed.
            uncommitted_space: |-
                - Total additional storage space, in megabytes,
                potentially used by all virtual machines on this datastore.
            url: '- The unique locator for the datastore.'
        importStatements: []
    vsphere_offline_software_depot:
        subCategory: Lifecycle
        description: Provides a VMware vSphere offline software depot resource..
        name: vsphere_offline_software_depot
        title: vsphere_offline_software_depot
        argumentDocs:
            component: '- The list of custom components in the depot.'
            display_name: '- The name of the component. Useful for easier identification.'
            key: '- The identifier of the component.'
            location: '- The URL where the depot source is hosted.'
            version: '- The list of available versions of the component.'
        importStatements: []
    vsphere_resource_pool:
        subCategory: Host and Cluster Management
        description: Provides a resource for VMware vSphere resource pools. This can be used to create and manage resource pools.
        name: vsphere_resource_pool
        title: vsphere_resource_pool
        examples:
            - name: resource_pool
              manifest: |-
                {
                  "name": "resource-pool-01",
                  "parent_resource_pool_id": "${data.vsphere_compute_cluster.compute_cluster.resource_pool_id}"
                }
              references:
                parent_resource_pool_id: data.vsphere_compute_cluster.compute_cluster.resource_pool_id
            - name: resource_pool_parent
              manifest: |-
                {
                  "name": "parent",
                  "parent_resource_pool_id": "${data.vsphere_compute_cluster.compute_cluster.resource_pool_id}"
                }
              references:
                parent_resource_pool_id: data.vsphere_compute_cluster.compute_cluster.resource_pool_id
            - name: resource_pool_child
              manifest: |-
                {
                  "name": "child",
                  "parent_resource_pool_id": "${vsphere_resource_pool.resource_pool_parent.id}"
                }
              references:
                parent_resource_pool_id: vsphere_resource_pool.resource_pool_parent.id
        argumentDocs: {}
        importStatements: []
    vsphere_storage_drs_vm_override:
        subCategory: Storage
        description: Provides a VMware vSphere Storage DRS virtual machine override resource. This can be used to override Storage DRS settings in a datastore cluster.
        name: vsphere_storage_drs_vm_override
        title: vsphere_storage_drs_vm_override
        examples:
            - name: drs_vm_override
              manifest: |-
                {
                  "datastore_cluster_id": "${data.vsphere_datastore_cluster.datastore_cluster.id}",
                  "sdrs_enabled": false,
                  "virtual_machine_id": "${vsphere_virtual_machine.vm.id}"
                }
              references:
                datastore_cluster_id: data.vsphere_datastore_cluster.datastore_cluster.id
                virtual_machine_id: vsphere_virtual_machine.vm.id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "datastore_id": "${data.vsphere_datastore.member_datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "otherLinux64Guest",
                      "memory": 1024,
                      "name": "terraform-test",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${data.vsphere_resource_pool.pool.id}"
                    }
        argumentDocs:
            datastore_cluster_id: |-
                - (Required) The managed object reference
                ID of the datastore cluster to put the override in.
                Forces a new resource if changed.
            sdrs_automation_level: |-
                - (Optional) Overrides any Storage DRS automation
                levels for this virtual machine. Can be one of automated or manual. When
                not specified, the datastore cluster's settings are used according to the
                specific SDRS subsystem.
            sdrs_enabled: |-
                - (Optional) Overrides the default Storage DRS setting for
                this virtual machine. When not specified, the datastore cluster setting is
                used.
            sdrs_intra_vm_affinity: |-
                - (Optional) Overrides the intra-VM affinity setting
                for this virtual machine. When true, all disks for this virtual machine
                will be kept on the same datastore. When false, Storage DRS may locate
                individual disks on different datastores if it helps satisfy cluster
                requirements. When not specified, the datastore cluster's settings are used.
            virtual_machine_id: |-
                - (Required) The UUID of the virtual machine to create
                the override for.  Forces a new resource if changed.
        importStatements: []
    vsphere_supervisor:
        subCategory: Workload Management
        description: Provides a VMware vSphere Supervisor resource..
        name: vsphere_supervisor
        title: vsphere_supervisor
        examples:
            - name: supervisor
              manifest: |-
                {
                  "cluster": "\u003ccompute_cluster_id\u003e",
                  "content_library": "\u003ccontent_library_id\u003e",
                  "dvs_uuid": "\u003cdistributed_switch_uuid\u003e",
                  "edge_cluster": "\u003cedge_cluster_id\u003e",
                  "egress_cidr": [
                    {
                      "address": "10.10.11.0",
                      "prefix": 24
                    }
                  ],
                  "ingress_cidr": [
                    {
                      "address": "10.10.10.0",
                      "prefix": 24
                    }
                  ],
                  "main_dns": "10.0.0.250",
                  "management_network": [
                    {
                      "address_count": 5,
                      "gateway": "10.0.0.250",
                      "network": "\u003cportgroup_id\u003e",
                      "starting_address": "10.0.0.150",
                      "subnet_mask": "255.255.255.0"
                    }
                  ],
                  "namespace": [
                    {
                      "content_libraries": [],
                      "name": "custom-namespace",
                      "vm_classes": [
                        "${vsphere_virtual_machine_class.vm_class.id}"
                      ]
                    }
                  ],
                  "pod_cidr": [
                    {
                      "address": "10.244.10.0",
                      "prefix": 23
                    }
                  ],
                  "search_domains": [
                    "vsphere.local"
                  ],
                  "service_cidr": [
                    {
                      "address": "10.10.12.0",
                      "prefix": 24
                    }
                  ],
                  "sizing_hint": "MEDIUM",
                  "storage_policy": "\u003cstorage_policy_name\u003e",
                  "worker_dns": "10.0.0.250"
                }
              dependencies:
                vsphere_virtual_machine_class.vm_class: |-
                    {
                      "cpus": 4,
                      "memory": 4096,
                      "name": "custom-class"
                    }
        argumentDocs:
            address_count: '- Number of addresses to allocate. Starts from starting_address'
            cluster: '- The identifier of the compute cluster.'
            content_libraries: '- The list of content libraries to associate with the namespace'
            content_library: '- The identifier of the subscribed content library.'
            dvs_uuid: '- The UUID of the distributed switch.'
            edge_cluster: '- The identifier of the NSX Edge Cluster.'
            egress_cidr: '- CIDR blocks from which NSX assigns IP addresses used for performing SNAT from container IPs to external IPs.'
            gateway: '- Gateway IP address.'
            ingress_cidr: '- CIDR blocks from which NSX assigns IP addresses for Kubernetes Ingresses and Kubernetes Services of type LoadBalancer.'
            main_dns: '- The list of addresses of the primary DNS servers.'
            management_network: '- The configuration for the management network which the control plane VMs will be connected to.'
            name: '- The name of the namespace'
            namespace: '- The list of namespaces to create in the Supervisor cluster'
            network: '- ID of the network. (e.g. a distributed port group).'
            pod_cidr: '- CIDR blocks from which Kubernetes allocates pod IP addresses. Minimum subnet size is 23.'
            search_domains: '- List of DNS search domains.'
            service_cidr: '- CIDR block from which Kubernetes allocates service cluster IP addresses.'
            sizing_hint: '- The size of the Kubernetes API server.'
            starting_address: '- Starting address of the management network range.'
            storage_policy: '- The name of the storage policy.'
            subnet_mask: '- Subnet mask.'
            vm_classes: '- The list of virtual machine classes to add to the namespace'
            worker_dns: '- The list of addresses of the DNS servers to use for the worker nodes.'
        importStatements: []
    vsphere_tag:
        subCategory: Inventory
        description: Provides a vSphere tag resource. This can be used to manage tags in vSphere.
        name: vsphere_tag
        title: vsphere_tag
        examples:
            - name: tag
              manifest: |-
                {
                  "category_id": "${vsphere_tag_category.category.id}",
                  "description": "Managed by Terraform",
                  "name": "terraform-test-tag"
                }
              dependencies:
                vsphere_tag_category.category: |-
                    {
                      "associable_types": [
                        "VirtualMachine",
                        "Datastore"
                      ],
                      "cardinality": "SINGLE",
                      "description": "Managed by Terraform",
                      "name": "terraform-test-category"
                    }
            - name: tag
              manifest: |-
                {
                  "category_id": "${vsphere_tag_category.category.id}",
                  "description": "Managed by Terraform",
                  "name": "terraform-test-tag"
                }
              dependencies:
                vsphere_tag_category.category: |-
                    {
                      "associable_types": [
                        "VirtualMachine",
                        "Datastore"
                      ],
                      "cardinality": "SINGLE",
                      "description": "Managed by Terraform",
                      "name": "terraform-test-category"
                    }
                vsphere_virtual_machine.web: |-
                    {
                      "tags": [
                        "${vsphere_tag.tag.id}"
                      ]
                    }
        argumentDocs:
            category_id: |-
                - (Required) The unique identifier of the parent category in
                which this tag will be created. Forces a new resource if changed.
            description: '- (Optional) A description for the tag.'
            name: |-
                - (Required) The display name of the tag. The name must be unique
                within its category.
        importStatements: []
    vsphere_tag_category:
        subCategory: Inventory
        description: Provides a vSphere tag category resource. This can be used to manage tag categories in vSphere.
        name: vsphere_tag_category
        title: vsphere_tag_category
        examples:
            - name: category
              manifest: |-
                {
                  "associable_types": [
                    "VirtualMachine",
                    "Datastore"
                  ],
                  "cardinality": "SINGLE",
                  "description": "Managed by Terraform",
                  "name": "terraform-test-category"
                }
        argumentDocs:
            associable_types: |-
                - (Required) A list object types that this category is
                valid to be assigned to. For a full list, click
                here.
            cardinality: |-
                - (Required) The number of tags that can be assigned from this
                category to a single object at once. Can be one of SINGLE (object can only
                be assigned one tag in this category), to MULTIPLE (object can be assigned
                multiple tags in this category). Forces a new resource if changed.
            description: '- (Optional) A description for the category.'
            name: '- (Required) The name of the category.'
        importStatements: []
    vsphere_vapp_container:
        subCategory: Virtual Machine
        description: Provides a VMware vSphere vApp container resource. This can be used to create and manage vApp container.
        name: vsphere_vapp_container
        title: vsphere_vapp_container
        examples:
            - name: vapp_container
              manifest: |-
                {
                  "name": "vapp-01",
                  "parent_resource_pool_id": "${data.vsphere_compute_cluster.compute_cluster.resource_pool_id}"
                }
              references:
                parent_resource_pool_id: data.vsphere_compute_cluster.compute_cluster.resource_pool_id
            - name: vapp_container
              manifest: |-
                {
                  "name": "vapp-01",
                  "parent_resource_pool_id": "${data.vsphere_compute_cluster.compute_cluster.resource_pool_id}"
                }
              references:
                parent_resource_pool_id: data.vsphere_compute_cluster.compute_cluster.resource_pool_id
              dependencies:
                vsphere_virtual_machine.vm: |-
                    {
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 20
                        }
                      ],
                      "guest_id": "ubuntu64Guest",
                      "memory": 1024,
                      "name": "foo",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 1,
                      "resource_pool_id": "${data.vsphere_vapp_container.vapp_container.id}"
                    }
        argumentDocs:
            cpu_expandable: |-
                - (Optional) Determines if the reservation on a vApp
                container can grow beyond the specified value if the parent resource pool has
                unreserved resources. Default: true
            cpu_limit: |-
                - (Optional) The CPU utilization of a vApp container will not
                exceed this limit, even if there are available resources. Set to -1 for
                unlimited.
                Default: -1
            cpu_reservation: |-
                - (Optional) Amount of CPU (MHz) that is guaranteed
                available to the vApp container. Default: 0
            cpu_share_level: |-
                - (Optional) The CPU allocation level. The level is a
                simplified view of shares. Levels map to a pre-determined set of numeric
                values for shares. Can be one of low, normal, high, or custom. When
                low, normal, or high are specified values in cpu_shares will be
                ignored.  Default: normal
            cpu_shares: |-
                - (Optional) The number of shares allocated for CPU. Used to
                determine resource allocation in case of resource contention. If this is set,
                cpu_share_level must be custom.
            memory_expandable: |-
                - (Optional) Determines if the reservation on a vApp
                container can grow beyond the specified value if the parent resource pool has
                unreserved resources. Default: true
            memory_limit: |-
                - (Optional) The CPU utilization of a vApp container will not
                exceed this limit, even if there are available resources. Set to -1 for
                unlimited. Default: -1
            memory_reservation: |-
                - (Optional) Amount of CPU (MHz) that is guaranteed
                available to the vApp container. Default: 0
            memory_share_level: |-
                - (Optional) The CPU allocation level. The level is a
                simplified view of shares. Levels map to a pre-determined set of numeric
                values for shares. Can be one of low, normal, high, or custom. When
                low, normal, or high are specified values in memory_shares will be
                ignored.  Default: normal
            memory_shares: |-
                - (Optional) The number of shares allocated for CPU. Used to
                determine resource allocation in case of resource contention. If this is set,
                memory_share_level must be custom.
            name: '- (Required) The name of the vApp container.'
            parent_folder_id: |-
                - (Optional) The managed object ID of
                the vApp container's parent folder.
            parent_resource_pool_id: |-
                - (Required) The managed object ID
                of the parent resource pool. This can be the root resource pool for a cluster
                or standalone host, or a resource pool itself. When moving a vApp container
                from one parent resource pool to another, both must share a common root
                resource pool or the move will fail.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
        importStatements: []
    vsphere_vapp_entity:
        subCategory: Virtual Machine
        description: Provides a vSphere vApp entity resource. This can be used to describe the behavior of an entity (virtual machine or sub-vApp container) in a vApp container.
        name: vsphere_vapp_entity
        title: vsphere_vapp_entity
        examples:
            - name: vapp_entity
              manifest: |-
                {
                  "container_id": "${vsphere_vapp_container.vapp_container.id}",
                  "start_action": "none",
                  "target_id": "${vsphere_virtual_machine.vm.moid}"
                }
              references:
                container_id: vsphere_vapp_container.vapp_container.id
                target_id: vsphere_virtual_machine.vm.moid
              dependencies:
                vsphere_vapp_container.vapp_container: |-
                    {
                      "name": "terraform-vapp-container-test",
                      "parent_resource_pool_id": "${data.vsphere_compute_cluster.compute_cluster.id}"
                    }
                vsphere_virtual_machine.vm: |-
                    {
                      "datastore_id": "${data.vsphere_datastore.datastore.id}",
                      "disk": [
                        {
                          "label": "disk0",
                          "size": 1
                        }
                      ],
                      "guest_id": "ubuntu64Guest",
                      "memory": 1024,
                      "name": "terraform-virtual-machine-test",
                      "network_interface": [
                        {
                          "network_id": "${data.vsphere_network.network.id}"
                        }
                      ],
                      "num_cpus": 2,
                      "resource_pool_id": "${vsphere_vapp_container.vapp_container.id}"
                    }
        argumentDocs:
            container_id: |-
                - (Required) [Managed object ID|docs-about-morefs] of the vApp
                container the entity is a member of.
            start_action: |-
                - (Optional) How to start the entity. Valid settings are none
                or powerOn. If set to none, then the entity does not participate in auto-start.
                Default: powerOn
            start_delay: |-
                - (Optional) Delay in seconds before continuing with the next
                entity in the order of entities to be started. Default: 120
            start_order: '- (Optional) Order to start and stop target in vApp. Default: 1'
            stop_action: |-
                - (Optional) Defines the stop action for the entity. Can be set
                to none, powerOff, guestShutdown, or suspend. If set to none, then the entity
                does not participate in auto-stop. Default: powerOff
            stop_delay: |-
                - (Optional) Delay in seconds before continuing with the next
                entity in the order sequence. This is only used if the stopAction is
                guestShutdown. Default: 120
            target_id: |-
                - (Required) [Managed object ID|docs-about-morefs] of the entity
                to power on or power off. This can be a virtual machine or a vApp.
            wait_for_guest: |-
                - (Optional) Determines if the VM should be marked as being
                started when VMware Tools are ready instead of waiting for start_delay. This
                property has no effect for vApps. Default: false
        importStatements: []
    vsphere_virtual_disk:
        subCategory: Virtual Machine
        description: Provides a vSphere virtual disk resource.  This can be used to create and delete virtual disks.
        name: vsphere_virtual_disk
        title: vsphere_virtual_disk
        examples:
            - name: virtual_disk
              manifest: |-
                {
                  "create_directories": true,
                  "datacenter": "${data.vsphere_datacenter.datacenter.name}",
                  "datastore": "${data.vsphere_datastore.datastore.name}",
                  "size": 40,
                  "type": "thin",
                  "vmdk_path": "/foo/foo.vmdk"
                }
              references:
                datacenter: data.vsphere_datacenter.datacenter.name
                datastore: data.vsphere_datastore.datastore.name
        argumentDocs:
            adapter_type: |-
                - (Optional) The adapter type for this virtual disk. Can be
                one of ide, lsiLogic, or busLogic.  Default: lsiLogic.
            create_directories: |-
                - (Optional) Tells the resource to create any
                directories that are a part of the vmdk_path parameter if they are missing.
                Default: false.
            datacenter: |-
                - (Optional) The name of the datacenter in which to create the
                disk. Can be omitted when ESXi or if there is only one datacenter in
                your infrastructure.
            datastore: |-
                - (Required) The name of the datastore in which to create the
                disk.
            size: |-
                - (Required) Size of the disk (in GB). Decreasing the size of a disk is not possible.
                If a disk of a smaller size is required then the original has to be destroyed along with its data and a new one has to be
                created.
            type: |-
                - (Optional) The type of disk to create. Can be one of
                eagerZeroedThick, lazy, or thin. Default: eagerZeroedThick. For
                information on what each kind of disk provisioning policy means, click
                here.
            vmdk_path: |-
                - (Required) The path, including filename, of the virtual disk to
                be created.  This needs to end in .vmdk.
        importStatements: []
    vsphere_virtual_machine:
        subCategory: Virtual Machine
        description: Provides a resource for VMware vSphere virtual machines. This resource can be used to create, modify, and delete virtual machines.
        name: vsphere_virtual_machine
        title: vsphere_virtual_machine
        examples:
            - name: vm
              manifest: |-
                {
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "disk": [
                    {
                      "label": "Hard Disk 1",
                      "size": 20
                    }
                  ],
                  "guest_id": "otherLinux64Guest",
                  "memory": 1024,
                  "name": "foo",
                  "network_interface": [
                    {
                      "network_id": "${data.vsphere_network.network.id}"
                    }
                  ],
                  "num_cpus": 1,
                  "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                }
              references:
                datastore_id: data.vsphere_datastore.datastore.id
                network_interface.network_id: data.vsphere_network.network.id
                resource_pool_id: data.vsphere_compute_cluster.cluster.resource_pool_id
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "linux_options": [
                            {
                              "domain": "example.com",
                              "host_name": "foo"
                            }
                          ]
                        }
                      ],
                      "template_uuid": "${data.vsphere_virtual_machine.template.id}"
                    }
                  ],
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "disk": [
                    {
                      "label": "Hard Disk 1",
                      "size": "${data.vsphere_virtual_machine.template.disks.0.size}",
                      "thin_provisioned": "${data.vsphere_virtual_machine.template.disks.0.thin_provisioned}"
                    }
                  ],
                  "guest_id": "${data.vsphere_virtual_machine.template.guest_id}",
                  "memory": 1024,
                  "name": "foo",
                  "network_interface": [
                    {
                      "adapter_type": "${data.vsphere_virtual_machine.template.network_interface_types[0]}",
                      "network_id": "${data.vsphere_network.network.id}"
                    }
                  ],
                  "num_cpus": 1,
                  "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}",
                  "scsi_type": "${data.vsphere_virtual_machine.template.scsi_type}"
                }
              references:
                clone.template_uuid: data.vsphere_virtual_machine.template.id
                datastore_id: data.vsphere_datastore.datastore.id
                disk.size: data.vsphere_virtual_machine.template.disks.0.size
                disk.thin_provisioned: data.vsphere_virtual_machine.template.disks.0.thin_provisioned
                guest_id: data.vsphere_virtual_machine.template.guest_id
                network_interface.adapter_type: data.vsphere_virtual_machine.template.network_interface_types[0]
                network_interface.network_id: data.vsphere_network.network.id
                resource_pool_id: data.vsphere_compute_cluster.cluster.resource_pool_id
                scsi_type: data.vsphere_virtual_machine.template.scsi_type
            - name: vm
              manifest: |-
                {
                  "customization_spec": [
                    {
                      "id": "${data.vsphere_guest_os_customization.linux.id}"
                    }
                  ],
                  "template_uuid": "${data.vsphere_virtual_machine.template.id}"
                }
              references:
                customization_spec.id: data.vsphere_guest_os_customization.linux.id
                template_uuid: data.vsphere_virtual_machine.template.id
            - name: vmFromRemoteOvf
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "name": "remote-foo",
                  "ovf_deploy": [
                    {
                      "allow_unverified_ssl_cert": false,
                      "disk_provisioning": "thin",
                      "ip_allocation_policy": "STATIC_MANUAL",
                      "ip_protocol": "IPV4",
                      "ovf_network_map": {
                        "Network 1": "${data.vsphere_network.network.id}",
                        "Network 2": "${data.vsphere_network.network.id}"
                      },
                      "remote_ovf_url": "https://example.com/foo.ova"
                    }
                  ],
                  "resource_pool_id": "${data.vsphere_resource_pool.default.id}",
                  "vapp": [
                    {
                      "properties": {
                        "guestinfo.dns": "172.16.11.4",
                        "guestinfo.domain": "example.com",
                        "guestinfo.gateway": "172.16.11.1",
                        "guestinfo.hostname": "remote-foo.example.com",
                        "guestinfo.ipaddress": "172.16.11.101",
                        "guestinfo.netmask": "255.255.255.0",
                        "guestinfo.ntp": "ntp.example.com",
                        "guestinfo.password": "VMware1!",
                        "guestinfo.ssh": "True"
                      }
                    }
                  ],
                  "wait_for_guest_ip_timeout": 0,
                  "wait_for_guest_net_timeout": 0
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
                datastore_id: data.vsphere_datastore.datastore.id
                host_system_id: data.vsphere_host.host.id
                resource_pool_id: data.vsphere_resource_pool.default.id
            - name: vmFromLocalOvf
              manifest: |-
                {
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "name": "local-foo",
                  "ovf_deploy": [
                    {
                      "allow_unverified_ssl_cert": false,
                      "disk_provisioning": "thin",
                      "ip_allocation_policy": "STATIC_MANUAL",
                      "ip_protocol": "IPV4",
                      "local_ovf_path": "/Volume/Storage/OVAs/foo.ova",
                      "ovf_network_map": {
                        "Network 1": "${data.vsphere_network.network.id}",
                        "Network 2": "${data.vsphere_network.network.id}"
                      }
                    }
                  ],
                  "resource_pool_id": "${data.vsphere_resource_pool.default.id}",
                  "vapp": [
                    {
                      "properties": {
                        "guestinfo.dns": "172.16.11.4",
                        "guestinfo.domain": "example.com",
                        "guestinfo.gateway": "172.16.11.1",
                        "guestinfo.hostname": "local-foo.example.com",
                        "guestinfo.ipaddress": "172.16.11.101",
                        "guestinfo.netmask": "255.255.255.0",
                        "guestinfo.ntp": "ntp.example.com",
                        "guestinfo.password": "VMware1!",
                        "guestinfo.ssh": "True"
                      }
                    }
                  ],
                  "wait_for_guest_ip_timeout": 0,
                  "wait_for_guest_net_timeout": 0
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
                datastore_id: data.vsphere_datastore.datastore.id
                host_system_id: data.vsphere_host.host.id
                resource_pool_id: data.vsphere_resource_pool.default.id
            - name: vmFromRemoteOvf
              manifest: |-
                {
                  "cdrom": [
                    {
                      "client_device": true
                    }
                  ],
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "dynamic": {
                    "network_interface": [
                      {
                        "content": [
                          {
                            "network_id": "${network_interface.value}"
                          }
                        ],
                        "for_each": "${data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map}"
                      }
                    ]
                  },
                  "firmware": "${data.vsphere_ovf_vm_template.ovfRemote.firmware}",
                  "guest_id": "${data.vsphere_ovf_vm_template.ovfRemote.guest_id}",
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${vapp[0].properties}"
                      ]
                    }
                  ],
                  "memory": "${data.vsphere_ovf_vm_template.ovfRemote.memory}",
                  "name": "ubuntu-server-cloud-image-01",
                  "num_cores_per_socket": "${data.vsphere_ovf_vm_template.ovfRemote.num_cores_per_socket}",
                  "num_cpus": "${data.vsphere_ovf_vm_template.ovfRemote.num_cpus}",
                  "ovf_deploy": [
                    {
                      "allow_unverified_ssl_cert": false,
                      "disk_provisioning": "${data.vsphere_ovf_vm_template.ovfRemote.disk_provisioning}",
                      "ovf_network_map": "${data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map}",
                      "remote_ovf_url": "${data.vsphere_ovf_vm_template.ovfRemote.remote_ovf_url}"
                    },
                    {
                      "ovf_network_map": "${data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map}",
                      "remote_ovf_url": "https://cloud-images.ubuntu.com/releases/xx.xx/release/ubuntu-xx.xx-server-cloudimg-amd64.ova"
                    }
                  ],
                  "resource_pool_id": "${data.vsphere_resource_pool.default.id}",
                  "scsi_type": "${data.vsphere_ovf_vm_template.ovfRemote.scsi_type}",
                  "vapp": [
                    {
                      "properties": {
                        "hostname": "${var.remote_ovf_name}",
                        "instance-id": "${var.remote_ovf_uuid}",
                        "password": "${var.remote_ovf_password}",
                        "public-keys": "${var.remote_ovf_public_keys}",
                        "user-data": "${base64encode(var.remote_ovf_user_data)}"
                      }
                    }
                  ],
                  "wait_for_guest_ip_timeout": 0,
                  "wait_for_guest_net_timeout": 0
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
                datastore_id: data.vsphere_datastore.datastore.id
                dynamic.content.network_id: network_interface.value
                dynamic.for_each: data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
                firmware: data.vsphere_ovf_vm_template.ovfRemote.firmware
                guest_id: data.vsphere_ovf_vm_template.ovfRemote.guest_id
                host_system_id: data.vsphere_host.host.id
                memory: data.vsphere_ovf_vm_template.ovfRemote.memory
                num_cores_per_socket: data.vsphere_ovf_vm_template.ovfRemote.num_cores_per_socket
                num_cpus: data.vsphere_ovf_vm_template.ovfRemote.num_cpus
                ovf_deploy.disk_provisioning: data.vsphere_ovf_vm_template.ovfRemote.disk_provisioning
                ovf_deploy.ovf_network_map: data.vsphere_ovf_vm_template.ovfRemote.ovf_network_map
                ovf_deploy.remote_ovf_url: data.vsphere_ovf_vm_template.ovfRemote.remote_ovf_url
                resource_pool_id: data.vsphere_resource_pool.default.id
                scsi_type: data.vsphere_ovf_vm_template.ovfRemote.scsi_type
            - name: vmFromLocalOvf
              manifest: |-
                {
                  "cdrom": [
                    {
                      "client_device": true
                    }
                  ],
                  "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "dynamic": {
                    "network_interface": [
                      {
                        "content": [
                          {
                            "network_id": "${network_interface.value}"
                          }
                        ],
                        "for_each": "${data.vsphere_ovf_vm_template.ovfLocal.ovf_network_map}"
                      }
                    ]
                  },
                  "firmware": "${data.vsphere_ovf_vm_template.ovfLocal.firmware}",
                  "guest_id": "${data.vsphere_ovf_vm_template.ovfLocal.guest_id}",
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${vapp[0].properties}"
                      ]
                    }
                  ],
                  "memory": "${data.vsphere_ovf_vm_template.ovfLocal.memory}",
                  "name": "ubuntu-server-cloud-image-02",
                  "num_cores_per_socket": "${data.vsphere_ovf_vm_template.ovfLocal.num_cores_per_socket}",
                  "num_cpus": "${data.vsphere_ovf_vm_template.ovfLocal.num_cpus}",
                  "ovf_deploy": [
                    {
                      "allow_unverified_ssl_cert": false,
                      "disk_provisioning": "${data.vsphere_ovf_vm_template.ovfLocal.disk_provisioning}",
                      "local_ovf_path": "${data.vsphere_ovf_vm_template.ovfLocal.local_ovf_path}",
                      "ovf_network_map": "${data.vsphere_ovf_vm_template.ovfLocal.ovf_network_map}"
                    }
                  ],
                  "resource_pool_id": "${data.vsphere_resource_pool.default.id}",
                  "scsi_type": "${data.vsphere_ovf_vm_template.ovfLocal.scsi_type}",
                  "vapp": [
                    {
                      "properties": {
                        "hostname": "${var.local_ovf_name}",
                        "instance-id": "${var.local_ovf_uuid}",
                        "password": "${var.local_ovf_password}",
                        "public-keys": "${var.local_ovf_public_keys}",
                        "user-data": "${base64encode(var.local_ovf_user_data)}"
                      }
                    }
                  ],
                  "wait_for_guest_ip_timeout": 0,
                  "wait_for_guest_net_timeout": 0
                }
              references:
                datacenter_id: data.vsphere_datacenter.datacenter.id
                datastore_id: data.vsphere_datastore.datastore.id
                dynamic.content.network_id: network_interface.value
                dynamic.for_each: data.vsphere_ovf_vm_template.ovfLocal.ovf_network_map
                firmware: data.vsphere_ovf_vm_template.ovfLocal.firmware
                guest_id: data.vsphere_ovf_vm_template.ovfLocal.guest_id
                host_system_id: data.vsphere_host.host.id
                memory: data.vsphere_ovf_vm_template.ovfLocal.memory
                num_cores_per_socket: data.vsphere_ovf_vm_template.ovfLocal.num_cores_per_socket
                num_cpus: data.vsphere_ovf_vm_template.ovfLocal.num_cpus
                ovf_deploy.disk_provisioning: data.vsphere_ovf_vm_template.ovfLocal.disk_provisioning
                ovf_deploy.local_ovf_path: data.vsphere_ovf_vm_template.ovfLocal.local_ovf_path
                ovf_deploy.ovf_network_map: data.vsphere_ovf_vm_template.ovfLocal.ovf_network_map
                resource_pool_id: data.vsphere_resource_pool.default.id
                scsi_type: data.vsphere_ovf_vm_template.ovfLocal.scsi_type
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "template_uuid": "${data.vsphere_virtual_machine.template_from_ovf.id}"
                    }
                  ],
                  "datastore_id": "${data.vsphere_datastore.datastore.id}",
                  "disk": [
                    {
                      "name": "Hard Disk 1",
                      "size": "${data.vsphere_virtual_machine.template_from_ovf.disks.0.size}",
                      "thin_provisioned": "${data.vsphere_virtual_machine.template_from_ovf.disks.0.thin_provisioned}"
                    }
                  ],
                  "guest_id": "${data.vsphere_virtual_machine.template.guest_id}",
                  "memory": 1024,
                  "name": "foo",
                  "network_interface": [
                    {
                      "adapter_type": "${data.vsphere_virtual_machine.template.network_interface_types[0]}",
                      "network_id": "${data.vsphere_network.network.id}"
                    }
                  ],
                  "num_cpus": 2,
                  "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}",
                  "scsi_type": "${data.vsphere_virtual_machine.template.scsi_type}",
                  "vapp": [
                    {
                      "properties": {
                        "guestinfo.dns": "172.16.11.4",
                        "guestinfo.domain": "example.com",
                        "guestinfo.gateway": "172.16.11.1",
                        "guestinfo.hostname": "foo.example.com",
                        "guestinfo.ipaddress": "172.16.11.101",
                        "guestinfo.netmask": "255.255.255.0",
                        "guestinfo.ntp": "ntp.example.com",
                        "guestinfo.password": "VMware1!",
                        "guestinfo.ssh": "True"
                      }
                    }
                  ]
                }
              references:
                clone.template_uuid: data.vsphere_virtual_machine.template_from_ovf.id
                datastore_id: data.vsphere_datastore.datastore.id
                disk.size: data.vsphere_virtual_machine.template_from_ovf.disks.0.size
                disk.thin_provisioned: data.vsphere_virtual_machine.template_from_ovf.disks.0.thin_provisioned
                guest_id: data.vsphere_virtual_machine.template.guest_id
                network_interface.adapter_type: data.vsphere_virtual_machine.template.network_interface_types[0]
                network_interface.network_id: data.vsphere_network.network.id
                resource_pool_id: data.vsphere_compute_cluster.cluster.resource_pool_id
                scsi_type: data.vsphere_virtual_machine.template.scsi_type
            - name: vm
              manifest: |-
                {
                  "datastore_cluster_id": "${data.vsphere_datastore_cluster.datastore_cluster.id}",
                  "disk": [
                    {
                      "label": "Hard Disk 1",
                      "size": 20
                    }
                  ],
                  "guest_id": "otherLinux64Guest",
                  "memory": 1024,
                  "name": "foo",
                  "network_interface": [
                    {
                      "network_id": "${data.vsphere_network.network.id}"
                    }
                  ],
                  "num_cpus": 1,
                  "resource_pool_id": "${data.vsphere_compute_cluster.cluster.resource_pool_id}"
                }
              references:
                datastore_cluster_id: data.vsphere_datastore_cluster.datastore_cluster.id
                network_interface.network_id: data.vsphere_network.network.id
                resource_pool_id: data.vsphere_compute_cluster.cluster.resource_pool_id
            - name: vm
              manifest: |-
                {
                  "disk": [
                    {
                      "label": "Hard Disk 1",
                      "size": "10"
                    },
                    {
                      "label": "Hard Disk 2",
                      "size": "100",
                      "unit_number": 1
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "network_interface": [
                    {
                      "network_id": "${data.vsphere_network.routable.id}"
                    },
                    {
                      "network_id": "${data.vsphere_network.non_routable.id}"
                    }
                  ]
                }
              references:
                network_interface.network_id: data.vsphere_network.non_routable.id
            - name: vm
              manifest: |-
                {
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "memory": "${var.memory}",
                  "memory_reservation": "${var.memory}",
                  "network_interface": [
                    {
                      "adapter_type": "sriov",
                      "network_id": "${data.vsphere_network.network.id}",
                      "physical_function": "0000:3b:00.1"
                    }
                  ]
                }
              references:
                host_system_id: data.vsphere_host.host.id
                memory: var.memory
                memory_reservation: var.memory
                network_interface.network_id: data.vsphere_network.network.id
            - name: vm
              manifest: |-
                {
                  "cdrom": [
                    {
                      "datastore_id": "${data.vsphere_datastore.iso_datastore.id}",
                      "path": "/Volume/Storage/ISO/foo.iso"
                    }
                  ]
                }
              references:
                cdrom.datastore_id: data.vsphere_datastore.iso_datastore.id
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "ipv4_gateway": "10.0.0.1",
                          "network_interface": [
                            {
                              "ipv4_address": "10.0.0.10",
                              "ipv4_netmask": 24
                            },
                            {
                              "ipv4_address": "172.16.0.10",
                              "ipv4_netmask": 24
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "network_interface": [
                    {
                      "network_id": "${data.vsphere_network.public.id}"
                    },
                    {
                      "network_id": "${data.vsphere_network.private.id}"
                    }
                  ]
                }
              references:
                network_interface.network_id: data.vsphere_network.private.id
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "network_interface": [
                            {},
                            {}
                          ]
                        }
                      ]
                    }
                  ],
                  "network_interface": [
                    {
                      "network_id": "${data.vsphere_network.public.id}"
                    },
                    {
                      "network_id": "${data.vsphere_network.private.id}"
                    }
                  ]
                }
              references:
                network_interface.network_id: data.vsphere_network.private.id
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "linux_options": [
                            {
                              "domain": "example.com",
                              "host_name": "foo"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "windows_options": [
                            {
                              "admin_password": "VMware1!",
                              "computer_name": "foo",
                              "workgroup": "BAR"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "windows_options": [
                            {
                              "domain_ou": "OU=bar,OU=foo,DC=example,DC=com"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "customize": [
                        {
                          "windows_sysprep_text": "${file(\"${path.module}/sysprep.xml\")}"
                        }
                      ]
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "cdrom": [
                    {
                      "client_device": true
                    }
                  ],
                  "clone": [
                    {
                      "template_uuid": "${data.vsphere_virtual_machine.template_from_ovf.id}"
                    }
                  ],
                  "vapp": [
                    {
                      "properties": {
                        "guestinfo.terraform.id": "foo"
                      }
                    }
                  ]
                }
              references:
                clone.template_uuid: data.vsphere_virtual_machine.template_from_ovf.id
            - name: vm
              manifest: |-
                {
                  "clone": [
                    {
                      "template_uuid": "${data.vsphere_virtual_machine.template_from_ovf.id}"
                    }
                  ],
                  "vapp": [
                    {
                      "properties": {
                        "guestinfo.terraform.id": "foo"
                      }
                    }
                  ]
                }
              references:
                clone.template_uuid: data.vsphere_virtual_machine.template_from_ovf.id
            - name: vm
              manifest: |-
                {
                  "vapp": [
                    {
                      "properties": {
                        "ssh_enabled": "${var.ssh_enabled}"
                      }
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "vtpm": [
                    {
                      "version": "2.0"
                    }
                  ]
                }
            - name: vm
              manifest: |-
                {
                  "datastore_id": "${data.vsphere_datastore.vm_datastore.id}",
                  "disk": [
                    {
                      "label": "Hard Disk 1",
                      "size": 10
                    },
                    {
                      "datastore_id": "${data.vsphere_datastore.pinned_datastore.id}",
                      "label": "Hard Disk 2",
                      "size": 100,
                      "unit_number": 1
                    }
                  ]
                }
              references:
                datastore_id: data.vsphere_datastore.vm_datastore.id
                disk.datastore_id: data.vsphere_datastore.pinned_datastore.id
        argumentDocs:
            "0": . If no storage controllers are discovered, the virtual machine is not eligible for import. For maximum compatibility, ensure that the virtual machine has the exact number of storage controllers needed and set the storage controller count accordingly.
            "1": SCSI controller, and all disks in the template should reside on the single, primary controller.
            Hard Disk: ', starting with disk number 0, based on each virtual disk order on the SCSI bus. As an example, a disk on SCSI controller 0 with a unit number of 0 would be labeled as Hard Disk 0, a disk on the same controller with a unit number of 1 would be Hard Disk 1, but the next disk, which is on SCSI controller 1 with a unit number of 0, still becomes Hard Disk 2.'
            alternate_guest_name: '- (Optional) The guest name for the operating system when guest_id is otherGuest or otherGuest64.'
            annotation: '- (Optional) A user-provided description of the virtual machine.'
            bandwidth_*: options on the network interface are not permitted.
            boot_delay: '- (Optional) The number of milliseconds to wait before starting the boot sequence. The default is no delay.'
            boot_retry_delay: '- (Optional) The number of milliseconds to wait before retrying the boot sequence. This option is only valid if boot_retry_enabled is true. Default: 10000 (10 seconds).'
            boot_retry_enabled: '- (Optional) If set to true, a virtual machine that fails to boot will try again after the delay defined in boot_retry_delay. Default: false.'
            cdrom: '- (Optional) A specification for a CD-ROM device on the virtual machine. See CD-ROM options for more information.'
            cdrom.client_device: '- (Optional) Indicates whether the device should be backed by remote client device. Conflicts with datastore_id and path.'
            cdrom.datastore_id: '- (Optional) The datastore ID that on which the ISO is located. Required for using a datastore ISO. Conflicts with client_device.'
            cdrom.path: '- (Optional) The path to the ISO file. Required for using a datastore ISO. Conflicts with client_device.'
            change_version: '- A unique identifier for a given version of the last configuration was applied.'
            clone: '- (Optional) When specified, the virtual machine will be created as a clone of a specified template. Optional customization options can be submitted for the resource. See creating a virtual machine from a template for more information.'
            clone.customize: '- (Optional) The customization spec for this clone. This allows the user to configure the virtual machine post-clone. For more details, see virtual machine customizations.'
            clone.linked_clone: '- (Optional) Clone the virtual machine from a snapshot or a template. Default: false.'
            clone.template_uuid: '- (Required) The UUID of the source virtual machine or template.'
            clone.timeout: '- (Optional) The timeout, in minutes, to wait for the cloning process to complete. Default: 30 minutes.'
            cpu_hot_add_enabled: '- (Optional) Allow CPUs to be added to the virtual machine while it is powered on.'
            cpu_hot_remove_enabled: '- (Optional) Allow CPUs to be removed to the virtual machine while it is powered on.'
            cpu_limit: '- (Optional) The maximum amount of CPU (in MHz) that the virtual machine can consume, regardless of available resources. The default is no limit.'
            cpu_performance_counters_enabled: '- (Optional) Enable CPU performance counters on the virtual machine. Default: false.'
            cpu_reservation: '- (Optional) The amount of CPU (in MHz) that the virtual machine is guaranteed. The default is no reservation.'
            cpu_share_count: '- (Optional) The number of CPU shares allocated to the virtual machine when the cpu_share_level is custom.'
            cpu_share_level: '- (Optional) The allocation level for the virtual machine CPU resources. One of high, low, normal, or custom. Default: custom.'
            custom_attributes: '- (Optional) Map of custom attribute ids to attribute value strings to set for virtual machine. Please refer to the vsphere_custom_attributes resource for more information on setting custom attributes.'
            datacenter_id: '- (Optional) The datacenter ID. Required only when deploying an OVF/OVA template.'
            datastore_cluster_id: '- (Optional) The managed object reference ID of the datastore cluster in which to place the virtual machine. This setting applies to entire virtual machine and implies that you wish to use vSphere Storage DRS with the virtual machine. See the section on virtual machine migration for more information on modifying this value.'
            datastore_id: '- (Optional) The managed object reference ID of the datastore in which to place the virtual machine. The virtual machine configuration files is placed here, along with any virtual disks that are created where a datastore is not explicitly specified. See the section on virtual machine migration for more information on modifying this value.'
            default_ip_address: '- The IP address selected by Terraform to be used with any [provisioners][tf-docs-provisioners] configured on this resource. When possible, this is the first IPv4 address that is reachable through the default gateway configured on the machine, then the first reachable IPv6 address, and then the first general discovered address if neither exists. If  VMware Tools is not running on the virtual machine, or if the virtual machine is powered off, this value will be blank.'
            device_address: '- An address internal to Terraform that helps locate the device when key is unavailable. This follows a convention of CONTROLLER_TYPE:BUS_NUMBER:UNIT_NUMBER. Example: scsi:0:1 means device unit 1 on SCSI bus 0.'
            disk: '- (Required) A specification for a virtual disk device on the virtual machine. See disk options for more information.'
            disk.attach: '- (Optional) Attach an external disk instead of creating a new one. Implies and conflicts with keep_on_remove. If set, you cannot set size, eagerly_scrub, or thin_provisioned. Must set path if used.'
            disk.controller_type: '- (Optional) The type of storage controller to attach the  disk to. Can be scsi, sata, or ide. You must have the appropriate number of controllers enabled for the selected type. Default scsi.'
            disk.datastore_id: '- (Optional) The managed object reference ID for the datastore on which the virtual disk is placed. The default is to use the datastore of the virtual machine. See the section on virtual machine migration for information on modifying this value.'
            disk.disk_mode: '- (Optional) The mode of this this virtual disk for purposes of writes and snapshots. One of append, independent_nonpersistent, independent_persistent, nonpersistent, persistent, or undoable. Default: persistent. For more information on these option, please refer to the product documentation.'
            disk.disk_sharing: '- (Optional) The sharing mode of this virtual disk. One of sharingMultiWriter or sharingNone. Default: sharingNone.'
            disk.eagerly_scrub: '- (Optional) If set to true, the disk space is zeroed out when the virtual machine is created. This will delay the creation of the virtual disk. Cannot be set to true when thin_provisioned is true.  See the section on picking a disk type for more information.  Default: false.'
            disk.io_limit: '- (Optional) The upper limit of IOPS that this disk can use. The default is no limit.'
            disk.io_reservation: '- (Optional) The I/O reservation (guarantee) for the virtual disk has, in IOPS.  The default is no reservation.'
            disk.io_share_count: '- (Optional) The share count for the virtual disk when the share level is custom.'
            disk.io_share_level: '- (Optional) The share allocation level for the virtual disk. One of low, normal, high, or custom. Default: normal.'
            disk.keep_on_remove: '- (Optional) Keep this disk when removing the device or destroying the virtual machine. Default: false.'
            disk.label: '- (Required) A label for the virtual disk. Forces a new disk, if changed.'
            disk.path: '- (Optional) When using attach, this parameter controls the path of a virtual disk to attach externally. Otherwise, it is a computed attribute that contains the virtual disk filename.'
            disk.size: '- (Required) The size of the disk, in GB. Must be a whole number.'
            disk.storage_policy_id: '- (Optional) The UUID of the storage policy to assign to the virtual disk.'
            disk.thin_provisioned: '- (Optional) If true, the disk is thin provisioned, with space for the file being allocated on an as-needed basis. Cannot be set to true when eagerly_scrub is true. See the section on selecting a disk type for more information. Default: true.'
            disk.unit_number: '- (Optional) The disk number on the storage bus. The maximum value for this setting is the value of the controller count times the controller capacity (15 for SCSI, 30 for SATA, and 2 for IDE). Duplicate unit numbers are not allowed. Default 0, for which one disk must be set to.'
            disk.write_through: '- (Optional) If true, writes for this disk are sent directly to the filesystem immediately instead of being buffered. Default: false.'
            dns_server_list: '- The list of DNS servers to configure on the virtual machine.'
            dns_suffix_list: '- A list of DNS search domains to add to the DNS configuration on the virtual machine.'
            eagerly_scrub: and thin_provisioned should be set to false.
            efi_secure_boot_enabled: '- (Optional) Use this option to enable EFI secure boot when the firmware type is set to is efi. Default: false.'
            enable_disk_uuid: '- (Optional) Expose the UUIDs of attached virtual disks to the virtual machine, allowing access to them in the guest. Default: false.'
            enable_logging: '- (Optional) Enable logging of virtual machine events to a log file stored in the virtual machine directory. Default: false.'
            ept_rvi_mode: '- (Optional) The EPT/RVI (hardware memory virtualization) setting for the virtual machine. One of automatic, on, or off. Default: automatic.'
            extra_config: '- (Optional) Extra configuration data for the virtual machine. Can be used to supply advanced parameters not normally in configuration, such as instance metadata and userdata.'
            extra_config.firmware: '- (Optional) The firmware for the virtual machine. One of bios or efi.'
            extra_config.folder: '- (Optional) The path to the virtual machine folder in which to place the virtual machine, relative to the datacenter path (/<datacenter-name>/vm).  For example, /dc-01/vm/foo'
            extra_config.guest_id: '- (Optional) The guest ID for the operating system type. Default: otherGuest64.'
            extra_config.hardware_version: '- (Optional) The hardware version number. Valid range is from 4 to 21. The hardware version cannot be downgraded. See virtual machine hardware versions and compatibility for more information on supported settings.'
            extra_config.host_system_id: '- (Optional) The managed object reference ID of a host on which to place the virtual machine. See the section on virtual machine migration for more information on modifying this value. When using a vSphere cluster, if a host_system_id is not supplied, vSphere will select a host in the cluster to place the virtual machine, according to any defaults or vSphere DRS placement policies.'
            extra_config.name: '- (Required) The name of the virtual machine.'
            extra_config.network_interface: '- (Required) A specification for a virtual NIC on the virtual machine. See network interface options for more information.'
            extra_config.ovf_deploy: '- (Optional) When specified, the virtual machine will be deployed from the provided OVF/OVA template. See creating a virtual machine from an OVF/OVA template for more information.'
            extra_config.pci_device_id: '- (Optional) List of host PCI device IDs in which to create PCI passthroughs.'
            extra_config.replace_trigger: '- (Optional) Triggers replacement of resource whenever it changes.'
            extra_config.resource_pool_id: '- (Required) The managed object reference ID of the resource pool in which to place the virtual machine. See the Virtual Machine Migration section for more information on modifying this value.'
            extra_config.scsi_bus_sharing: '- (Optional) The type of SCSI bus sharing for the virtual machine SCSI controller. One of physicalSharing, virtualSharing, and noSharing. Default: noSharing.'
            extra_config.scsi_type: '- (Optional) The SCSI controller type for the virtual machine. One of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or pvscsi (VMware Paravirtual). Default: pvscsi.'
            extra_config.storage_policy_id: '- (Optional) The ID of the storage policy to assign to the home directory of a virtual machine.'
            extra_config.tags: '- (Optional) The IDs of any tags to attach to this resource. Please refer to the vsphere_tag resource for more information on applying tags to virtual machine resources.'
            extra_config.vapp: '- (Optional) Used for vApp configurations. The only sub-key available is properties, which is a key/value map of properties for virtual machines imported from and OVF/OVA. See Using vApp Properties for OVF/OVA Configuration for more information.'
            extra_config_reboot_required: '- (Optional) Allow the virtual machine to be rebooted when a change to extra_config occurs. Default: true.'
            force_power_off: '- (Optional) If a guest shutdown failed or times out while updating or destroying (see shutdown_wait_timeout), force the power-off of the virtual machine. Default: true.'
            guest_ip_addresses: '- The current list of IP addresses on this machine, including the value of default_ip_address. If VMware Tools is not running on the virtual machine, or if the virtul machine is powered off, this list will be empty.'
            host_system_id: option.
            hv_mode: '- (Optional) The hardware virtualization (non-nested) setting for the virtual machine. One of hvAuto, hvOn, or hvOff. Default: hvAuto.'
            id: '- The UUID of the virtual machine.'
            ide_controller_count: '- (Optional) The number of IDE controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: 2.'
            ignored_guest_ips: '- (Optional) List of IP addresses and CIDR networks to ignore while waiting for an available IP address using either of the waiters. Any IP addresses in this list will be ignored so that the waiter will continue to wait for a valid IP address. Default: [].'
            imported: '- Indicates if the virtual machine resource has been imported, or if the state has been migrated from a previous version of the resource. It influences the behavior of the first post-import apply operation. See the section on importing below.'
            ipv4_gateway: '- (Optional) The IPv4 default gateway when using network_interface customization on the virtual machine.'
            ipv6_gateway: '- (Optional) The IPv6 default gateway when using network_interface customization on the virtual machine.'
            key: '- The ID of the device within the virtual machine.'
            latency_sensitivity: '- (Optional) Controls the scheduling delay of the virtual machine. Use a higher sensitivity for applications that require lower latency, such as VOIP, media player applications, or applications that require frequent access to mouse or keyboard devices. One of low, normal, medium, or high.'
            linked_clone: ', the size, thin_provisioned, and eagerly_scrub settings for each disk must be an exact match to the individual disk''s counterpart in the source template.'
            linux_options.domain: '- (Required) The domain name for this machine. This, along with host_name, make up the FQDN of the virtual machine.'
            linux_options.host_name: '- (Required) The host name for this machine. This, along with domain, make up the FQDN of the virtual machine.'
            linux_options.hw_clock_utc: '- (Optional) Tells the operating system that the hardware clock is set to UTC. Default: true.'
            linux_options.script_text: '- (Optional) The customization script for the virtual machine that will be applied before and / or after guest customization. For more information on enabling and using a customization script, please refer to VMware KB 74880. The Heredoc style of string literal is recommended.'
            linux_options.time_zone: '- (Optional) Sets the time zone. For a list of possible combinations, please refer to VMware KB 2145518. The default is UTC.'
            memory: '- (Optional) The memory size to assign to the virtual machine, in MB. Default: 1024 (1 GB).'
            memory_hot_add_enabled: '- (Optional) Allow memory to be added to the virtual machine while it is powered on.'
            memory_limit: '- (Optional) The maximum amount of memory (in MB) that th virtual machine can consume, regardless of available resources. The default is no limit.'
            memory_reservation: '- (Optional) The amount of memory (in MB) that the virtual machine is guaranteed. The default is no reservation.'
            memory_share_count: '- (Optional) The number of memory shares allocated to the virtual machine when the memory_share_level is custom.'
            memory_share_level: '- (Optional) The allocation level for the virtual machine memory resources. One of high, low, normal, or custom. Default: custom.'
            migrate_wait_timeout: '- (Optional) The amount of time, in minutes, to wait for a virtual machine migration to complete before failing. Default: 10 minutes. See the section on virtual machine migration for more information.'
            moid: ': The managed object reference ID of the created virtual machine.'
            nested_hv_enabled: '- (Optional) Enable nested hardware virtualization on the virtual machine, facilitating nested virtualization in the guest operating system. Default: false.'
            network_interface: 'sub-resource takes a physical_function argument:'
            network_interface.adapter_type: '- (Optional) The network interface type. One of e1000, e1000e, sriov, or vmxnet3. Default: vmxnet3.'
            network_interface.bandwidth_limit: '- (Optional) The upper bandwidth limit of the network interface, in Mbits/sec. The default is no limit. Ignored if adapter_type is set to sriov.'
            network_interface.bandwidth_reservation: '- (Optional) The bandwidth reservation of the network interface, in Mbits/sec. The default is no reservation.'
            network_interface.bandwidth_share_count: '- (Optional) The share count for the network interface when the share level is custom. Ignored if adapter_type is set to sriov.'
            network_interface.bandwidth_share_level: '- (Optional) The bandwidth share allocation level for the network interface. One of low, normal, high, or custom. Default: normal. Ignored if adapter_type is set to sriov.'
            network_interface.dns_domain: '- (Optional) DNS search domain for the network interface. Used by Windows guest operating systems, but ignored by Linux distribution guest operating systems. For Linux, please refer to the section on the global DNS settings.'
            network_interface.dns_server_list: '- (Optional) DNS servers for the network interface. Used by Windows guest operating systems, but ignored by Linux distribution guest operating systems. For Linux, please refer to the section on the global DNS settings.'
            network_interface.ipv4_address: '- (Optional) The IPv4 address assigned to the network adapter. If blank or not included, DHCP is used.'
            network_interface.ipv4_netmask: The IPv4 subnet mask, in bits (e.g. 24 for 255.255.255.0).
            network_interface.ipv6_address: '- (Optional) The IPv6 address assigned to the network adapter. If blank or not included, auto-configuration is used.'
            network_interface.ipv6_netmask: '- (Optional) The IPv6 subnet mask, in bits (e.g.  32).'
            network_interface.mac_address: '- (Optional) The MAC address of the network interface. Can only be manually set if use_static_mac is true. Otherwise, the value is computed and presents the assigned MAC address for the interface.'
            network_interface.network_id: '- (Required) The managed object reference ID of the network on which to connect the virtual machine network interface.'
            network_interface.ovf_mapping: '- (Optional) Specifies which NIC in an OVF/OVA the network_interface should be associated. Only applies at creation when deploying from an OVF/OVA.'
            network_interface.use_static_mac: '- (Optional) If true, the mac_address field is treated as a static MAC address and set accordingly. Setting this to true requires mac_address to be set. Default: false.'
            num_cores_per_socket: '- (Optional) The number of cores per socket in the virtual machine. The number of vCPUs on the virtual machine will be num_cpus divided by num_cores_per_socket. If specified, the value supplied to num_cpus must be evenly divisible by this value. Default: 1.'
            num_cpus: '- (Optional) The total number of virtual processor cores to assign to the virtual machine. Default: 1.'
            ovf_deploy.allow_unverified_ssl_cert: '- (Optional) Allow unverified SSL certificates while deploying OVF/OVA from a URL. Defaults false.'
            ovf_deploy.deployment_option: '- (Optional) The key for the deployment option. If empty, the default option is selected.'
            ovf_deploy.disk_provisioning: '- (Optional) The disk provisioning policy. If set, all the disks included in the OVF/OVA will have the same specified policy. One of thin, flat, thick, or sameAsSource.'
            ovf_deploy.enable_hidden_properties: '- (Optional) Allow properties with ovf:userConfigurable=false to be set. Defaults false.'
            ovf_deploy.ip_allocation_policy: '- (Optional) The IP allocation policy.'
            ovf_deploy.ip_protocol: '- (Optional) The IP protocol.'
            ovf_deploy.local_ovf_path: '- (Optional) The absolute path to the OVF/OVA file on the local system. When deploying from an OVF, ensure the necessary files, such as .vmdk and .mf files are also in the same directory as the .ovf file.'
            ovf_deploy.ovf_network_map: '- (Optional) The mapping of network identifiers from the OVF descriptor to a network UUID.'
            ovf_deploy.remote_ovf_url: '- (Optional) URL to the OVF/OVA file.'
            power_state: '- A computed value for the current power state of the virtual machine. One of on, off, or suspended.'
            reboot_required: '- Value internal to Terraform used to determine if a configuration set change requires a reboot. This value is most useful during an update process and gets reset on refresh.'
            run_tools_scripts_after_power_on: '- (Optional) Enable post-power-on scripts to run when VMware Tools is installed. Default: true.'
            run_tools_scripts_after_resume: '- (Optional) Enable ost-resume scripts to run when VMware Tools is installed. Default: true.'
            run_tools_scripts_before_guest_reboot: '- (Optional) Enable pre-reboot scripts to run when VMware Tools is installed. Default: false.'
            run_tools_scripts_before_guest_shutdown: '- (Optional) Enable pre-shutdown scripts to run when VMware Tools is installed. Default: true.'
            run_tools_scripts_before_guest_standby: '- (Optional) Enable pre-standby scripts to run when VMware Tools is installed. Default: true.'
            sata_controller_count: '- (Optional) The number of SATA controllers that the virtual machine. This directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: 0.'
            scsi_controller_count: '- (Optional) The number of SCSI controllers on the virtual machine. This setting directly affects the number of disks you can add to the virtual machine and the maximum disk unit number. Note that lowering this value does not remove controllers. Default: 1.'
            scsi_type: is set to an exact match of the template's controller set. For maximum compatibility, make sure the SCSI controllers on the source template are all the same type.
            shutdown_wait_timeout: '- (Optional) The amount of time, in minutes, to wait for a graceful guest shutdown when making necessary updates to the virtual machine. If force_power_off is set to true, the virtual machine will be forced to power-off after the timeout, otherwise an error is returned. Default: 3 minutes.'
            size: of a virtual disk must be at least the same size as its counterpart disk in the source template.
            sriov: .
            swap_placement_policy: '- (Optional) The swap file placement policy for the virtual machine. One of inherit, hostLocal, or vmDirectory. Default: inherit.'
            sync_time_with_host: '- (Optional) Enable the guest operating system to synchronization its clock with the host when the virtual machine is powered on or resumed. Requires VMware Tools to be installed. Default: true.'
            sync_time_with_host_periodically: '- (Optional) Enable the guest operating system to periodically synchronize its clock with the host. Default: false.'
            terraform apply: run which will remove the setting for known disks. This process safeguards against naming or accounting mistakes in the disk configuration.
            timeout: '- (Optional) The time, in minutes, that the provider waits for customization to complete before failing. The default is 10 minutes. Setting the value to 0 or a negative value disables the waiter.'
            tools_upgrade_policy: '- (Optional) Enable automatic upgrade of the VMware Tools version when the virtual machine is rebooted. If necessary, VMware Tools is upgraded to the latest version supported by the host on which the virtual machine is running. Requires VMware Tools to be installed. One of manual or upgradeAtPowerCycle. Default: manual.'
            "true": to false.
            uuid: '- The UUID of the virtual disk VMDK file. This is used to track the virtual disk on the virtual machine.'
            vapp_transport: '- Computed value which is only valid for cloned virtual machines. A list of vApp transport methods supported by the source virtual machine or template.'
            vbs_enabled: '- (Optional) Enable Virtualization Based Security. Requires firmware to be efi. In addition, vvtd_enabled, nested_hv_enabled, and efi_secure_boot_enabled must all have a value of true. Default: false.'
            vmware_tools_status: '- The state of  VMware Tools in the guest. This will determine the proper course of action for some device operations.'
            vmx_path: '- The path of the virtual machine configuration file on the datastore in which the virtual machine is placed.'
            vvtd_enabled: '- (Optional) Enable Intel Virtualization Technology for Directed I/O for the virtual machine (I/O MMU in the vSphere Client). Default: false.'
            wait_for_guest_ip_timeout: '- (Optional) The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. This should only be used if the version VMware Tools does not allow the wait_for_guest_net_timeout waiter to be used. A value less than 1 disables the waiter. Default: 0.'
            wait_for_guest_net_routable: '- (Optional) Controls whether or not the guest network waiter waits for a routable address. When false, the waiter does not wait for a default gateway, nor are IP addresses checked against any discovered default gateways as part of its success criteria. This property is ignored if the wait_for_guest_ip_timeout waiter is used. Default: true.'
            wait_for_guest_net_timeout: '- (Optional) The amount of time, in minutes, to wait for an available guest IP address on the virtual machine. Older versions of VMware Tools do not populate this property. In those cases, this waiter can be disabled and the wait_for_guest_ip_timeout waiter can be used instead. A value less than 1 disables the waiter. Default: 5 minutes.'
            windows_options.admin_password: '- (Optional) The administrator password for the virtual machine.'
            windows_options.auto_logon: '- (Optional) Specifies whether or not the virtual machine automatically logs on as Administrator. Default: false.'
            windows_options.auto_logon_count: '- (Optional) Specifies how many times the virtual machine should auto-logon the Administrator account when auto_logon is true. This option should be set accordingly to ensure that all of your commands that run in run_once_command_list can log in to run. Default: 1.'
            windows_options.computer_name: '- (Required) The computer name of the virtual machine.'
            windows_options.domain_admin_password: '- (Optional) The password user account with administrative privileges used to join the virtual machine to the domain. Required if setting join_domain.'
            windows_options.domain_admin_user: '- (Optional) The user account with administrative privileges to use to join the guest operating system to the domain. Required if setting join_domain.'
            windows_options.domain_ou: '- (Optional) The MachineObjectOU which specifies the full LDAP path name of the OU to which the virtual machine belongs (e.g., OU=bar,OU=foo,DC=example,DC=com").'
            windows_options.full_name: '- (Optional) The full name of the organization owner of the virtual machine. This populates the "user" field in the general Windows system information. Default: Administrator.'
            windows_options.join_domain: '- (Optional) The domain name in which to join  the virtual machine. One of this or workgroup must be included.'
            windows_options.organization_name: '- (Optional) The name of the organization for the virtual machine.  This option populates the "organization" field in the general Windows system information. Default: Managed by Terraform.'
            windows_options.product_key: '- (Optional) The product key for the virtual machine Windows guest operating system. The default is no key.'
            windows_options.run_once_command_list: '- (Optional) A list of commands to run at first user logon, after guest customization. Each run once command is limited by the API to 260 characters.'
            windows_options.time_zone: '- (Optional) The time zone for the virtual machine. For a list of supported codes, please refer to the MIcrosoft documentation. The default is 85 (GMT/UTC).'
            windows_options.workgroup: '- (Optional) The workgroup name for the virtual machine. One of this or join_domain must be included.'
        importStatements: []
    vsphere_virtual_machine_class:
        subCategory: Workload Management
        description: Provides a VMware vSphere virtual machine class resource..
        name: vsphere_virtual_machine_class
        title: vsphere_virtual_machine_class
        examples:
            - name: basic_class
              manifest: |-
                {
                  "cpus": 4,
                  "memory": 4096,
                  "name": "basic-class"
                }
            - name: vgp_class
              manifest: |-
                {
                  "cpus": 4,
                  "memory": 4096,
                  "memory_reservation": 100,
                  "name": "vgpu-class",
                  "vgpu_devices": [
                    "vgpu1"
                  ]
                }
        argumentDocs:
            cpus: '- The number of CPUs.'
            memory: '- The amount of memory in MB.'
            memory_reservation: '- The percentage of memory reservation.'
            name: '- The name for the class.'
            vgpu_devices: '- The identifiers of the vGPU devices for the class. If this is set memory reservation needs to be 100.'
        importStatements: []
    vsphere_virtual_machine_snapshot:
        subCategory: Virtual Machine
        description: Provides a VMware vSphere virtual machine snapshot resource. This can be used to create and delete virtual machine snapshots.
        name: vsphere_virtual_machine_snapshot
        title: vsphere_virtual_machine_snapshot
        examples:
            - name: demo1
              manifest: |-
                {
                  "consolidate": "true",
                  "description": "This is Demo Snapshot",
                  "memory": "true",
                  "quiesce": "true",
                  "remove_children": "false",
                  "snapshot_name": "Snapshot Name",
                  "virtual_machine_uuid": "9aac5551-a351-4158-8c5c-15a71e8ec5c9"
                }
        argumentDocs:
            consolidate: |-
                - (Optional) If set to true, the delta disks involved in this
                snapshot will be consolidated into the parent when this resource is
                destroyed.
            description: '- (Required) A description for the snapshot.'
            memory: |-
                - (Required) If set to true, a dump of the internal state of the
                virtual machine is included in the snapshot.
            quiesce: |-
                - (Required) If set to true, and the virtual machine is powered
                on when the snapshot is taken, VMware Tools is used to quiesce the file
                system in the virtual machine.
            remove_children: |-
                - (Optional) If set to true, the entire snapshot subtree
                is removed when this resource is destroyed.
            snapshot_name: '- (Required) The name of the snapshot.'
            virtual_machine_uuid: '- (Required) The virtual machine UUID.'
        importStatements: []
    vsphere_vm_storage_policy:
        subCategory: Storage
        description: Storage policies can select the most appropriate datastore for the virtual machine and enforce the required level of service.
        name: vsphere_vm_storage_policy
        title: vm_storage_policy
        examples:
            - name: prod_platinum_replicated
              manifest: |-
                {
                  "description": "prod_platinum_replicated",
                  "name": "prod_platinum_replicated",
                  "tag_rules": [
                    {
                      "include_datastores_with_tags": true,
                      "tag_category": "${data.vsphere_tag_category.environment.name}",
                      "tags": [
                        "${data.vsphere_tag.production.name}"
                      ]
                    },
                    {
                      "include_datastores_with_tags": true,
                      "tag_category": "${data.vsphere_tag_category.service_level.name}",
                      "tags": [
                        "${data.vsphere_tag.platinum.name}"
                      ]
                    },
                    {
                      "include_datastores_with_tags": true,
                      "tag_category": "${data.vsphere_tag_category.replication.name}",
                      "tags": [
                        "${data.vsphere_tag.replicated.name}"
                      ]
                    }
                  ]
                }
              references:
                tag_rules.tag_category: data.vsphere_tag_category.replication.name
            - name: dev_silver_nonreplicated
              manifest: |-
                {
                  "description": "dev_silver_nonreplicated",
                  "name": "dev_silver_nonreplicated",
                  "tag_rules": [
                    {
                      "include_datastores_with_tags": true,
                      "tag_category": "${data.vsphere_tag_category.environment.name}",
                      "tags": [
                        "${data.vsphere_tag.development.name}"
                      ]
                    },
                    {
                      "include_datastores_with_tags": true,
                      "tag_category": "${data.vsphere_tag_category.service_level.name}",
                      "tags": [
                        "${data.vsphere_tag.silver.name}"
                      ]
                    },
                    {
                      "include_datastores_with_tags": true,
                      "tag_category": "${data.vsphere_tag_category.replication.name}",
                      "tags": [
                        "${data.vsphere_tag.non_replicated.name}"
                      ]
                    }
                  ]
                }
              references:
                tag_rules.tag_category: data.vsphere_tag_category.replication.name
        argumentDocs:
            description: '- (Optional) Description of the storage policy.'
            include_datastores_with_tags: '- (Optional) Include datastores with the given tags or exclude. Default true.'
            name: '- (Required) The name of the storage policy.'
            tag_category: '- (Required) Name of the tag category.'
            tag_rules: '- (Required) List of tag rules. The tag category and tags to be associated to this storage policy.'
            tags: '- (Required) List of Name of tags to select from the given category.'
        importStatements: []
    vsphere_vmfs_datastore:
        subCategory: Storage
        description: Provides a vSphere VMFS datastore resource. This can be used to configure a VMFS datastore on a host or set of hosts.
        name: vsphere_vmfs_datastore
        title: vsphere_vmfs_datastore
        examples:
            - name: datastore
              manifest: |-
                {
                  "disks": [
                    "mpx.vmhba1:C0:T1:L0",
                    "mpx.vmhba1:C0:T2:L0",
                    "mpx.vmhba1:C0:T2:L0"
                  ],
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "name": "terraform-test"
                }
              references:
                host_system_id: data.vsphere_host.host.id
            - name: datastore
              manifest: |-
                {
                  "disks": [
                    "${data.vsphere_vmfs_disks.available.disks}"
                  ],
                  "folder": "datastore-folder",
                  "host_system_id": "${data.vsphere_host.host.id}",
                  "name": "terraform-test"
                }
              references:
                host_system_id: data.vsphere_host.host.id
        argumentDocs:
            accessible: |-
                - The connectivity status of the datastore. If this is false,
                some other computed attributes may be out of date.
            capacity: '- Maximum capacity of the datastore, in megabytes.'
            custom_attributes: |-
                (Optional) Map of custom attribute ids to attribute
                value string to set on datastore resource. See
                here for a reference on how to set values
                for custom attributes.
            datastore_cluster_id: |-
                - (Optional) The managed object
                ID of a datastore cluster to put this datastore in.
                Conflicts with folder.
            disks: '- (Required) The disks to use with the datastore.'
            folder: |-
                - (Optional) The relative path to a folder to put this datastore in.
                This is a path relative to the datacenter you are deploying the datastore to.
                Example: for the dc1 datacenter, and a provided folder of foo/bar,
                Terraform will place a datastore named terraform-test in a datastore folder
                located at /dc1/datastore/foo/bar, with the final inventory path being
                /dc1/datastore/foo/bar/terraform-test. Conflicts with
                datastore_cluster_id.
            free_space: '- Available space of this datastore, in megabytes.'
            host_system_id: |-
                - (Required) The managed object ID of
                the host to set the datastore up on. Note that this is not necessarily the
                only host that the datastore will be set up on - see
                here for more info. Forces a
                new resource if changed.
            id: '- The managed object reference ID of the datastore.'
            maintenance_mode: '- The current maintenance mode state of the datastore.'
            multiple_host_access: |-
                - If true, more than one host in the datacenter has
                been configured with access to the datastore.
            name: |-
                - (Required) The name of the datastore. Forces a new resource if
                changed.
            tags: |-
                - (Optional) The IDs of any tags to attach to this resource. See
                here for a reference on how to apply tags.
            uncommitted_space: |-
                - Total additional storage space, in megabytes,
                potentially used by all virtual machines on this datastore.
            url: '- The unique locator for the datastore.'
        importStatements: []
    vsphere_vnic:
        subCategory: Host and Cluster Management
        description: Provides a VMware vSphere vnic resource..
        name: vsphere_vnic
        title: vsphere_vnic
        examples:
            - name: vnic
              manifest: |-
                {
                  "distributed_port_group": "${vsphere_distributed_port_group.pg.id}",
                  "distributed_switch_port": "${vsphere_distributed_virtual_switch.vds.id}",
                  "host": "${data.vsphere_host.host.id}",
                  "ipv4": [
                    {
                      "dhcp": true
                    }
                  ],
                  "netstack": "vmotion"
                }
              references:
                distributed_port_group: vsphere_distributed_port_group.pg.id
                distributed_switch_port: vsphere_distributed_virtual_switch.vds.id
                host: data.vsphere_host.host.id
              dependencies:
                vsphere_distributed_port_group.pg: |-
                    {
                      "distributed_virtual_switch_uuid": "${vsphere_distributed_virtual_switch.vds.id}",
                      "name": "pg-01",
                      "vlan_id": 1234
                    }
                vsphere_distributed_virtual_switch.vds: |-
                    {
                      "datacenter_id": "${data.vsphere_datacenter.datacenter.id}",
                      "host": [
                        {
                          "devices": [
                            "vnic3"
                          ],
                          "host_system_id": "${data.vsphere_host.host.id}"
                        }
                      ],
                      "name": "vds-01"
                    }
            - name: vnic
              manifest: |-
                {
                  "host": "${data.vsphere_host.host.id}",
                  "ipv4": [
                    {
                      "dhcp": true
                    }
                  ],
                  "portgroup": "${vsphere_host_port_group.pg.name}",
                  "services": [
                    "vsan",
                    "management"
                  ]
                }
              references:
                host: data.vsphere_host.host.id
                portgroup: vsphere_host_port_group.pg.name
              dependencies:
                vsphere_host_port_group.pg: |-
                    {
                      "host_system_id": "${data.vsphere_host.host.id}",
                      "name": "pg-01",
                      "virtual_switch_name": "${vsphere_host_virtual_switch.hvs.name}"
                    }
                vsphere_host_virtual_switch.hvs: |-
                    {
                      "active_nics": [
                        "vmnic3"
                      ],
                      "host_system_id": "${data.vsphere_host.host.id}",
                      "name": "hvs-01",
                      "network_adapters": [
                        "vmnic3",
                        "vmnic4"
                      ],
                      "standby_nics": [
                        "vmnic4"
                      ]
                    }
        argumentDocs:
            addresses: '-  List of IPv6 addresses'
            autoconfig: '- Use IPv6 Autoconfiguration (RFC2462).'
            dhcp: '- Use DHCP to configure the interface''s IPv4 stack.'
            distributed_port_group: '- (Optional) Key of the distributed portgroup the nic will connect to.'
            distributed_switch_port: '- (Optional) UUID of the vdswitch the nic will be attached to. Do not set if you set portgroup.'
            gw: '- IP address of the default gateway, if DHCP is not set.'
            id: '- The ID of the vNic.'
            ip: '- Address of the interface, if DHCP is not set.'
            ipv4: '- (Optional) IPv4 settings. Either this or ipv6 needs to be set. See IPv4 options below.'
            ipv6: '- (Optional) IPv6 settings. Either this or ipv6 needs to be set. See IPv6 options below.'
            mac: '- (Optional) MAC address of the interface.'
            mtu: '- (Optional) MTU of the interface.'
            netmask: '- Netmask of the interface, if DHCP is not set.'
            netstack: '- (Optional) TCP/IP stack setting for this interface. Possible values are defaultTcpipStack``, ''vmotion'', ''vSphereProvisioning''. Changing this will force the creation of a new interface since it''s not possible to change the stack once it gets created. (Default:defaultTcpipStack`)'
            portgroup: '- (Optional) Portgroup to attach the nic to. Do not set if you set distributed_switch_port.'
            services: '- (Optional) Enabled services setting for this interface. Currently support values are vmotion, management, and vsan.'
        importStatements: []
