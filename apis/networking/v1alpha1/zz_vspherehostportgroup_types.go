// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PortsInitParameters struct {
}

type PortsObservation struct {

	// The key for this port group as returned from the vSphere API.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	MacAddresses []*string `json:"macAddresses,omitempty" tf:"mac_addresses,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PortsParameters struct {
}

type VSphereHostPortGroupInitParameters struct {

	// List of active network adapters used for load balancing.
	ActiveNics []*string `json:"activeNics,omitempty" tf:"active_nics,omitempty"`

	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than that of its own.
	AllowForgedTransmits *bool `json:"allowForgedTransmits,omitempty" tf:"allow_forged_transmits,omitempty"`

	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges *bool `json:"allowMacChanges,omitempty" tf:"allow_mac_changes,omitempty"`

	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous *bool `json:"allowPromiscuous,omitempty" tf:"allow_promiscuous,omitempty"`

	// Enable beacon probing. Requires that the vSwitch has been configured to use a beacon. If disabled, link status is used only.
	CheckBeacon *bool `json:"checkBeacon,omitempty" tf:"check_beacon,omitempty"`

	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback *bool `json:"failback,omitempty" tf:"failback,omitempty"`

	// The managed object ID of
	// the host to set the port group up on. Forces a new resource if changed.
	// The managed object ID of the host to set the virtual switch up on.
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	// The name of the port group.  Forces a new resource if
	// changed.
	// The name of the port group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches *bool `json:"notifySwitches,omitempty" tf:"notify_switches,omitempty"`

	// The average bandwidth in bits per second if traffic shaping is enabled.
	ShapingAverageBandwidth *float64 `json:"shapingAverageBandwidth,omitempty" tf:"shaping_average_bandwidth,omitempty"`

	// The maximum burst size allowed in bytes if traffic shaping is enabled.
	ShapingBurstSize *float64 `json:"shapingBurstSize,omitempty" tf:"shaping_burst_size,omitempty"`

	// Enable traffic shaping on this virtual switch or port group.
	ShapingEnabled *bool `json:"shapingEnabled,omitempty" tf:"shaping_enabled,omitempty"`

	// The peak bandwidth during bursts in bits per second if traffic shaping is enabled.
	ShapingPeakBandwidth *float64 `json:"shapingPeakBandwidth,omitempty" tf:"shaping_peak_bandwidth,omitempty"`

	// List of standby network adapters used for failover.
	StandbyNics []*string `json:"standbyNics,omitempty" tf:"standby_nics,omitempty"`

	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, or failover_explicit.
	TeamingPolicy *string `json:"teamingPolicy,omitempty" tf:"teaming_policy,omitempty"`

	// The name of the virtual switch to bind
	// this port group to. Forces a new resource if changed.
	// The name of the virtual switch to bind this port group to.
	VirtualSwitchName *string `json:"virtualSwitchName,omitempty" tf:"virtual_switch_name,omitempty"`

	// The VLAN ID/trunk mode for this port group.  An ID of
	// 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an
	// ID of 4095 enables trunk mode, allowing the guest to manage its own
	// tagging. Default: 0.
	// The VLAN ID/trunk mode for this port group. An ID of 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an ID of 4095 enables trunk mode, allowing the guest to manage its own tagging.
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type VSphereHostPortGroupObservation struct {

	// List of active network adapters used for load balancing.
	ActiveNics []*string `json:"activeNics,omitempty" tf:"active_nics,omitempty"`

	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than that of its own.
	AllowForgedTransmits *bool `json:"allowForgedTransmits,omitempty" tf:"allow_forged_transmits,omitempty"`

	// Controls whether or not the Media Access Control (MAC) address can be changed.
	AllowMacChanges *bool `json:"allowMacChanges,omitempty" tf:"allow_mac_changes,omitempty"`

	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	AllowPromiscuous *bool `json:"allowPromiscuous,omitempty" tf:"allow_promiscuous,omitempty"`

	// Enable beacon probing. Requires that the vSwitch has been configured to use a beacon. If disabled, link status is used only.
	CheckBeacon *bool `json:"checkBeacon,omitempty" tf:"check_beacon,omitempty"`

	// A map with a full set of the policy
	// options computed from defaults and overrides,
	// explaining the effective policy for this port group.
	// The effective network policy after inheritance. Note that this will look similar to, but is not the same, as the policy attributes defined in this resource.
	// +mapType=granular
	ComputedPolicy map[string]*string `json:"computedPolicy,omitempty" tf:"computed_policy,omitempty"`

	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	Failback *bool `json:"failback,omitempty" tf:"failback,omitempty"`

	// The managed object ID of
	// the host to set the port group up on. Forces a new resource if changed.
	// The managed object ID of the host to set the virtual switch up on.
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	// The convention is a prefix, the host system ID, and the port group name.
	// For example,tf-HostPortGroup:host-10:portgroup-01. Tracking a port group
	// on a standard switch, which can be created with or without a vCenter Server,
	// is different than a dvPortGroup which is tracked as a managed object ID in
	// vCenter Server versus a key on a host.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The key for this port group as returned from the vSphere API.
	// The linkable identifier for this port group.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The name of the port group.  Forces a new resource if
	// changed.
	// The name of the port group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	NotifySwitches *bool `json:"notifySwitches,omitempty" tf:"notify_switches,omitempty"`

	// A list of ports that currently exist and are used on this port group.
	// The ports that currently exist and are used on this port group.
	Ports []PortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`

	// The average bandwidth in bits per second if traffic shaping is enabled.
	ShapingAverageBandwidth *float64 `json:"shapingAverageBandwidth,omitempty" tf:"shaping_average_bandwidth,omitempty"`

	// The maximum burst size allowed in bytes if traffic shaping is enabled.
	ShapingBurstSize *float64 `json:"shapingBurstSize,omitempty" tf:"shaping_burst_size,omitempty"`

	// Enable traffic shaping on this virtual switch or port group.
	ShapingEnabled *bool `json:"shapingEnabled,omitempty" tf:"shaping_enabled,omitempty"`

	// The peak bandwidth during bursts in bits per second if traffic shaping is enabled.
	ShapingPeakBandwidth *float64 `json:"shapingPeakBandwidth,omitempty" tf:"shaping_peak_bandwidth,omitempty"`

	// List of standby network adapters used for failover.
	StandbyNics []*string `json:"standbyNics,omitempty" tf:"standby_nics,omitempty"`

	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, or failover_explicit.
	TeamingPolicy *string `json:"teamingPolicy,omitempty" tf:"teaming_policy,omitempty"`

	// The name of the virtual switch to bind
	// this port group to. Forces a new resource if changed.
	// The name of the virtual switch to bind this port group to.
	VirtualSwitchName *string `json:"virtualSwitchName,omitempty" tf:"virtual_switch_name,omitempty"`

	// The VLAN ID/trunk mode for this port group.  An ID of
	// 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an
	// ID of 4095 enables trunk mode, allowing the guest to manage its own
	// tagging. Default: 0.
	// The VLAN ID/trunk mode for this port group. An ID of 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an ID of 4095 enables trunk mode, allowing the guest to manage its own tagging.
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type VSphereHostPortGroupParameters struct {

	// List of active network adapters used for load balancing.
	// +kubebuilder:validation:Optional
	ActiveNics []*string `json:"activeNics,omitempty" tf:"active_nics,omitempty"`

	// Controls whether or not the virtual network adapter is allowed to send network traffic with a different MAC address than that of its own.
	// +kubebuilder:validation:Optional
	AllowForgedTransmits *bool `json:"allowForgedTransmits,omitempty" tf:"allow_forged_transmits,omitempty"`

	// Controls whether or not the Media Access Control (MAC) address can be changed.
	// +kubebuilder:validation:Optional
	AllowMacChanges *bool `json:"allowMacChanges,omitempty" tf:"allow_mac_changes,omitempty"`

	// Enable promiscuous mode on the network. This flag indicates whether or not all traffic is seen on a given port.
	// +kubebuilder:validation:Optional
	AllowPromiscuous *bool `json:"allowPromiscuous,omitempty" tf:"allow_promiscuous,omitempty"`

	// Enable beacon probing. Requires that the vSwitch has been configured to use a beacon. If disabled, link status is used only.
	// +kubebuilder:validation:Optional
	CheckBeacon *bool `json:"checkBeacon,omitempty" tf:"check_beacon,omitempty"`

	// If true, the teaming policy will re-activate failed interfaces higher in precedence when they come back up.
	// +kubebuilder:validation:Optional
	Failback *bool `json:"failback,omitempty" tf:"failback,omitempty"`

	// The managed object ID of
	// the host to set the port group up on. Forces a new resource if changed.
	// The managed object ID of the host to set the virtual switch up on.
	// +kubebuilder:validation:Optional
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	// The name of the port group.  Forces a new resource if
	// changed.
	// The name of the port group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If true, the teaming policy will notify the broadcast network of a NIC failover, triggering cache updates.
	// +kubebuilder:validation:Optional
	NotifySwitches *bool `json:"notifySwitches,omitempty" tf:"notify_switches,omitempty"`

	// The average bandwidth in bits per second if traffic shaping is enabled.
	// +kubebuilder:validation:Optional
	ShapingAverageBandwidth *float64 `json:"shapingAverageBandwidth,omitempty" tf:"shaping_average_bandwidth,omitempty"`

	// The maximum burst size allowed in bytes if traffic shaping is enabled.
	// +kubebuilder:validation:Optional
	ShapingBurstSize *float64 `json:"shapingBurstSize,omitempty" tf:"shaping_burst_size,omitempty"`

	// Enable traffic shaping on this virtual switch or port group.
	// +kubebuilder:validation:Optional
	ShapingEnabled *bool `json:"shapingEnabled,omitempty" tf:"shaping_enabled,omitempty"`

	// The peak bandwidth during bursts in bits per second if traffic shaping is enabled.
	// +kubebuilder:validation:Optional
	ShapingPeakBandwidth *float64 `json:"shapingPeakBandwidth,omitempty" tf:"shaping_peak_bandwidth,omitempty"`

	// List of standby network adapters used for failover.
	// +kubebuilder:validation:Optional
	StandbyNics []*string `json:"standbyNics,omitempty" tf:"standby_nics,omitempty"`

	// The network adapter teaming policy. Can be one of loadbalance_ip, loadbalance_srcmac, loadbalance_srcid, or failover_explicit.
	// +kubebuilder:validation:Optional
	TeamingPolicy *string `json:"teamingPolicy,omitempty" tf:"teaming_policy,omitempty"`

	// The name of the virtual switch to bind
	// this port group to. Forces a new resource if changed.
	// The name of the virtual switch to bind this port group to.
	// +kubebuilder:validation:Optional
	VirtualSwitchName *string `json:"virtualSwitchName,omitempty" tf:"virtual_switch_name,omitempty"`

	// The VLAN ID/trunk mode for this port group.  An ID of
	// 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an
	// ID of 4095 enables trunk mode, allowing the guest to manage its own
	// tagging. Default: 0.
	// The VLAN ID/trunk mode for this port group. An ID of 0 denotes no tagging, an ID of 1-4094 tags with the specific ID, and an ID of 4095 enables trunk mode, allowing the guest to manage its own tagging.
	// +kubebuilder:validation:Optional
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

// VSphereHostPortGroupSpec defines the desired state of VSphereHostPortGroup
type VSphereHostPortGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereHostPortGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereHostPortGroupInitParameters `json:"initProvider,omitempty"`
}

// VSphereHostPortGroupStatus defines the observed state of VSphereHostPortGroup.
type VSphereHostPortGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereHostPortGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereHostPortGroup is the Schema for the VSphereHostPortGroups API. Provides a vSphere port group resource to manage port groups on ESXi hosts.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereHostPortGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostSystemId) || (has(self.initProvider) && has(self.initProvider.hostSystemId))",message="spec.forProvider.hostSystemId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualSwitchName) || (has(self.initProvider) && has(self.initProvider.virtualSwitchName))",message="spec.forProvider.virtualSwitchName is a required parameter"
	Spec   VSphereHostPortGroupSpec   `json:"spec"`
	Status VSphereHostPortGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereHostPortGroupList contains a list of VSphereHostPortGroups
type VSphereHostPortGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereHostPortGroup `json:"items"`
}

// Repository type metadata.
var (
	VSphereHostPortGroup_Kind             = "VSphereHostPortGroup"
	VSphereHostPortGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereHostPortGroup_Kind}.String()
	VSphereHostPortGroup_KindAPIVersion   = VSphereHostPortGroup_Kind + "." + CRDGroupVersion.String()
	VSphereHostPortGroup_GroupVersionKind = CRDGroupVersion.WithKind(VSphereHostPortGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereHostPortGroup{}, &VSphereHostPortGroupList{})
}
