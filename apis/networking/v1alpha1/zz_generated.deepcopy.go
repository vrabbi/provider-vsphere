//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInitParameters) DeepCopyInto(out *HostInitParameters) {
	*out = *in
	if in.Devices != nil {
		in, out := &in.Devices, &out.Devices
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInitParameters.
func (in *HostInitParameters) DeepCopy() *HostInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostObservation) DeepCopyInto(out *HostObservation) {
	*out = *in
	if in.Devices != nil {
		in, out := &in.Devices, &out.Devices
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostObservation.
func (in *HostObservation) DeepCopy() *HostObservation {
	if in == nil {
		return nil
	}
	out := new(HostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostParameters) DeepCopyInto(out *HostParameters) {
	*out = *in
	if in.Devices != nil {
		in, out := &in.Devices, &out.Devices
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostParameters.
func (in *HostParameters) DeepCopy() *HostParameters {
	if in == nil {
		return nil
	}
	out := new(HostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PortsInitParameters) DeepCopyInto(out *PortsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PortsInitParameters.
func (in *PortsInitParameters) DeepCopy() *PortsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PortsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PortsObservation) DeepCopyInto(out *PortsObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.MacAddresses != nil {
		in, out := &in.MacAddresses, &out.MacAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PortsObservation.
func (in *PortsObservation) DeepCopy() *PortsObservation {
	if in == nil {
		return nil
	}
	out := new(PortsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PortsParameters) DeepCopyInto(out *PortsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PortsParameters.
func (in *PortsParameters) DeepCopy() *PortsParameters {
	if in == nil {
		return nil
	}
	out := new(PortsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvlanMappingInitParameters) DeepCopyInto(out *PvlanMappingInitParameters) {
	*out = *in
	if in.PrimaryVlanID != nil {
		in, out := &in.PrimaryVlanID, &out.PrimaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.PvlanType != nil {
		in, out := &in.PvlanType, &out.PvlanType
		*out = new(string)
		**out = **in
	}
	if in.SecondaryVlanID != nil {
		in, out := &in.SecondaryVlanID, &out.SecondaryVlanID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvlanMappingInitParameters.
func (in *PvlanMappingInitParameters) DeepCopy() *PvlanMappingInitParameters {
	if in == nil {
		return nil
	}
	out := new(PvlanMappingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvlanMappingObservation) DeepCopyInto(out *PvlanMappingObservation) {
	*out = *in
	if in.PrimaryVlanID != nil {
		in, out := &in.PrimaryVlanID, &out.PrimaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.PvlanType != nil {
		in, out := &in.PvlanType, &out.PvlanType
		*out = new(string)
		**out = **in
	}
	if in.SecondaryVlanID != nil {
		in, out := &in.SecondaryVlanID, &out.SecondaryVlanID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvlanMappingObservation.
func (in *PvlanMappingObservation) DeepCopy() *PvlanMappingObservation {
	if in == nil {
		return nil
	}
	out := new(PvlanMappingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PvlanMappingParameters) DeepCopyInto(out *PvlanMappingParameters) {
	*out = *in
	if in.PrimaryVlanID != nil {
		in, out := &in.PrimaryVlanID, &out.PrimaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.PvlanType != nil {
		in, out := &in.PvlanType, &out.PvlanType
		*out = new(string)
		**out = **in
	}
	if in.SecondaryVlanID != nil {
		in, out := &in.SecondaryVlanID, &out.SecondaryVlanID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PvlanMappingParameters.
func (in *PvlanMappingParameters) DeepCopy() *PvlanMappingParameters {
	if in == nil {
		return nil
	}
	out := new(PvlanMappingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroup) DeepCopyInto(out *VSphereDistributedPortGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroup.
func (in *VSphereDistributedPortGroup) DeepCopy() *VSphereDistributedPortGroup {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDistributedPortGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroupInitParameters) DeepCopyInto(out *VSphereDistributedPortGroupInitParameters) {
	*out = *in
	if in.ActiveUplinks != nil {
		in, out := &in.ActiveUplinks, &out.ActiveUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.AutoExpand != nil {
		in, out := &in.AutoExpand, &out.AutoExpand
		*out = new(bool)
		**out = **in
	}
	if in.BlockAllPorts != nil {
		in, out := &in.BlockAllPorts, &out.BlockAllPorts
		*out = new(bool)
		**out = **in
	}
	if in.BlockOverrideAllowed != nil {
		in, out := &in.BlockOverrideAllowed, &out.BlockOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectpathGen2Allowed != nil {
		in, out := &in.DirectpathGen2Allowed, &out.DirectpathGen2Allowed
		*out = new(bool)
		**out = **in
	}
	if in.DistributedVirtualSwitchUUID != nil {
		in, out := &in.DistributedVirtualSwitchUUID, &out.DistributedVirtualSwitchUUID
		*out = new(string)
		**out = **in
	}
	if in.EgressShapingAverageBandwidth != nil {
		in, out := &in.EgressShapingAverageBandwidth, &out.EgressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingBurstSize != nil {
		in, out := &in.EgressShapingBurstSize, &out.EgressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingEnabled != nil {
		in, out := &in.EgressShapingEnabled, &out.EgressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingPeakBandwidth != nil {
		in, out := &in.EgressShapingPeakBandwidth, &out.EgressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingAverageBandwidth != nil {
		in, out := &in.IngressShapingAverageBandwidth, &out.IngressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingBurstSize != nil {
		in, out := &in.IngressShapingBurstSize, &out.IngressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingEnabled != nil {
		in, out := &in.IngressShapingEnabled, &out.IngressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingPeakBandwidth != nil {
		in, out := &in.IngressShapingPeakBandwidth, &out.IngressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.LacpEnabled != nil {
		in, out := &in.LacpEnabled, &out.LacpEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LacpMode != nil {
		in, out := &in.LacpMode, &out.LacpMode
		*out = new(string)
		**out = **in
	}
	if in.LivePortMovingAllowed != nil {
		in, out := &in.LivePortMovingAllowed, &out.LivePortMovingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetflowEnabled != nil {
		in, out := &in.NetflowEnabled, &out.NetflowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetflowOverrideAllowed != nil {
		in, out := &in.NetflowOverrideAllowed, &out.NetflowOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.NetworkResourcePoolKey != nil {
		in, out := &in.NetworkResourcePoolKey, &out.NetworkResourcePoolKey
		*out = new(string)
		**out = **in
	}
	if in.NetworkResourcePoolOverrideAllowed != nil {
		in, out := &in.NetworkResourcePoolOverrideAllowed, &out.NetworkResourcePoolOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfPorts != nil {
		in, out := &in.NumberOfPorts, &out.NumberOfPorts
		*out = new(float64)
		**out = **in
	}
	if in.PortConfigResetAtDisconnect != nil {
		in, out := &in.PortConfigResetAtDisconnect, &out.PortConfigResetAtDisconnect
		*out = new(bool)
		**out = **in
	}
	if in.PortNameFormat != nil {
		in, out := &in.PortNameFormat, &out.PortNameFormat
		*out = new(string)
		**out = **in
	}
	if in.PortPrivateSecondaryVlanID != nil {
		in, out := &in.PortPrivateSecondaryVlanID, &out.PortPrivateSecondaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.SecurityPolicyOverrideAllowed != nil {
		in, out := &in.SecurityPolicyOverrideAllowed, &out.SecurityPolicyOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ShapingOverrideAllowed != nil {
		in, out := &in.ShapingOverrideAllowed, &out.ShapingOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.StandbyUplinks != nil {
		in, out := &in.StandbyUplinks, &out.StandbyUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.TrafficFilterOverrideAllowed != nil {
		in, out := &in.TrafficFilterOverrideAllowed, &out.TrafficFilterOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.TxUplink != nil {
		in, out := &in.TxUplink, &out.TxUplink
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UplinkTeamingOverrideAllowed != nil {
		in, out := &in.UplinkTeamingOverrideAllowed, &out.UplinkTeamingOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
	if in.VlanOverrideAllowed != nil {
		in, out := &in.VlanOverrideAllowed, &out.VlanOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VlanRange != nil {
		in, out := &in.VlanRange, &out.VlanRange
		*out = make([]VlanRangeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroupInitParameters.
func (in *VSphereDistributedPortGroupInitParameters) DeepCopy() *VSphereDistributedPortGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroupList) DeepCopyInto(out *VSphereDistributedPortGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereDistributedPortGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroupList.
func (in *VSphereDistributedPortGroupList) DeepCopy() *VSphereDistributedPortGroupList {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDistributedPortGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroupObservation) DeepCopyInto(out *VSphereDistributedPortGroupObservation) {
	*out = *in
	if in.ActiveUplinks != nil {
		in, out := &in.ActiveUplinks, &out.ActiveUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.AutoExpand != nil {
		in, out := &in.AutoExpand, &out.AutoExpand
		*out = new(bool)
		**out = **in
	}
	if in.BlockAllPorts != nil {
		in, out := &in.BlockAllPorts, &out.BlockAllPorts
		*out = new(bool)
		**out = **in
	}
	if in.BlockOverrideAllowed != nil {
		in, out := &in.BlockOverrideAllowed, &out.BlockOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.ConfigVersion != nil {
		in, out := &in.ConfigVersion, &out.ConfigVersion
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectpathGen2Allowed != nil {
		in, out := &in.DirectpathGen2Allowed, &out.DirectpathGen2Allowed
		*out = new(bool)
		**out = **in
	}
	if in.DistributedVirtualSwitchUUID != nil {
		in, out := &in.DistributedVirtualSwitchUUID, &out.DistributedVirtualSwitchUUID
		*out = new(string)
		**out = **in
	}
	if in.EgressShapingAverageBandwidth != nil {
		in, out := &in.EgressShapingAverageBandwidth, &out.EgressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingBurstSize != nil {
		in, out := &in.EgressShapingBurstSize, &out.EgressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingEnabled != nil {
		in, out := &in.EgressShapingEnabled, &out.EgressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingPeakBandwidth != nil {
		in, out := &in.EgressShapingPeakBandwidth, &out.EgressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IngressShapingAverageBandwidth != nil {
		in, out := &in.IngressShapingAverageBandwidth, &out.IngressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingBurstSize != nil {
		in, out := &in.IngressShapingBurstSize, &out.IngressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingEnabled != nil {
		in, out := &in.IngressShapingEnabled, &out.IngressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingPeakBandwidth != nil {
		in, out := &in.IngressShapingPeakBandwidth, &out.IngressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.LacpEnabled != nil {
		in, out := &in.LacpEnabled, &out.LacpEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LacpMode != nil {
		in, out := &in.LacpMode, &out.LacpMode
		*out = new(string)
		**out = **in
	}
	if in.LivePortMovingAllowed != nil {
		in, out := &in.LivePortMovingAllowed, &out.LivePortMovingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetflowEnabled != nil {
		in, out := &in.NetflowEnabled, &out.NetflowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetflowOverrideAllowed != nil {
		in, out := &in.NetflowOverrideAllowed, &out.NetflowOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.NetworkResourcePoolKey != nil {
		in, out := &in.NetworkResourcePoolKey, &out.NetworkResourcePoolKey
		*out = new(string)
		**out = **in
	}
	if in.NetworkResourcePoolOverrideAllowed != nil {
		in, out := &in.NetworkResourcePoolOverrideAllowed, &out.NetworkResourcePoolOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfPorts != nil {
		in, out := &in.NumberOfPorts, &out.NumberOfPorts
		*out = new(float64)
		**out = **in
	}
	if in.PortConfigResetAtDisconnect != nil {
		in, out := &in.PortConfigResetAtDisconnect, &out.PortConfigResetAtDisconnect
		*out = new(bool)
		**out = **in
	}
	if in.PortNameFormat != nil {
		in, out := &in.PortNameFormat, &out.PortNameFormat
		*out = new(string)
		**out = **in
	}
	if in.PortPrivateSecondaryVlanID != nil {
		in, out := &in.PortPrivateSecondaryVlanID, &out.PortPrivateSecondaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.SecurityPolicyOverrideAllowed != nil {
		in, out := &in.SecurityPolicyOverrideAllowed, &out.SecurityPolicyOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ShapingOverrideAllowed != nil {
		in, out := &in.ShapingOverrideAllowed, &out.ShapingOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.StandbyUplinks != nil {
		in, out := &in.StandbyUplinks, &out.StandbyUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.TrafficFilterOverrideAllowed != nil {
		in, out := &in.TrafficFilterOverrideAllowed, &out.TrafficFilterOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.TxUplink != nil {
		in, out := &in.TxUplink, &out.TxUplink
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UplinkTeamingOverrideAllowed != nil {
		in, out := &in.UplinkTeamingOverrideAllowed, &out.UplinkTeamingOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
	if in.VlanOverrideAllowed != nil {
		in, out := &in.VlanOverrideAllowed, &out.VlanOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VlanRange != nil {
		in, out := &in.VlanRange, &out.VlanRange
		*out = make([]VlanRangeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroupObservation.
func (in *VSphereDistributedPortGroupObservation) DeepCopy() *VSphereDistributedPortGroupObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroupParameters) DeepCopyInto(out *VSphereDistributedPortGroupParameters) {
	*out = *in
	if in.ActiveUplinks != nil {
		in, out := &in.ActiveUplinks, &out.ActiveUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.AutoExpand != nil {
		in, out := &in.AutoExpand, &out.AutoExpand
		*out = new(bool)
		**out = **in
	}
	if in.BlockAllPorts != nil {
		in, out := &in.BlockAllPorts, &out.BlockAllPorts
		*out = new(bool)
		**out = **in
	}
	if in.BlockOverrideAllowed != nil {
		in, out := &in.BlockOverrideAllowed, &out.BlockOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectpathGen2Allowed != nil {
		in, out := &in.DirectpathGen2Allowed, &out.DirectpathGen2Allowed
		*out = new(bool)
		**out = **in
	}
	if in.DistributedVirtualSwitchUUID != nil {
		in, out := &in.DistributedVirtualSwitchUUID, &out.DistributedVirtualSwitchUUID
		*out = new(string)
		**out = **in
	}
	if in.EgressShapingAverageBandwidth != nil {
		in, out := &in.EgressShapingAverageBandwidth, &out.EgressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingBurstSize != nil {
		in, out := &in.EgressShapingBurstSize, &out.EgressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingEnabled != nil {
		in, out := &in.EgressShapingEnabled, &out.EgressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingPeakBandwidth != nil {
		in, out := &in.EgressShapingPeakBandwidth, &out.EgressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingAverageBandwidth != nil {
		in, out := &in.IngressShapingAverageBandwidth, &out.IngressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingBurstSize != nil {
		in, out := &in.IngressShapingBurstSize, &out.IngressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingEnabled != nil {
		in, out := &in.IngressShapingEnabled, &out.IngressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingPeakBandwidth != nil {
		in, out := &in.IngressShapingPeakBandwidth, &out.IngressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.LacpEnabled != nil {
		in, out := &in.LacpEnabled, &out.LacpEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LacpMode != nil {
		in, out := &in.LacpMode, &out.LacpMode
		*out = new(string)
		**out = **in
	}
	if in.LivePortMovingAllowed != nil {
		in, out := &in.LivePortMovingAllowed, &out.LivePortMovingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetflowEnabled != nil {
		in, out := &in.NetflowEnabled, &out.NetflowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetflowOverrideAllowed != nil {
		in, out := &in.NetflowOverrideAllowed, &out.NetflowOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.NetworkResourcePoolKey != nil {
		in, out := &in.NetworkResourcePoolKey, &out.NetworkResourcePoolKey
		*out = new(string)
		**out = **in
	}
	if in.NetworkResourcePoolOverrideAllowed != nil {
		in, out := &in.NetworkResourcePoolOverrideAllowed, &out.NetworkResourcePoolOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfPorts != nil {
		in, out := &in.NumberOfPorts, &out.NumberOfPorts
		*out = new(float64)
		**out = **in
	}
	if in.PortConfigResetAtDisconnect != nil {
		in, out := &in.PortConfigResetAtDisconnect, &out.PortConfigResetAtDisconnect
		*out = new(bool)
		**out = **in
	}
	if in.PortNameFormat != nil {
		in, out := &in.PortNameFormat, &out.PortNameFormat
		*out = new(string)
		**out = **in
	}
	if in.PortPrivateSecondaryVlanID != nil {
		in, out := &in.PortPrivateSecondaryVlanID, &out.PortPrivateSecondaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.SecurityPolicyOverrideAllowed != nil {
		in, out := &in.SecurityPolicyOverrideAllowed, &out.SecurityPolicyOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.ShapingOverrideAllowed != nil {
		in, out := &in.ShapingOverrideAllowed, &out.ShapingOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.StandbyUplinks != nil {
		in, out := &in.StandbyUplinks, &out.StandbyUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.TrafficFilterOverrideAllowed != nil {
		in, out := &in.TrafficFilterOverrideAllowed, &out.TrafficFilterOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.TxUplink != nil {
		in, out := &in.TxUplink, &out.TxUplink
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UplinkTeamingOverrideAllowed != nil {
		in, out := &in.UplinkTeamingOverrideAllowed, &out.UplinkTeamingOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
	if in.VlanOverrideAllowed != nil {
		in, out := &in.VlanOverrideAllowed, &out.VlanOverrideAllowed
		*out = new(bool)
		**out = **in
	}
	if in.VlanRange != nil {
		in, out := &in.VlanRange, &out.VlanRange
		*out = make([]VlanRangeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroupParameters.
func (in *VSphereDistributedPortGroupParameters) DeepCopy() *VSphereDistributedPortGroupParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroupSpec) DeepCopyInto(out *VSphereDistributedPortGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroupSpec.
func (in *VSphereDistributedPortGroupSpec) DeepCopy() *VSphereDistributedPortGroupSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedPortGroupStatus) DeepCopyInto(out *VSphereDistributedPortGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedPortGroupStatus.
func (in *VSphereDistributedPortGroupStatus) DeepCopy() *VSphereDistributedPortGroupStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedPortGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitch) DeepCopyInto(out *VSphereDistributedVirtualSwitch) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitch.
func (in *VSphereDistributedVirtualSwitch) DeepCopy() *VSphereDistributedVirtualSwitch {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDistributedVirtualSwitch) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchInitParameters) DeepCopyInto(out *VSphereDistributedVirtualSwitchInitParameters) {
	*out = *in
	if in.ActiveUplinks != nil {
		in, out := &in.ActiveUplinks, &out.ActiveUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.BackupnfcMaximumMbit != nil {
		in, out := &in.BackupnfcMaximumMbit, &out.BackupnfcMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcReservationMbit != nil {
		in, out := &in.BackupnfcReservationMbit, &out.BackupnfcReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcShareCount != nil {
		in, out := &in.BackupnfcShareCount, &out.BackupnfcShareCount
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcShareLevel != nil {
		in, out := &in.BackupnfcShareLevel, &out.BackupnfcShareLevel
		*out = new(string)
		**out = **in
	}
	if in.BlockAllPorts != nil {
		in, out := &in.BlockAllPorts, &out.BlockAllPorts
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.ContactDetail != nil {
		in, out := &in.ContactDetail, &out.ContactDetail
		*out = new(string)
		**out = **in
	}
	if in.ContactName != nil {
		in, out := &in.ContactName, &out.ContactName
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectpathGen2Allowed != nil {
		in, out := &in.DirectpathGen2Allowed, &out.DirectpathGen2Allowed
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingAverageBandwidth != nil {
		in, out := &in.EgressShapingAverageBandwidth, &out.EgressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingBurstSize != nil {
		in, out := &in.EgressShapingBurstSize, &out.EgressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingEnabled != nil {
		in, out := &in.EgressShapingEnabled, &out.EgressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingPeakBandwidth != nil {
		in, out := &in.EgressShapingPeakBandwidth, &out.EgressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.FaulttoleranceMaximumMbit != nil {
		in, out := &in.FaulttoleranceMaximumMbit, &out.FaulttoleranceMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceReservationMbit != nil {
		in, out := &in.FaulttoleranceReservationMbit, &out.FaulttoleranceReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceShareCount != nil {
		in, out := &in.FaulttoleranceShareCount, &out.FaulttoleranceShareCount
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceShareLevel != nil {
		in, out := &in.FaulttoleranceShareLevel, &out.FaulttoleranceShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.HbrMaximumMbit != nil {
		in, out := &in.HbrMaximumMbit, &out.HbrMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.HbrReservationMbit != nil {
		in, out := &in.HbrReservationMbit, &out.HbrReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.HbrShareCount != nil {
		in, out := &in.HbrShareCount, &out.HbrShareCount
		*out = new(float64)
		**out = **in
	}
	if in.HbrShareLevel != nil {
		in, out := &in.HbrShareLevel, &out.HbrShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.ISCSIMaximumMbit != nil {
		in, out := &in.ISCSIMaximumMbit, &out.ISCSIMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIReservationMbit != nil {
		in, out := &in.ISCSIReservationMbit, &out.ISCSIReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIShareCount != nil {
		in, out := &in.ISCSIShareCount, &out.ISCSIShareCount
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIShareLevel != nil {
		in, out := &in.ISCSIShareLevel, &out.ISCSIShareLevel
		*out = new(string)
		**out = **in
	}
	if in.IgnoreOtherPvlanMappings != nil {
		in, out := &in.IgnoreOtherPvlanMappings, &out.IgnoreOtherPvlanMappings
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingAverageBandwidth != nil {
		in, out := &in.IngressShapingAverageBandwidth, &out.IngressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingBurstSize != nil {
		in, out := &in.IngressShapingBurstSize, &out.IngressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingEnabled != nil {
		in, out := &in.IngressShapingEnabled, &out.IngressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingPeakBandwidth != nil {
		in, out := &in.IngressShapingPeakBandwidth, &out.IngressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.LacpAPIVersion != nil {
		in, out := &in.LacpAPIVersion, &out.LacpAPIVersion
		*out = new(string)
		**out = **in
	}
	if in.LacpEnabled != nil {
		in, out := &in.LacpEnabled, &out.LacpEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LacpMode != nil {
		in, out := &in.LacpMode, &out.LacpMode
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryOperation != nil {
		in, out := &in.LinkDiscoveryOperation, &out.LinkDiscoveryOperation
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryProtocol != nil {
		in, out := &in.LinkDiscoveryProtocol, &out.LinkDiscoveryProtocol
		*out = new(string)
		**out = **in
	}
	if in.ManagementMaximumMbit != nil {
		in, out := &in.ManagementMaximumMbit, &out.ManagementMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.ManagementReservationMbit != nil {
		in, out := &in.ManagementReservationMbit, &out.ManagementReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.ManagementShareCount != nil {
		in, out := &in.ManagementShareCount, &out.ManagementShareCount
		*out = new(float64)
		**out = **in
	}
	if in.ManagementShareLevel != nil {
		in, out := &in.ManagementShareLevel, &out.ManagementShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxMtu != nil {
		in, out := &in.MaxMtu, &out.MaxMtu
		*out = new(float64)
		**out = **in
	}
	if in.MulticastFilteringMode != nil {
		in, out := &in.MulticastFilteringMode, &out.MulticastFilteringMode
		*out = new(string)
		**out = **in
	}
	if in.NFSMaximumMbit != nil {
		in, out := &in.NFSMaximumMbit, &out.NFSMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.NFSReservationMbit != nil {
		in, out := &in.NFSReservationMbit, &out.NFSReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.NFSShareCount != nil {
		in, out := &in.NFSShareCount, &out.NFSShareCount
		*out = new(float64)
		**out = **in
	}
	if in.NFSShareLevel != nil {
		in, out := &in.NFSShareLevel, &out.NFSShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetflowActiveFlowTimeout != nil {
		in, out := &in.NetflowActiveFlowTimeout, &out.NetflowActiveFlowTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetflowCollectorIPAddress != nil {
		in, out := &in.NetflowCollectorIPAddress, &out.NetflowCollectorIPAddress
		*out = new(string)
		**out = **in
	}
	if in.NetflowCollectorPort != nil {
		in, out := &in.NetflowCollectorPort, &out.NetflowCollectorPort
		*out = new(float64)
		**out = **in
	}
	if in.NetflowEnabled != nil {
		in, out := &in.NetflowEnabled, &out.NetflowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetflowIdleFlowTimeout != nil {
		in, out := &in.NetflowIdleFlowTimeout, &out.NetflowIdleFlowTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetflowInternalFlowsOnly != nil {
		in, out := &in.NetflowInternalFlowsOnly, &out.NetflowInternalFlowsOnly
		*out = new(bool)
		**out = **in
	}
	if in.NetflowObservationDomainID != nil {
		in, out := &in.NetflowObservationDomainID, &out.NetflowObservationDomainID
		*out = new(float64)
		**out = **in
	}
	if in.NetflowSamplingRate != nil {
		in, out := &in.NetflowSamplingRate, &out.NetflowSamplingRate
		*out = new(float64)
		**out = **in
	}
	if in.NetworkResourceControlEnabled != nil {
		in, out := &in.NetworkResourceControlEnabled, &out.NetworkResourceControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetworkResourceControlVersion != nil {
		in, out := &in.NetworkResourceControlVersion, &out.NetworkResourceControlVersion
		*out = new(string)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.PortPrivateSecondaryVlanID != nil {
		in, out := &in.PortPrivateSecondaryVlanID, &out.PortPrivateSecondaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.PvlanMapping != nil {
		in, out := &in.PvlanMapping, &out.PvlanMapping
		*out = make([]PvlanMappingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StandbyUplinks != nil {
		in, out := &in.StandbyUplinks, &out.StandbyUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.TxUplink != nil {
		in, out := &in.TxUplink, &out.TxUplink
		*out = new(bool)
		**out = **in
	}
	if in.Uplinks != nil {
		in, out := &in.Uplinks, &out.Uplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VdpMaximumMbit != nil {
		in, out := &in.VdpMaximumMbit, &out.VdpMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VdpReservationMbit != nil {
		in, out := &in.VdpReservationMbit, &out.VdpReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VdpShareCount != nil {
		in, out := &in.VdpShareCount, &out.VdpShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VdpShareLevel != nil {
		in, out := &in.VdpShareLevel, &out.VdpShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VirtualmachineMaximumMbit != nil {
		in, out := &in.VirtualmachineMaximumMbit, &out.VirtualmachineMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineReservationMbit != nil {
		in, out := &in.VirtualmachineReservationMbit, &out.VirtualmachineReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineShareCount != nil {
		in, out := &in.VirtualmachineShareCount, &out.VirtualmachineShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineShareLevel != nil {
		in, out := &in.VirtualmachineShareLevel, &out.VirtualmachineShareLevel
		*out = new(string)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
	if in.VlanRange != nil {
		in, out := &in.VlanRange, &out.VlanRange
		*out = make([]VSphereDistributedVirtualSwitchVlanRangeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VmotionMaximumMbit != nil {
		in, out := &in.VmotionMaximumMbit, &out.VmotionMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VmotionReservationMbit != nil {
		in, out := &in.VmotionReservationMbit, &out.VmotionReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VmotionShareCount != nil {
		in, out := &in.VmotionShareCount, &out.VmotionShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VmotionShareLevel != nil {
		in, out := &in.VmotionShareLevel, &out.VmotionShareLevel
		*out = new(string)
		**out = **in
	}
	if in.VsanMaximumMbit != nil {
		in, out := &in.VsanMaximumMbit, &out.VsanMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VsanReservationMbit != nil {
		in, out := &in.VsanReservationMbit, &out.VsanReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VsanShareCount != nil {
		in, out := &in.VsanShareCount, &out.VsanShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VsanShareLevel != nil {
		in, out := &in.VsanShareLevel, &out.VsanShareLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchInitParameters.
func (in *VSphereDistributedVirtualSwitchInitParameters) DeepCopy() *VSphereDistributedVirtualSwitchInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchList) DeepCopyInto(out *VSphereDistributedVirtualSwitchList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereDistributedVirtualSwitch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchList.
func (in *VSphereDistributedVirtualSwitchList) DeepCopy() *VSphereDistributedVirtualSwitchList {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDistributedVirtualSwitchList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchObservation) DeepCopyInto(out *VSphereDistributedVirtualSwitchObservation) {
	*out = *in
	if in.ActiveUplinks != nil {
		in, out := &in.ActiveUplinks, &out.ActiveUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.BackupnfcMaximumMbit != nil {
		in, out := &in.BackupnfcMaximumMbit, &out.BackupnfcMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcReservationMbit != nil {
		in, out := &in.BackupnfcReservationMbit, &out.BackupnfcReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcShareCount != nil {
		in, out := &in.BackupnfcShareCount, &out.BackupnfcShareCount
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcShareLevel != nil {
		in, out := &in.BackupnfcShareLevel, &out.BackupnfcShareLevel
		*out = new(string)
		**out = **in
	}
	if in.BlockAllPorts != nil {
		in, out := &in.BlockAllPorts, &out.BlockAllPorts
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.ConfigVersion != nil {
		in, out := &in.ConfigVersion, &out.ConfigVersion
		*out = new(string)
		**out = **in
	}
	if in.ContactDetail != nil {
		in, out := &in.ContactDetail, &out.ContactDetail
		*out = new(string)
		**out = **in
	}
	if in.ContactName != nil {
		in, out := &in.ContactName, &out.ContactName
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectpathGen2Allowed != nil {
		in, out := &in.DirectpathGen2Allowed, &out.DirectpathGen2Allowed
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingAverageBandwidth != nil {
		in, out := &in.EgressShapingAverageBandwidth, &out.EgressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingBurstSize != nil {
		in, out := &in.EgressShapingBurstSize, &out.EgressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingEnabled != nil {
		in, out := &in.EgressShapingEnabled, &out.EgressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingPeakBandwidth != nil {
		in, out := &in.EgressShapingPeakBandwidth, &out.EgressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.FaulttoleranceMaximumMbit != nil {
		in, out := &in.FaulttoleranceMaximumMbit, &out.FaulttoleranceMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceReservationMbit != nil {
		in, out := &in.FaulttoleranceReservationMbit, &out.FaulttoleranceReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceShareCount != nil {
		in, out := &in.FaulttoleranceShareCount, &out.FaulttoleranceShareCount
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceShareLevel != nil {
		in, out := &in.FaulttoleranceShareLevel, &out.FaulttoleranceShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.HbrMaximumMbit != nil {
		in, out := &in.HbrMaximumMbit, &out.HbrMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.HbrReservationMbit != nil {
		in, out := &in.HbrReservationMbit, &out.HbrReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.HbrShareCount != nil {
		in, out := &in.HbrShareCount, &out.HbrShareCount
		*out = new(float64)
		**out = **in
	}
	if in.HbrShareLevel != nil {
		in, out := &in.HbrShareLevel, &out.HbrShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.ISCSIMaximumMbit != nil {
		in, out := &in.ISCSIMaximumMbit, &out.ISCSIMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIReservationMbit != nil {
		in, out := &in.ISCSIReservationMbit, &out.ISCSIReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIShareCount != nil {
		in, out := &in.ISCSIShareCount, &out.ISCSIShareCount
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIShareLevel != nil {
		in, out := &in.ISCSIShareLevel, &out.ISCSIShareLevel
		*out = new(string)
		**out = **in
	}
	if in.IgnoreOtherPvlanMappings != nil {
		in, out := &in.IgnoreOtherPvlanMappings, &out.IgnoreOtherPvlanMappings
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingAverageBandwidth != nil {
		in, out := &in.IngressShapingAverageBandwidth, &out.IngressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingBurstSize != nil {
		in, out := &in.IngressShapingBurstSize, &out.IngressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingEnabled != nil {
		in, out := &in.IngressShapingEnabled, &out.IngressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingPeakBandwidth != nil {
		in, out := &in.IngressShapingPeakBandwidth, &out.IngressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.LacpAPIVersion != nil {
		in, out := &in.LacpAPIVersion, &out.LacpAPIVersion
		*out = new(string)
		**out = **in
	}
	if in.LacpEnabled != nil {
		in, out := &in.LacpEnabled, &out.LacpEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LacpMode != nil {
		in, out := &in.LacpMode, &out.LacpMode
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryOperation != nil {
		in, out := &in.LinkDiscoveryOperation, &out.LinkDiscoveryOperation
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryProtocol != nil {
		in, out := &in.LinkDiscoveryProtocol, &out.LinkDiscoveryProtocol
		*out = new(string)
		**out = **in
	}
	if in.ManagementMaximumMbit != nil {
		in, out := &in.ManagementMaximumMbit, &out.ManagementMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.ManagementReservationMbit != nil {
		in, out := &in.ManagementReservationMbit, &out.ManagementReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.ManagementShareCount != nil {
		in, out := &in.ManagementShareCount, &out.ManagementShareCount
		*out = new(float64)
		**out = **in
	}
	if in.ManagementShareLevel != nil {
		in, out := &in.ManagementShareLevel, &out.ManagementShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxMtu != nil {
		in, out := &in.MaxMtu, &out.MaxMtu
		*out = new(float64)
		**out = **in
	}
	if in.MulticastFilteringMode != nil {
		in, out := &in.MulticastFilteringMode, &out.MulticastFilteringMode
		*out = new(string)
		**out = **in
	}
	if in.NFSMaximumMbit != nil {
		in, out := &in.NFSMaximumMbit, &out.NFSMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.NFSReservationMbit != nil {
		in, out := &in.NFSReservationMbit, &out.NFSReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.NFSShareCount != nil {
		in, out := &in.NFSShareCount, &out.NFSShareCount
		*out = new(float64)
		**out = **in
	}
	if in.NFSShareLevel != nil {
		in, out := &in.NFSShareLevel, &out.NFSShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetflowActiveFlowTimeout != nil {
		in, out := &in.NetflowActiveFlowTimeout, &out.NetflowActiveFlowTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetflowCollectorIPAddress != nil {
		in, out := &in.NetflowCollectorIPAddress, &out.NetflowCollectorIPAddress
		*out = new(string)
		**out = **in
	}
	if in.NetflowCollectorPort != nil {
		in, out := &in.NetflowCollectorPort, &out.NetflowCollectorPort
		*out = new(float64)
		**out = **in
	}
	if in.NetflowEnabled != nil {
		in, out := &in.NetflowEnabled, &out.NetflowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetflowIdleFlowTimeout != nil {
		in, out := &in.NetflowIdleFlowTimeout, &out.NetflowIdleFlowTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetflowInternalFlowsOnly != nil {
		in, out := &in.NetflowInternalFlowsOnly, &out.NetflowInternalFlowsOnly
		*out = new(bool)
		**out = **in
	}
	if in.NetflowObservationDomainID != nil {
		in, out := &in.NetflowObservationDomainID, &out.NetflowObservationDomainID
		*out = new(float64)
		**out = **in
	}
	if in.NetflowSamplingRate != nil {
		in, out := &in.NetflowSamplingRate, &out.NetflowSamplingRate
		*out = new(float64)
		**out = **in
	}
	if in.NetworkResourceControlEnabled != nil {
		in, out := &in.NetworkResourceControlEnabled, &out.NetworkResourceControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetworkResourceControlVersion != nil {
		in, out := &in.NetworkResourceControlVersion, &out.NetworkResourceControlVersion
		*out = new(string)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.PortPrivateSecondaryVlanID != nil {
		in, out := &in.PortPrivateSecondaryVlanID, &out.PortPrivateSecondaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.PvlanMapping != nil {
		in, out := &in.PvlanMapping, &out.PvlanMapping
		*out = make([]PvlanMappingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StandbyUplinks != nil {
		in, out := &in.StandbyUplinks, &out.StandbyUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.TxUplink != nil {
		in, out := &in.TxUplink, &out.TxUplink
		*out = new(bool)
		**out = **in
	}
	if in.Uplinks != nil {
		in, out := &in.Uplinks, &out.Uplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VdpMaximumMbit != nil {
		in, out := &in.VdpMaximumMbit, &out.VdpMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VdpReservationMbit != nil {
		in, out := &in.VdpReservationMbit, &out.VdpReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VdpShareCount != nil {
		in, out := &in.VdpShareCount, &out.VdpShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VdpShareLevel != nil {
		in, out := &in.VdpShareLevel, &out.VdpShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VirtualmachineMaximumMbit != nil {
		in, out := &in.VirtualmachineMaximumMbit, &out.VirtualmachineMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineReservationMbit != nil {
		in, out := &in.VirtualmachineReservationMbit, &out.VirtualmachineReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineShareCount != nil {
		in, out := &in.VirtualmachineShareCount, &out.VirtualmachineShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineShareLevel != nil {
		in, out := &in.VirtualmachineShareLevel, &out.VirtualmachineShareLevel
		*out = new(string)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
	if in.VlanRange != nil {
		in, out := &in.VlanRange, &out.VlanRange
		*out = make([]VSphereDistributedVirtualSwitchVlanRangeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VmotionMaximumMbit != nil {
		in, out := &in.VmotionMaximumMbit, &out.VmotionMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VmotionReservationMbit != nil {
		in, out := &in.VmotionReservationMbit, &out.VmotionReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VmotionShareCount != nil {
		in, out := &in.VmotionShareCount, &out.VmotionShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VmotionShareLevel != nil {
		in, out := &in.VmotionShareLevel, &out.VmotionShareLevel
		*out = new(string)
		**out = **in
	}
	if in.VsanMaximumMbit != nil {
		in, out := &in.VsanMaximumMbit, &out.VsanMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VsanReservationMbit != nil {
		in, out := &in.VsanReservationMbit, &out.VsanReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VsanShareCount != nil {
		in, out := &in.VsanShareCount, &out.VsanShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VsanShareLevel != nil {
		in, out := &in.VsanShareLevel, &out.VsanShareLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchObservation.
func (in *VSphereDistributedVirtualSwitchObservation) DeepCopy() *VSphereDistributedVirtualSwitchObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchParameters) DeepCopyInto(out *VSphereDistributedVirtualSwitchParameters) {
	*out = *in
	if in.ActiveUplinks != nil {
		in, out := &in.ActiveUplinks, &out.ActiveUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.BackupnfcMaximumMbit != nil {
		in, out := &in.BackupnfcMaximumMbit, &out.BackupnfcMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcReservationMbit != nil {
		in, out := &in.BackupnfcReservationMbit, &out.BackupnfcReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcShareCount != nil {
		in, out := &in.BackupnfcShareCount, &out.BackupnfcShareCount
		*out = new(float64)
		**out = **in
	}
	if in.BackupnfcShareLevel != nil {
		in, out := &in.BackupnfcShareLevel, &out.BackupnfcShareLevel
		*out = new(string)
		**out = **in
	}
	if in.BlockAllPorts != nil {
		in, out := &in.BlockAllPorts, &out.BlockAllPorts
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.ContactDetail != nil {
		in, out := &in.ContactDetail, &out.ContactDetail
		*out = new(string)
		**out = **in
	}
	if in.ContactName != nil {
		in, out := &in.ContactName, &out.ContactName
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DirectpathGen2Allowed != nil {
		in, out := &in.DirectpathGen2Allowed, &out.DirectpathGen2Allowed
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingAverageBandwidth != nil {
		in, out := &in.EgressShapingAverageBandwidth, &out.EgressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingBurstSize != nil {
		in, out := &in.EgressShapingBurstSize, &out.EgressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.EgressShapingEnabled != nil {
		in, out := &in.EgressShapingEnabled, &out.EgressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EgressShapingPeakBandwidth != nil {
		in, out := &in.EgressShapingPeakBandwidth, &out.EgressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.FaulttoleranceMaximumMbit != nil {
		in, out := &in.FaulttoleranceMaximumMbit, &out.FaulttoleranceMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceReservationMbit != nil {
		in, out := &in.FaulttoleranceReservationMbit, &out.FaulttoleranceReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceShareCount != nil {
		in, out := &in.FaulttoleranceShareCount, &out.FaulttoleranceShareCount
		*out = new(float64)
		**out = **in
	}
	if in.FaulttoleranceShareLevel != nil {
		in, out := &in.FaulttoleranceShareLevel, &out.FaulttoleranceShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.HbrMaximumMbit != nil {
		in, out := &in.HbrMaximumMbit, &out.HbrMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.HbrReservationMbit != nil {
		in, out := &in.HbrReservationMbit, &out.HbrReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.HbrShareCount != nil {
		in, out := &in.HbrShareCount, &out.HbrShareCount
		*out = new(float64)
		**out = **in
	}
	if in.HbrShareLevel != nil {
		in, out := &in.HbrShareLevel, &out.HbrShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.ISCSIMaximumMbit != nil {
		in, out := &in.ISCSIMaximumMbit, &out.ISCSIMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIReservationMbit != nil {
		in, out := &in.ISCSIReservationMbit, &out.ISCSIReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIShareCount != nil {
		in, out := &in.ISCSIShareCount, &out.ISCSIShareCount
		*out = new(float64)
		**out = **in
	}
	if in.ISCSIShareLevel != nil {
		in, out := &in.ISCSIShareLevel, &out.ISCSIShareLevel
		*out = new(string)
		**out = **in
	}
	if in.IgnoreOtherPvlanMappings != nil {
		in, out := &in.IgnoreOtherPvlanMappings, &out.IgnoreOtherPvlanMappings
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingAverageBandwidth != nil {
		in, out := &in.IngressShapingAverageBandwidth, &out.IngressShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingBurstSize != nil {
		in, out := &in.IngressShapingBurstSize, &out.IngressShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.IngressShapingEnabled != nil {
		in, out := &in.IngressShapingEnabled, &out.IngressShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IngressShapingPeakBandwidth != nil {
		in, out := &in.IngressShapingPeakBandwidth, &out.IngressShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.LacpAPIVersion != nil {
		in, out := &in.LacpAPIVersion, &out.LacpAPIVersion
		*out = new(string)
		**out = **in
	}
	if in.LacpEnabled != nil {
		in, out := &in.LacpEnabled, &out.LacpEnabled
		*out = new(bool)
		**out = **in
	}
	if in.LacpMode != nil {
		in, out := &in.LacpMode, &out.LacpMode
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryOperation != nil {
		in, out := &in.LinkDiscoveryOperation, &out.LinkDiscoveryOperation
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryProtocol != nil {
		in, out := &in.LinkDiscoveryProtocol, &out.LinkDiscoveryProtocol
		*out = new(string)
		**out = **in
	}
	if in.ManagementMaximumMbit != nil {
		in, out := &in.ManagementMaximumMbit, &out.ManagementMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.ManagementReservationMbit != nil {
		in, out := &in.ManagementReservationMbit, &out.ManagementReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.ManagementShareCount != nil {
		in, out := &in.ManagementShareCount, &out.ManagementShareCount
		*out = new(float64)
		**out = **in
	}
	if in.ManagementShareLevel != nil {
		in, out := &in.ManagementShareLevel, &out.ManagementShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxMtu != nil {
		in, out := &in.MaxMtu, &out.MaxMtu
		*out = new(float64)
		**out = **in
	}
	if in.MulticastFilteringMode != nil {
		in, out := &in.MulticastFilteringMode, &out.MulticastFilteringMode
		*out = new(string)
		**out = **in
	}
	if in.NFSMaximumMbit != nil {
		in, out := &in.NFSMaximumMbit, &out.NFSMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.NFSReservationMbit != nil {
		in, out := &in.NFSReservationMbit, &out.NFSReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.NFSShareCount != nil {
		in, out := &in.NFSShareCount, &out.NFSShareCount
		*out = new(float64)
		**out = **in
	}
	if in.NFSShareLevel != nil {
		in, out := &in.NFSShareLevel, &out.NFSShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetflowActiveFlowTimeout != nil {
		in, out := &in.NetflowActiveFlowTimeout, &out.NetflowActiveFlowTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetflowCollectorIPAddress != nil {
		in, out := &in.NetflowCollectorIPAddress, &out.NetflowCollectorIPAddress
		*out = new(string)
		**out = **in
	}
	if in.NetflowCollectorPort != nil {
		in, out := &in.NetflowCollectorPort, &out.NetflowCollectorPort
		*out = new(float64)
		**out = **in
	}
	if in.NetflowEnabled != nil {
		in, out := &in.NetflowEnabled, &out.NetflowEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetflowIdleFlowTimeout != nil {
		in, out := &in.NetflowIdleFlowTimeout, &out.NetflowIdleFlowTimeout
		*out = new(float64)
		**out = **in
	}
	if in.NetflowInternalFlowsOnly != nil {
		in, out := &in.NetflowInternalFlowsOnly, &out.NetflowInternalFlowsOnly
		*out = new(bool)
		**out = **in
	}
	if in.NetflowObservationDomainID != nil {
		in, out := &in.NetflowObservationDomainID, &out.NetflowObservationDomainID
		*out = new(float64)
		**out = **in
	}
	if in.NetflowSamplingRate != nil {
		in, out := &in.NetflowSamplingRate, &out.NetflowSamplingRate
		*out = new(float64)
		**out = **in
	}
	if in.NetworkResourceControlEnabled != nil {
		in, out := &in.NetworkResourceControlEnabled, &out.NetworkResourceControlEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetworkResourceControlVersion != nil {
		in, out := &in.NetworkResourceControlVersion, &out.NetworkResourceControlVersion
		*out = new(string)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.PortPrivateSecondaryVlanID != nil {
		in, out := &in.PortPrivateSecondaryVlanID, &out.PortPrivateSecondaryVlanID
		*out = new(float64)
		**out = **in
	}
	if in.PvlanMapping != nil {
		in, out := &in.PvlanMapping, &out.PvlanMapping
		*out = make([]PvlanMappingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StandbyUplinks != nil {
		in, out := &in.StandbyUplinks, &out.StandbyUplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.TxUplink != nil {
		in, out := &in.TxUplink, &out.TxUplink
		*out = new(bool)
		**out = **in
	}
	if in.Uplinks != nil {
		in, out := &in.Uplinks, &out.Uplinks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VdpMaximumMbit != nil {
		in, out := &in.VdpMaximumMbit, &out.VdpMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VdpReservationMbit != nil {
		in, out := &in.VdpReservationMbit, &out.VdpReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VdpShareCount != nil {
		in, out := &in.VdpShareCount, &out.VdpShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VdpShareLevel != nil {
		in, out := &in.VdpShareLevel, &out.VdpShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VirtualmachineMaximumMbit != nil {
		in, out := &in.VirtualmachineMaximumMbit, &out.VirtualmachineMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineReservationMbit != nil {
		in, out := &in.VirtualmachineReservationMbit, &out.VirtualmachineReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineShareCount != nil {
		in, out := &in.VirtualmachineShareCount, &out.VirtualmachineShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VirtualmachineShareLevel != nil {
		in, out := &in.VirtualmachineShareLevel, &out.VirtualmachineShareLevel
		*out = new(string)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
	if in.VlanRange != nil {
		in, out := &in.VlanRange, &out.VlanRange
		*out = make([]VSphereDistributedVirtualSwitchVlanRangeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VmotionMaximumMbit != nil {
		in, out := &in.VmotionMaximumMbit, &out.VmotionMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VmotionReservationMbit != nil {
		in, out := &in.VmotionReservationMbit, &out.VmotionReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VmotionShareCount != nil {
		in, out := &in.VmotionShareCount, &out.VmotionShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VmotionShareLevel != nil {
		in, out := &in.VmotionShareLevel, &out.VmotionShareLevel
		*out = new(string)
		**out = **in
	}
	if in.VsanMaximumMbit != nil {
		in, out := &in.VsanMaximumMbit, &out.VsanMaximumMbit
		*out = new(float64)
		**out = **in
	}
	if in.VsanReservationMbit != nil {
		in, out := &in.VsanReservationMbit, &out.VsanReservationMbit
		*out = new(float64)
		**out = **in
	}
	if in.VsanShareCount != nil {
		in, out := &in.VsanShareCount, &out.VsanShareCount
		*out = new(float64)
		**out = **in
	}
	if in.VsanShareLevel != nil {
		in, out := &in.VsanShareLevel, &out.VsanShareLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchParameters.
func (in *VSphereDistributedVirtualSwitchParameters) DeepCopy() *VSphereDistributedVirtualSwitchParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchSpec) DeepCopyInto(out *VSphereDistributedVirtualSwitchSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchSpec.
func (in *VSphereDistributedVirtualSwitchSpec) DeepCopy() *VSphereDistributedVirtualSwitchSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchStatus) DeepCopyInto(out *VSphereDistributedVirtualSwitchStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchStatus.
func (in *VSphereDistributedVirtualSwitchStatus) DeepCopy() *VSphereDistributedVirtualSwitchStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchVlanRangeInitParameters) DeepCopyInto(out *VSphereDistributedVirtualSwitchVlanRangeInitParameters) {
	*out = *in
	if in.MaxVlan != nil {
		in, out := &in.MaxVlan, &out.MaxVlan
		*out = new(float64)
		**out = **in
	}
	if in.MinVlan != nil {
		in, out := &in.MinVlan, &out.MinVlan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchVlanRangeInitParameters.
func (in *VSphereDistributedVirtualSwitchVlanRangeInitParameters) DeepCopy() *VSphereDistributedVirtualSwitchVlanRangeInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchVlanRangeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchVlanRangeObservation) DeepCopyInto(out *VSphereDistributedVirtualSwitchVlanRangeObservation) {
	*out = *in
	if in.MaxVlan != nil {
		in, out := &in.MaxVlan, &out.MaxVlan
		*out = new(float64)
		**out = **in
	}
	if in.MinVlan != nil {
		in, out := &in.MinVlan, &out.MinVlan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchVlanRangeObservation.
func (in *VSphereDistributedVirtualSwitchVlanRangeObservation) DeepCopy() *VSphereDistributedVirtualSwitchVlanRangeObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchVlanRangeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDistributedVirtualSwitchVlanRangeParameters) DeepCopyInto(out *VSphereDistributedVirtualSwitchVlanRangeParameters) {
	*out = *in
	if in.MaxVlan != nil {
		in, out := &in.MaxVlan, &out.MaxVlan
		*out = new(float64)
		**out = **in
	}
	if in.MinVlan != nil {
		in, out := &in.MinVlan, &out.MinVlan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDistributedVirtualSwitchVlanRangeParameters.
func (in *VSphereDistributedVirtualSwitchVlanRangeParameters) DeepCopy() *VSphereDistributedVirtualSwitchVlanRangeParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDistributedVirtualSwitchVlanRangeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroup) DeepCopyInto(out *VSphereHostPortGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroup.
func (in *VSphereHostPortGroup) DeepCopy() *VSphereHostPortGroup {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHostPortGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroupInitParameters) DeepCopyInto(out *VSphereHostPortGroupInitParameters) {
	*out = *in
	if in.ActiveNics != nil {
		in, out := &in.ActiveNics, &out.ActiveNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.ShapingAverageBandwidth != nil {
		in, out := &in.ShapingAverageBandwidth, &out.ShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.ShapingBurstSize != nil {
		in, out := &in.ShapingBurstSize, &out.ShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.ShapingEnabled != nil {
		in, out := &in.ShapingEnabled, &out.ShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ShapingPeakBandwidth != nil {
		in, out := &in.ShapingPeakBandwidth, &out.ShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.StandbyNics != nil {
		in, out := &in.StandbyNics, &out.StandbyNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.VirtualSwitchName != nil {
		in, out := &in.VirtualSwitchName, &out.VirtualSwitchName
		*out = new(string)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroupInitParameters.
func (in *VSphereHostPortGroupInitParameters) DeepCopy() *VSphereHostPortGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroupList) DeepCopyInto(out *VSphereHostPortGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereHostPortGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroupList.
func (in *VSphereHostPortGroupList) DeepCopy() *VSphereHostPortGroupList {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHostPortGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroupObservation) DeepCopyInto(out *VSphereHostPortGroupObservation) {
	*out = *in
	if in.ActiveNics != nil {
		in, out := &in.ActiveNics, &out.ActiveNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.ComputedPolicy != nil {
		in, out := &in.ComputedPolicy, &out.ComputedPolicy
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]PortsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ShapingAverageBandwidth != nil {
		in, out := &in.ShapingAverageBandwidth, &out.ShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.ShapingBurstSize != nil {
		in, out := &in.ShapingBurstSize, &out.ShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.ShapingEnabled != nil {
		in, out := &in.ShapingEnabled, &out.ShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ShapingPeakBandwidth != nil {
		in, out := &in.ShapingPeakBandwidth, &out.ShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.StandbyNics != nil {
		in, out := &in.StandbyNics, &out.StandbyNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.VirtualSwitchName != nil {
		in, out := &in.VirtualSwitchName, &out.VirtualSwitchName
		*out = new(string)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroupObservation.
func (in *VSphereHostPortGroupObservation) DeepCopy() *VSphereHostPortGroupObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroupParameters) DeepCopyInto(out *VSphereHostPortGroupParameters) {
	*out = *in
	if in.ActiveNics != nil {
		in, out := &in.ActiveNics, &out.ActiveNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.ShapingAverageBandwidth != nil {
		in, out := &in.ShapingAverageBandwidth, &out.ShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.ShapingBurstSize != nil {
		in, out := &in.ShapingBurstSize, &out.ShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.ShapingEnabled != nil {
		in, out := &in.ShapingEnabled, &out.ShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ShapingPeakBandwidth != nil {
		in, out := &in.ShapingPeakBandwidth, &out.ShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.StandbyNics != nil {
		in, out := &in.StandbyNics, &out.StandbyNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
	if in.VirtualSwitchName != nil {
		in, out := &in.VirtualSwitchName, &out.VirtualSwitchName
		*out = new(string)
		**out = **in
	}
	if in.VlanID != nil {
		in, out := &in.VlanID, &out.VlanID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroupParameters.
func (in *VSphereHostPortGroupParameters) DeepCopy() *VSphereHostPortGroupParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroupSpec) DeepCopyInto(out *VSphereHostPortGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroupSpec.
func (in *VSphereHostPortGroupSpec) DeepCopy() *VSphereHostPortGroupSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostPortGroupStatus) DeepCopyInto(out *VSphereHostPortGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostPortGroupStatus.
func (in *VSphereHostPortGroupStatus) DeepCopy() *VSphereHostPortGroupStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereHostPortGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitch) DeepCopyInto(out *VSphereHostVirtualSwitch) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitch.
func (in *VSphereHostVirtualSwitch) DeepCopy() *VSphereHostVirtualSwitch {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHostVirtualSwitch) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitchInitParameters) DeepCopyInto(out *VSphereHostVirtualSwitchInitParameters) {
	*out = *in
	if in.ActiveNics != nil {
		in, out := &in.ActiveNics, &out.ActiveNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.BeaconInterval != nil {
		in, out := &in.BeaconInterval, &out.BeaconInterval
		*out = new(float64)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryOperation != nil {
		in, out := &in.LinkDiscoveryOperation, &out.LinkDiscoveryOperation
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryProtocol != nil {
		in, out := &in.LinkDiscoveryProtocol, &out.LinkDiscoveryProtocol
		*out = new(string)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkAdapters != nil {
		in, out := &in.NetworkAdapters, &out.NetworkAdapters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfPorts != nil {
		in, out := &in.NumberOfPorts, &out.NumberOfPorts
		*out = new(float64)
		**out = **in
	}
	if in.ShapingAverageBandwidth != nil {
		in, out := &in.ShapingAverageBandwidth, &out.ShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.ShapingBurstSize != nil {
		in, out := &in.ShapingBurstSize, &out.ShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.ShapingEnabled != nil {
		in, out := &in.ShapingEnabled, &out.ShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ShapingPeakBandwidth != nil {
		in, out := &in.ShapingPeakBandwidth, &out.ShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.StandbyNics != nil {
		in, out := &in.StandbyNics, &out.StandbyNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitchInitParameters.
func (in *VSphereHostVirtualSwitchInitParameters) DeepCopy() *VSphereHostVirtualSwitchInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitchInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitchList) DeepCopyInto(out *VSphereHostVirtualSwitchList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereHostVirtualSwitch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitchList.
func (in *VSphereHostVirtualSwitchList) DeepCopy() *VSphereHostVirtualSwitchList {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitchList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHostVirtualSwitchList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitchObservation) DeepCopyInto(out *VSphereHostVirtualSwitchObservation) {
	*out = *in
	if in.ActiveNics != nil {
		in, out := &in.ActiveNics, &out.ActiveNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.BeaconInterval != nil {
		in, out := &in.BeaconInterval, &out.BeaconInterval
		*out = new(float64)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryOperation != nil {
		in, out := &in.LinkDiscoveryOperation, &out.LinkDiscoveryOperation
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryProtocol != nil {
		in, out := &in.LinkDiscoveryProtocol, &out.LinkDiscoveryProtocol
		*out = new(string)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkAdapters != nil {
		in, out := &in.NetworkAdapters, &out.NetworkAdapters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfPorts != nil {
		in, out := &in.NumberOfPorts, &out.NumberOfPorts
		*out = new(float64)
		**out = **in
	}
	if in.ShapingAverageBandwidth != nil {
		in, out := &in.ShapingAverageBandwidth, &out.ShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.ShapingBurstSize != nil {
		in, out := &in.ShapingBurstSize, &out.ShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.ShapingEnabled != nil {
		in, out := &in.ShapingEnabled, &out.ShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ShapingPeakBandwidth != nil {
		in, out := &in.ShapingPeakBandwidth, &out.ShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.StandbyNics != nil {
		in, out := &in.StandbyNics, &out.StandbyNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitchObservation.
func (in *VSphereHostVirtualSwitchObservation) DeepCopy() *VSphereHostVirtualSwitchObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitchParameters) DeepCopyInto(out *VSphereHostVirtualSwitchParameters) {
	*out = *in
	if in.ActiveNics != nil {
		in, out := &in.ActiveNics, &out.ActiveNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AllowForgedTransmits != nil {
		in, out := &in.AllowForgedTransmits, &out.AllowForgedTransmits
		*out = new(bool)
		**out = **in
	}
	if in.AllowMacChanges != nil {
		in, out := &in.AllowMacChanges, &out.AllowMacChanges
		*out = new(bool)
		**out = **in
	}
	if in.AllowPromiscuous != nil {
		in, out := &in.AllowPromiscuous, &out.AllowPromiscuous
		*out = new(bool)
		**out = **in
	}
	if in.BeaconInterval != nil {
		in, out := &in.BeaconInterval, &out.BeaconInterval
		*out = new(float64)
		**out = **in
	}
	if in.CheckBeacon != nil {
		in, out := &in.CheckBeacon, &out.CheckBeacon
		*out = new(bool)
		**out = **in
	}
	if in.Failback != nil {
		in, out := &in.Failback, &out.Failback
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryOperation != nil {
		in, out := &in.LinkDiscoveryOperation, &out.LinkDiscoveryOperation
		*out = new(string)
		**out = **in
	}
	if in.LinkDiscoveryProtocol != nil {
		in, out := &in.LinkDiscoveryProtocol, &out.LinkDiscoveryProtocol
		*out = new(string)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkAdapters != nil {
		in, out := &in.NetworkAdapters, &out.NetworkAdapters
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NotifySwitches != nil {
		in, out := &in.NotifySwitches, &out.NotifySwitches
		*out = new(bool)
		**out = **in
	}
	if in.NumberOfPorts != nil {
		in, out := &in.NumberOfPorts, &out.NumberOfPorts
		*out = new(float64)
		**out = **in
	}
	if in.ShapingAverageBandwidth != nil {
		in, out := &in.ShapingAverageBandwidth, &out.ShapingAverageBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.ShapingBurstSize != nil {
		in, out := &in.ShapingBurstSize, &out.ShapingBurstSize
		*out = new(float64)
		**out = **in
	}
	if in.ShapingEnabled != nil {
		in, out := &in.ShapingEnabled, &out.ShapingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ShapingPeakBandwidth != nil {
		in, out := &in.ShapingPeakBandwidth, &out.ShapingPeakBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.StandbyNics != nil {
		in, out := &in.StandbyNics, &out.StandbyNics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TeamingPolicy != nil {
		in, out := &in.TeamingPolicy, &out.TeamingPolicy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitchParameters.
func (in *VSphereHostVirtualSwitchParameters) DeepCopy() *VSphereHostVirtualSwitchParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitchSpec) DeepCopyInto(out *VSphereHostVirtualSwitchSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitchSpec.
func (in *VSphereHostVirtualSwitchSpec) DeepCopy() *VSphereHostVirtualSwitchSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitchSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostVirtualSwitchStatus) DeepCopyInto(out *VSphereHostVirtualSwitchStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostVirtualSwitchStatus.
func (in *VSphereHostVirtualSwitchStatus) DeepCopy() *VSphereHostVirtualSwitchStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereHostVirtualSwitchStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VlanRangeInitParameters) DeepCopyInto(out *VlanRangeInitParameters) {
	*out = *in
	if in.MaxVlan != nil {
		in, out := &in.MaxVlan, &out.MaxVlan
		*out = new(float64)
		**out = **in
	}
	if in.MinVlan != nil {
		in, out := &in.MinVlan, &out.MinVlan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VlanRangeInitParameters.
func (in *VlanRangeInitParameters) DeepCopy() *VlanRangeInitParameters {
	if in == nil {
		return nil
	}
	out := new(VlanRangeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VlanRangeObservation) DeepCopyInto(out *VlanRangeObservation) {
	*out = *in
	if in.MaxVlan != nil {
		in, out := &in.MaxVlan, &out.MaxVlan
		*out = new(float64)
		**out = **in
	}
	if in.MinVlan != nil {
		in, out := &in.MinVlan, &out.MinVlan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VlanRangeObservation.
func (in *VlanRangeObservation) DeepCopy() *VlanRangeObservation {
	if in == nil {
		return nil
	}
	out := new(VlanRangeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VlanRangeParameters) DeepCopyInto(out *VlanRangeParameters) {
	*out = *in
	if in.MaxVlan != nil {
		in, out := &in.MaxVlan, &out.MaxVlan
		*out = new(float64)
		**out = **in
	}
	if in.MinVlan != nil {
		in, out := &in.MinVlan, &out.MinVlan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VlanRangeParameters.
func (in *VlanRangeParameters) DeepCopy() *VlanRangeParameters {
	if in == nil {
		return nil
	}
	out := new(VlanRangeParameters)
	in.DeepCopyInto(out)
	return out
}
