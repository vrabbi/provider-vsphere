// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereVirtualMachineSnapshotInitParameters struct {

	// If set to true, the delta disks involved in this
	// snapshot will be consolidated into the parent when this resource is
	// destroyed.
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	// A description for the snapshot.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set to true, a dump of the internal state of the
	// virtual machine is included in the snapshot.
	Memory *bool `json:"memory,omitempty" tf:"memory,omitempty"`

	// If set to true, and the virtual machine is powered
	// on when the snapshot is taken, VMware Tools is used to quiesce the file
	// system in the virtual machine.
	Quiesce *bool `json:"quiesce,omitempty" tf:"quiesce,omitempty"`

	// If set to true, the entire snapshot subtree
	// is removed when this resource is destroyed.
	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	// The name of the snapshot.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// The virtual machine UUID.
	VirtualMachineUUID *string `json:"virtualMachineUuid,omitempty" tf:"virtual_machine_uuid,omitempty"`
}

type VSphereVirtualMachineSnapshotObservation struct {

	// If set to true, the delta disks involved in this
	// snapshot will be consolidated into the parent when this resource is
	// destroyed.
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	// A description for the snapshot.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If set to true, a dump of the internal state of the
	// virtual machine is included in the snapshot.
	Memory *bool `json:"memory,omitempty" tf:"memory,omitempty"`

	// If set to true, and the virtual machine is powered
	// on when the snapshot is taken, VMware Tools is used to quiesce the file
	// system in the virtual machine.
	Quiesce *bool `json:"quiesce,omitempty" tf:"quiesce,omitempty"`

	// If set to true, the entire snapshot subtree
	// is removed when this resource is destroyed.
	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	// The name of the snapshot.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// The virtual machine UUID.
	VirtualMachineUUID *string `json:"virtualMachineUuid,omitempty" tf:"virtual_machine_uuid,omitempty"`
}

type VSphereVirtualMachineSnapshotParameters struct {

	// If set to true, the delta disks involved in this
	// snapshot will be consolidated into the parent when this resource is
	// destroyed.
	// +kubebuilder:validation:Optional
	Consolidate *bool `json:"consolidate,omitempty" tf:"consolidate,omitempty"`

	// A description for the snapshot.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If set to true, a dump of the internal state of the
	// virtual machine is included in the snapshot.
	// +kubebuilder:validation:Optional
	Memory *bool `json:"memory,omitempty" tf:"memory,omitempty"`

	// If set to true, and the virtual machine is powered
	// on when the snapshot is taken, VMware Tools is used to quiesce the file
	// system in the virtual machine.
	// +kubebuilder:validation:Optional
	Quiesce *bool `json:"quiesce,omitempty" tf:"quiesce,omitempty"`

	// If set to true, the entire snapshot subtree
	// is removed when this resource is destroyed.
	// +kubebuilder:validation:Optional
	RemoveChildren *bool `json:"removeChildren,omitempty" tf:"remove_children,omitempty"`

	// The name of the snapshot.
	// +kubebuilder:validation:Optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// The virtual machine UUID.
	// +kubebuilder:validation:Optional
	VirtualMachineUUID *string `json:"virtualMachineUuid,omitempty" tf:"virtual_machine_uuid,omitempty"`
}

// VSphereVirtualMachineSnapshotSpec defines the desired state of VSphereVirtualMachineSnapshot
type VSphereVirtualMachineSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVirtualMachineSnapshotParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereVirtualMachineSnapshotInitParameters `json:"initProvider,omitempty"`
}

// VSphereVirtualMachineSnapshotStatus defines the observed state of VSphereVirtualMachineSnapshot.
type VSphereVirtualMachineSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVirtualMachineSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereVirtualMachineSnapshot is the Schema for the VSphereVirtualMachineSnapshots API. Provides a VMware vSphere virtual machine snapshot resource. This can be used to create and delete virtual machine snapshots.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVirtualMachineSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memory) || (has(self.initProvider) && has(self.initProvider.memory))",message="spec.forProvider.memory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.quiesce) || (has(self.initProvider) && has(self.initProvider.quiesce))",message="spec.forProvider.quiesce is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.snapshotName) || (has(self.initProvider) && has(self.initProvider.snapshotName))",message="spec.forProvider.snapshotName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualMachineUuid) || (has(self.initProvider) && has(self.initProvider.virtualMachineUuid))",message="spec.forProvider.virtualMachineUuid is a required parameter"
	Spec   VSphereVirtualMachineSnapshotSpec   `json:"spec"`
	Status VSphereVirtualMachineSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVirtualMachineSnapshotList contains a list of VSphereVirtualMachineSnapshots
type VSphereVirtualMachineSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVirtualMachineSnapshot `json:"items"`
}

// Repository type metadata.
var (
	VSphereVirtualMachineSnapshot_Kind             = "VSphereVirtualMachineSnapshot"
	VSphereVirtualMachineSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVirtualMachineSnapshot_Kind}.String()
	VSphereVirtualMachineSnapshot_KindAPIVersion   = VSphereVirtualMachineSnapshot_Kind + "." + CRDGroupVersion.String()
	VSphereVirtualMachineSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVirtualMachineSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVirtualMachineSnapshot{}, &VSphereVirtualMachineSnapshotList{})
}
