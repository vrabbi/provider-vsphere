//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CdromInitParameters) DeepCopyInto(out *CdromInitParameters) {
	*out = *in
	if in.ClientDevice != nil {
		in, out := &in.ClientDevice, &out.ClientDevice
		*out = new(bool)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CdromInitParameters.
func (in *CdromInitParameters) DeepCopy() *CdromInitParameters {
	if in == nil {
		return nil
	}
	out := new(CdromInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CdromObservation) DeepCopyInto(out *CdromObservation) {
	*out = *in
	if in.ClientDevice != nil {
		in, out := &in.ClientDevice, &out.ClientDevice
		*out = new(bool)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.DeviceAddress != nil {
		in, out := &in.DeviceAddress, &out.DeviceAddress
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(float64)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CdromObservation.
func (in *CdromObservation) DeepCopy() *CdromObservation {
	if in == nil {
		return nil
	}
	out := new(CdromObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CdromParameters) DeepCopyInto(out *CdromParameters) {
	*out = *in
	if in.ClientDevice != nil {
		in, out := &in.ClientDevice, &out.ClientDevice
		*out = new(bool)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CdromParameters.
func (in *CdromParameters) DeepCopy() *CdromParameters {
	if in == nil {
		return nil
	}
	out := new(CdromParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloneInitParameters) DeepCopyInto(out *CloneInitParameters) {
	*out = *in
	if in.CustomizationSpec != nil {
		in, out := &in.CustomizationSpec, &out.CustomizationSpec
		*out = make([]CustomizationSpecInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Customize != nil {
		in, out := &in.Customize, &out.Customize
		*out = make([]CustomizeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LinkedClone != nil {
		in, out := &in.LinkedClone, &out.LinkedClone
		*out = new(bool)
		**out = **in
	}
	if in.OvfNetworkMap != nil {
		in, out := &in.OvfNetworkMap, &out.OvfNetworkMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.OvfStorageMap != nil {
		in, out := &in.OvfStorageMap, &out.OvfStorageMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TemplateUUID != nil {
		in, out := &in.TemplateUUID, &out.TemplateUUID
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloneInitParameters.
func (in *CloneInitParameters) DeepCopy() *CloneInitParameters {
	if in == nil {
		return nil
	}
	out := new(CloneInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloneObservation) DeepCopyInto(out *CloneObservation) {
	*out = *in
	if in.CustomizationSpec != nil {
		in, out := &in.CustomizationSpec, &out.CustomizationSpec
		*out = make([]CustomizationSpecObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Customize != nil {
		in, out := &in.Customize, &out.Customize
		*out = make([]CustomizeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LinkedClone != nil {
		in, out := &in.LinkedClone, &out.LinkedClone
		*out = new(bool)
		**out = **in
	}
	if in.OvfNetworkMap != nil {
		in, out := &in.OvfNetworkMap, &out.OvfNetworkMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.OvfStorageMap != nil {
		in, out := &in.OvfStorageMap, &out.OvfStorageMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TemplateUUID != nil {
		in, out := &in.TemplateUUID, &out.TemplateUUID
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloneObservation.
func (in *CloneObservation) DeepCopy() *CloneObservation {
	if in == nil {
		return nil
	}
	out := new(CloneObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloneParameters) DeepCopyInto(out *CloneParameters) {
	*out = *in
	if in.CustomizationSpec != nil {
		in, out := &in.CustomizationSpec, &out.CustomizationSpec
		*out = make([]CustomizationSpecParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Customize != nil {
		in, out := &in.Customize, &out.Customize
		*out = make([]CustomizeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LinkedClone != nil {
		in, out := &in.LinkedClone, &out.LinkedClone
		*out = new(bool)
		**out = **in
	}
	if in.OvfNetworkMap != nil {
		in, out := &in.OvfNetworkMap, &out.OvfNetworkMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.OvfStorageMap != nil {
		in, out := &in.OvfStorageMap, &out.OvfStorageMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TemplateUUID != nil {
		in, out := &in.TemplateUUID, &out.TemplateUUID
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloneParameters.
func (in *CloneParameters) DeepCopy() *CloneParameters {
	if in == nil {
		return nil
	}
	out := new(CloneParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizationSpecInitParameters) DeepCopyInto(out *CustomizationSpecInitParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizationSpecInitParameters.
func (in *CustomizationSpecInitParameters) DeepCopy() *CustomizationSpecInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizationSpecInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizationSpecObservation) DeepCopyInto(out *CustomizationSpecObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizationSpecObservation.
func (in *CustomizationSpecObservation) DeepCopy() *CustomizationSpecObservation {
	if in == nil {
		return nil
	}
	out := new(CustomizationSpecObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizationSpecParameters) DeepCopyInto(out *CustomizationSpecParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizationSpecParameters.
func (in *CustomizationSpecParameters) DeepCopy() *CustomizationSpecParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizationSpecParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeInitParameters) DeepCopyInto(out *CustomizeInitParameters) {
	*out = *in
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSSuffixList != nil {
		in, out := &in.DNSSuffixList, &out.DNSSuffixList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Gateway != nil {
		in, out := &in.IPv4Gateway, &out.IPv4Gateway
		*out = new(string)
		**out = **in
	}
	if in.IPv6Gateway != nil {
		in, out := &in.IPv6Gateway, &out.IPv6Gateway
		*out = new(string)
		**out = **in
	}
	if in.LinuxOptions != nil {
		in, out := &in.LinuxOptions, &out.LinuxOptions
		*out = make([]CustomizeLinuxOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]CustomizeNetworkInterfaceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.WindowsOptions != nil {
		in, out := &in.WindowsOptions, &out.WindowsOptions
		*out = make([]CustomizeWindowsOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsSysprepTextSecretRef != nil {
		in, out := &in.WindowsSysprepTextSecretRef, &out.WindowsSysprepTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeInitParameters.
func (in *CustomizeInitParameters) DeepCopy() *CustomizeInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeLinuxOptionsInitParameters) DeepCopyInto(out *CustomizeLinuxOptionsInitParameters) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HwClockUtc != nil {
		in, out := &in.HwClockUtc, &out.HwClockUtc
		*out = new(bool)
		**out = **in
	}
	if in.ScriptTextSecretRef != nil {
		in, out := &in.ScriptTextSecretRef, &out.ScriptTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeLinuxOptionsInitParameters.
func (in *CustomizeLinuxOptionsInitParameters) DeepCopy() *CustomizeLinuxOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeLinuxOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeLinuxOptionsObservation) DeepCopyInto(out *CustomizeLinuxOptionsObservation) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HwClockUtc != nil {
		in, out := &in.HwClockUtc, &out.HwClockUtc
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeLinuxOptionsObservation.
func (in *CustomizeLinuxOptionsObservation) DeepCopy() *CustomizeLinuxOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(CustomizeLinuxOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeLinuxOptionsParameters) DeepCopyInto(out *CustomizeLinuxOptionsParameters) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HwClockUtc != nil {
		in, out := &in.HwClockUtc, &out.HwClockUtc
		*out = new(bool)
		**out = **in
	}
	if in.ScriptTextSecretRef != nil {
		in, out := &in.ScriptTextSecretRef, &out.ScriptTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeLinuxOptionsParameters.
func (in *CustomizeLinuxOptionsParameters) DeepCopy() *CustomizeLinuxOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeLinuxOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeNetworkInterfaceInitParameters) DeepCopyInto(out *CustomizeNetworkInterfaceInitParameters) {
	*out = *in
	if in.DNSDomain != nil {
		in, out := &in.DNSDomain, &out.DNSDomain
		*out = new(string)
		**out = **in
	}
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.IPv4Netmask != nil {
		in, out := &in.IPv4Netmask, &out.IPv4Netmask
		*out = new(float64)
		**out = **in
	}
	if in.IPv6Address != nil {
		in, out := &in.IPv6Address, &out.IPv6Address
		*out = new(string)
		**out = **in
	}
	if in.IPv6Netmask != nil {
		in, out := &in.IPv6Netmask, &out.IPv6Netmask
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeNetworkInterfaceInitParameters.
func (in *CustomizeNetworkInterfaceInitParameters) DeepCopy() *CustomizeNetworkInterfaceInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeNetworkInterfaceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeNetworkInterfaceObservation) DeepCopyInto(out *CustomizeNetworkInterfaceObservation) {
	*out = *in
	if in.DNSDomain != nil {
		in, out := &in.DNSDomain, &out.DNSDomain
		*out = new(string)
		**out = **in
	}
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.IPv4Netmask != nil {
		in, out := &in.IPv4Netmask, &out.IPv4Netmask
		*out = new(float64)
		**out = **in
	}
	if in.IPv6Address != nil {
		in, out := &in.IPv6Address, &out.IPv6Address
		*out = new(string)
		**out = **in
	}
	if in.IPv6Netmask != nil {
		in, out := &in.IPv6Netmask, &out.IPv6Netmask
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeNetworkInterfaceObservation.
func (in *CustomizeNetworkInterfaceObservation) DeepCopy() *CustomizeNetworkInterfaceObservation {
	if in == nil {
		return nil
	}
	out := new(CustomizeNetworkInterfaceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeNetworkInterfaceParameters) DeepCopyInto(out *CustomizeNetworkInterfaceParameters) {
	*out = *in
	if in.DNSDomain != nil {
		in, out := &in.DNSDomain, &out.DNSDomain
		*out = new(string)
		**out = **in
	}
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.IPv4Netmask != nil {
		in, out := &in.IPv4Netmask, &out.IPv4Netmask
		*out = new(float64)
		**out = **in
	}
	if in.IPv6Address != nil {
		in, out := &in.IPv6Address, &out.IPv6Address
		*out = new(string)
		**out = **in
	}
	if in.IPv6Netmask != nil {
		in, out := &in.IPv6Netmask, &out.IPv6Netmask
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeNetworkInterfaceParameters.
func (in *CustomizeNetworkInterfaceParameters) DeepCopy() *CustomizeNetworkInterfaceParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeNetworkInterfaceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeObservation) DeepCopyInto(out *CustomizeObservation) {
	*out = *in
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSSuffixList != nil {
		in, out := &in.DNSSuffixList, &out.DNSSuffixList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Gateway != nil {
		in, out := &in.IPv4Gateway, &out.IPv4Gateway
		*out = new(string)
		**out = **in
	}
	if in.IPv6Gateway != nil {
		in, out := &in.IPv6Gateway, &out.IPv6Gateway
		*out = new(string)
		**out = **in
	}
	if in.LinuxOptions != nil {
		in, out := &in.LinuxOptions, &out.LinuxOptions
		*out = make([]CustomizeLinuxOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]CustomizeNetworkInterfaceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.WindowsOptions != nil {
		in, out := &in.WindowsOptions, &out.WindowsOptions
		*out = make([]CustomizeWindowsOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeObservation.
func (in *CustomizeObservation) DeepCopy() *CustomizeObservation {
	if in == nil {
		return nil
	}
	out := new(CustomizeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeParameters) DeepCopyInto(out *CustomizeParameters) {
	*out = *in
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSSuffixList != nil {
		in, out := &in.DNSSuffixList, &out.DNSSuffixList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Gateway != nil {
		in, out := &in.IPv4Gateway, &out.IPv4Gateway
		*out = new(string)
		**out = **in
	}
	if in.IPv6Gateway != nil {
		in, out := &in.IPv6Gateway, &out.IPv6Gateway
		*out = new(string)
		**out = **in
	}
	if in.LinuxOptions != nil {
		in, out := &in.LinuxOptions, &out.LinuxOptions
		*out = make([]CustomizeLinuxOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]CustomizeNetworkInterfaceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
	if in.WindowsOptions != nil {
		in, out := &in.WindowsOptions, &out.WindowsOptions
		*out = make([]CustomizeWindowsOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsSysprepTextSecretRef != nil {
		in, out := &in.WindowsSysprepTextSecretRef, &out.WindowsSysprepTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeParameters.
func (in *CustomizeParameters) DeepCopy() *CustomizeParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeWindowsOptionsInitParameters) DeepCopyInto(out *CustomizeWindowsOptionsInitParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AutoLogon != nil {
		in, out := &in.AutoLogon, &out.AutoLogon
		*out = new(bool)
		**out = **in
	}
	if in.AutoLogonCount != nil {
		in, out := &in.AutoLogonCount, &out.AutoLogonCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputerName != nil {
		in, out := &in.ComputerName, &out.ComputerName
		*out = new(string)
		**out = **in
	}
	if in.DomainAdminPasswordSecretRef != nil {
		in, out := &in.DomainAdminPasswordSecretRef, &out.DomainAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.DomainAdminUser != nil {
		in, out := &in.DomainAdminUser, &out.DomainAdminUser
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		*out = new(string)
		**out = **in
	}
	if in.JoinDomain != nil {
		in, out := &in.JoinDomain, &out.JoinDomain
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.ProductKeySecretRef != nil {
		in, out := &in.ProductKeySecretRef, &out.ProductKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.RunOnceCommandList != nil {
		in, out := &in.RunOnceCommandList, &out.RunOnceCommandList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(float64)
		**out = **in
	}
	if in.Workgroup != nil {
		in, out := &in.Workgroup, &out.Workgroup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeWindowsOptionsInitParameters.
func (in *CustomizeWindowsOptionsInitParameters) DeepCopy() *CustomizeWindowsOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeWindowsOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeWindowsOptionsObservation) DeepCopyInto(out *CustomizeWindowsOptionsObservation) {
	*out = *in
	if in.AutoLogon != nil {
		in, out := &in.AutoLogon, &out.AutoLogon
		*out = new(bool)
		**out = **in
	}
	if in.AutoLogonCount != nil {
		in, out := &in.AutoLogonCount, &out.AutoLogonCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputerName != nil {
		in, out := &in.ComputerName, &out.ComputerName
		*out = new(string)
		**out = **in
	}
	if in.DomainAdminUser != nil {
		in, out := &in.DomainAdminUser, &out.DomainAdminUser
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		*out = new(string)
		**out = **in
	}
	if in.JoinDomain != nil {
		in, out := &in.JoinDomain, &out.JoinDomain
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.RunOnceCommandList != nil {
		in, out := &in.RunOnceCommandList, &out.RunOnceCommandList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(float64)
		**out = **in
	}
	if in.Workgroup != nil {
		in, out := &in.Workgroup, &out.Workgroup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeWindowsOptionsObservation.
func (in *CustomizeWindowsOptionsObservation) DeepCopy() *CustomizeWindowsOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(CustomizeWindowsOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomizeWindowsOptionsParameters) DeepCopyInto(out *CustomizeWindowsOptionsParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AutoLogon != nil {
		in, out := &in.AutoLogon, &out.AutoLogon
		*out = new(bool)
		**out = **in
	}
	if in.AutoLogonCount != nil {
		in, out := &in.AutoLogonCount, &out.AutoLogonCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputerName != nil {
		in, out := &in.ComputerName, &out.ComputerName
		*out = new(string)
		**out = **in
	}
	if in.DomainAdminPasswordSecretRef != nil {
		in, out := &in.DomainAdminPasswordSecretRef, &out.DomainAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.DomainAdminUser != nil {
		in, out := &in.DomainAdminUser, &out.DomainAdminUser
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		*out = new(string)
		**out = **in
	}
	if in.JoinDomain != nil {
		in, out := &in.JoinDomain, &out.JoinDomain
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.ProductKeySecretRef != nil {
		in, out := &in.ProductKeySecretRef, &out.ProductKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.RunOnceCommandList != nil {
		in, out := &in.RunOnceCommandList, &out.RunOnceCommandList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(float64)
		**out = **in
	}
	if in.Workgroup != nil {
		in, out := &in.Workgroup, &out.Workgroup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomizeWindowsOptionsParameters.
func (in *CustomizeWindowsOptionsParameters) DeepCopy() *CustomizeWindowsOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(CustomizeWindowsOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskInitParameters) DeepCopyInto(out *DiskInitParameters) {
	*out = *in
	if in.Attach != nil {
		in, out := &in.Attach, &out.Attach
		*out = new(bool)
		**out = **in
	}
	if in.ControllerType != nil {
		in, out := &in.ControllerType, &out.ControllerType
		*out = new(string)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.DiskMode != nil {
		in, out := &in.DiskMode, &out.DiskMode
		*out = new(string)
		**out = **in
	}
	if in.DiskSharing != nil {
		in, out := &in.DiskSharing, &out.DiskSharing
		*out = new(string)
		**out = **in
	}
	if in.EagerlyScrub != nil {
		in, out := &in.EagerlyScrub, &out.EagerlyScrub
		*out = new(bool)
		**out = **in
	}
	if in.IoLimit != nil {
		in, out := &in.IoLimit, &out.IoLimit
		*out = new(float64)
		**out = **in
	}
	if in.IoReservation != nil {
		in, out := &in.IoReservation, &out.IoReservation
		*out = new(float64)
		**out = **in
	}
	if in.IoShareCount != nil {
		in, out := &in.IoShareCount, &out.IoShareCount
		*out = new(float64)
		**out = **in
	}
	if in.IoShareLevel != nil {
		in, out := &in.IoShareLevel, &out.IoShareLevel
		*out = new(string)
		**out = **in
	}
	if in.KeepOnRemove != nil {
		in, out := &in.KeepOnRemove, &out.KeepOnRemove
		*out = new(bool)
		**out = **in
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.StoragePolicyID != nil {
		in, out := &in.StoragePolicyID, &out.StoragePolicyID
		*out = new(string)
		**out = **in
	}
	if in.ThinProvisioned != nil {
		in, out := &in.ThinProvisioned, &out.ThinProvisioned
		*out = new(bool)
		**out = **in
	}
	if in.UnitNumber != nil {
		in, out := &in.UnitNumber, &out.UnitNumber
		*out = new(float64)
		**out = **in
	}
	if in.WriteThrough != nil {
		in, out := &in.WriteThrough, &out.WriteThrough
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskInitParameters.
func (in *DiskInitParameters) DeepCopy() *DiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(DiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskObservation) DeepCopyInto(out *DiskObservation) {
	*out = *in
	if in.Attach != nil {
		in, out := &in.Attach, &out.Attach
		*out = new(bool)
		**out = **in
	}
	if in.ControllerType != nil {
		in, out := &in.ControllerType, &out.ControllerType
		*out = new(string)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.DeviceAddress != nil {
		in, out := &in.DeviceAddress, &out.DeviceAddress
		*out = new(string)
		**out = **in
	}
	if in.DiskMode != nil {
		in, out := &in.DiskMode, &out.DiskMode
		*out = new(string)
		**out = **in
	}
	if in.DiskSharing != nil {
		in, out := &in.DiskSharing, &out.DiskSharing
		*out = new(string)
		**out = **in
	}
	if in.EagerlyScrub != nil {
		in, out := &in.EagerlyScrub, &out.EagerlyScrub
		*out = new(bool)
		**out = **in
	}
	if in.IoLimit != nil {
		in, out := &in.IoLimit, &out.IoLimit
		*out = new(float64)
		**out = **in
	}
	if in.IoReservation != nil {
		in, out := &in.IoReservation, &out.IoReservation
		*out = new(float64)
		**out = **in
	}
	if in.IoShareCount != nil {
		in, out := &in.IoShareCount, &out.IoShareCount
		*out = new(float64)
		**out = **in
	}
	if in.IoShareLevel != nil {
		in, out := &in.IoShareLevel, &out.IoShareLevel
		*out = new(string)
		**out = **in
	}
	if in.KeepOnRemove != nil {
		in, out := &in.KeepOnRemove, &out.KeepOnRemove
		*out = new(bool)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(float64)
		**out = **in
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.StoragePolicyID != nil {
		in, out := &in.StoragePolicyID, &out.StoragePolicyID
		*out = new(string)
		**out = **in
	}
	if in.ThinProvisioned != nil {
		in, out := &in.ThinProvisioned, &out.ThinProvisioned
		*out = new(bool)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.UnitNumber != nil {
		in, out := &in.UnitNumber, &out.UnitNumber
		*out = new(float64)
		**out = **in
	}
	if in.WriteThrough != nil {
		in, out := &in.WriteThrough, &out.WriteThrough
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskObservation.
func (in *DiskObservation) DeepCopy() *DiskObservation {
	if in == nil {
		return nil
	}
	out := new(DiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskParameters) DeepCopyInto(out *DiskParameters) {
	*out = *in
	if in.Attach != nil {
		in, out := &in.Attach, &out.Attach
		*out = new(bool)
		**out = **in
	}
	if in.ControllerType != nil {
		in, out := &in.ControllerType, &out.ControllerType
		*out = new(string)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.DiskMode != nil {
		in, out := &in.DiskMode, &out.DiskMode
		*out = new(string)
		**out = **in
	}
	if in.DiskSharing != nil {
		in, out := &in.DiskSharing, &out.DiskSharing
		*out = new(string)
		**out = **in
	}
	if in.EagerlyScrub != nil {
		in, out := &in.EagerlyScrub, &out.EagerlyScrub
		*out = new(bool)
		**out = **in
	}
	if in.IoLimit != nil {
		in, out := &in.IoLimit, &out.IoLimit
		*out = new(float64)
		**out = **in
	}
	if in.IoReservation != nil {
		in, out := &in.IoReservation, &out.IoReservation
		*out = new(float64)
		**out = **in
	}
	if in.IoShareCount != nil {
		in, out := &in.IoShareCount, &out.IoShareCount
		*out = new(float64)
		**out = **in
	}
	if in.IoShareLevel != nil {
		in, out := &in.IoShareLevel, &out.IoShareLevel
		*out = new(string)
		**out = **in
	}
	if in.KeepOnRemove != nil {
		in, out := &in.KeepOnRemove, &out.KeepOnRemove
		*out = new(bool)
		**out = **in
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		*out = new(string)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.StoragePolicyID != nil {
		in, out := &in.StoragePolicyID, &out.StoragePolicyID
		*out = new(string)
		**out = **in
	}
	if in.ThinProvisioned != nil {
		in, out := &in.ThinProvisioned, &out.ThinProvisioned
		*out = new(bool)
		**out = **in
	}
	if in.UnitNumber != nil {
		in, out := &in.UnitNumber, &out.UnitNumber
		*out = new(float64)
		**out = **in
	}
	if in.WriteThrough != nil {
		in, out := &in.WriteThrough, &out.WriteThrough
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskParameters.
func (in *DiskParameters) DeepCopy() *DiskParameters {
	if in == nil {
		return nil
	}
	out := new(DiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOptionsInitParameters) DeepCopyInto(out *LinuxOptionsInitParameters) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HwClockUtc != nil {
		in, out := &in.HwClockUtc, &out.HwClockUtc
		*out = new(bool)
		**out = **in
	}
	if in.ScriptTextSecretRef != nil {
		in, out := &in.ScriptTextSecretRef, &out.ScriptTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOptionsInitParameters.
func (in *LinuxOptionsInitParameters) DeepCopy() *LinuxOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LinuxOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOptionsObservation) DeepCopyInto(out *LinuxOptionsObservation) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HwClockUtc != nil {
		in, out := &in.HwClockUtc, &out.HwClockUtc
		*out = new(bool)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOptionsObservation.
func (in *LinuxOptionsObservation) DeepCopy() *LinuxOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(LinuxOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinuxOptionsParameters) DeepCopyInto(out *LinuxOptionsParameters) {
	*out = *in
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.HwClockUtc != nil {
		in, out := &in.HwClockUtc, &out.HwClockUtc
		*out = new(bool)
		**out = **in
	}
	if in.ScriptTextSecretRef != nil {
		in, out := &in.ScriptTextSecretRef, &out.ScriptTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinuxOptionsParameters.
func (in *LinuxOptionsParameters) DeepCopy() *LinuxOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(LinuxOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkInterfaceInitParameters) DeepCopyInto(out *NetworkInterfaceInitParameters) {
	*out = *in
	if in.DNSDomain != nil {
		in, out := &in.DNSDomain, &out.DNSDomain
		*out = new(string)
		**out = **in
	}
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.IPv4Netmask != nil {
		in, out := &in.IPv4Netmask, &out.IPv4Netmask
		*out = new(float64)
		**out = **in
	}
	if in.IPv6Address != nil {
		in, out := &in.IPv6Address, &out.IPv6Address
		*out = new(string)
		**out = **in
	}
	if in.IPv6Netmask != nil {
		in, out := &in.IPv6Netmask, &out.IPv6Netmask
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkInterfaceInitParameters.
func (in *NetworkInterfaceInitParameters) DeepCopy() *NetworkInterfaceInitParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkInterfaceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkInterfaceObservation) DeepCopyInto(out *NetworkInterfaceObservation) {
	*out = *in
	if in.DNSDomain != nil {
		in, out := &in.DNSDomain, &out.DNSDomain
		*out = new(string)
		**out = **in
	}
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.IPv4Netmask != nil {
		in, out := &in.IPv4Netmask, &out.IPv4Netmask
		*out = new(float64)
		**out = **in
	}
	if in.IPv6Address != nil {
		in, out := &in.IPv6Address, &out.IPv6Address
		*out = new(string)
		**out = **in
	}
	if in.IPv6Netmask != nil {
		in, out := &in.IPv6Netmask, &out.IPv6Netmask
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkInterfaceObservation.
func (in *NetworkInterfaceObservation) DeepCopy() *NetworkInterfaceObservation {
	if in == nil {
		return nil
	}
	out := new(NetworkInterfaceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetworkInterfaceParameters) DeepCopyInto(out *NetworkInterfaceParameters) {
	*out = *in
	if in.DNSDomain != nil {
		in, out := &in.DNSDomain, &out.DNSDomain
		*out = new(string)
		**out = **in
	}
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Address != nil {
		in, out := &in.IPv4Address, &out.IPv4Address
		*out = new(string)
		**out = **in
	}
	if in.IPv4Netmask != nil {
		in, out := &in.IPv4Netmask, &out.IPv4Netmask
		*out = new(float64)
		**out = **in
	}
	if in.IPv6Address != nil {
		in, out := &in.IPv6Address, &out.IPv6Address
		*out = new(string)
		**out = **in
	}
	if in.IPv6Netmask != nil {
		in, out := &in.IPv6Netmask, &out.IPv6Netmask
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetworkInterfaceParameters.
func (in *NetworkInterfaceParameters) DeepCopy() *NetworkInterfaceParameters {
	if in == nil {
		return nil
	}
	out := new(NetworkInterfaceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OvfDeployInitParameters) DeepCopyInto(out *OvfDeployInitParameters) {
	*out = *in
	if in.AllowUnverifiedSSLCert != nil {
		in, out := &in.AllowUnverifiedSSLCert, &out.AllowUnverifiedSSLCert
		*out = new(bool)
		**out = **in
	}
	if in.DeploymentOption != nil {
		in, out := &in.DeploymentOption, &out.DeploymentOption
		*out = new(string)
		**out = **in
	}
	if in.DiskProvisioning != nil {
		in, out := &in.DiskProvisioning, &out.DiskProvisioning
		*out = new(string)
		**out = **in
	}
	if in.EnableHiddenProperties != nil {
		in, out := &in.EnableHiddenProperties, &out.EnableHiddenProperties
		*out = new(bool)
		**out = **in
	}
	if in.IPAllocationPolicy != nil {
		in, out := &in.IPAllocationPolicy, &out.IPAllocationPolicy
		*out = new(string)
		**out = **in
	}
	if in.IPProtocol != nil {
		in, out := &in.IPProtocol, &out.IPProtocol
		*out = new(string)
		**out = **in
	}
	if in.LocalOvfPath != nil {
		in, out := &in.LocalOvfPath, &out.LocalOvfPath
		*out = new(string)
		**out = **in
	}
	if in.OvfNetworkMap != nil {
		in, out := &in.OvfNetworkMap, &out.OvfNetworkMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RemoteOvfURL != nil {
		in, out := &in.RemoteOvfURL, &out.RemoteOvfURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OvfDeployInitParameters.
func (in *OvfDeployInitParameters) DeepCopy() *OvfDeployInitParameters {
	if in == nil {
		return nil
	}
	out := new(OvfDeployInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OvfDeployObservation) DeepCopyInto(out *OvfDeployObservation) {
	*out = *in
	if in.AllowUnverifiedSSLCert != nil {
		in, out := &in.AllowUnverifiedSSLCert, &out.AllowUnverifiedSSLCert
		*out = new(bool)
		**out = **in
	}
	if in.DeploymentOption != nil {
		in, out := &in.DeploymentOption, &out.DeploymentOption
		*out = new(string)
		**out = **in
	}
	if in.DiskProvisioning != nil {
		in, out := &in.DiskProvisioning, &out.DiskProvisioning
		*out = new(string)
		**out = **in
	}
	if in.EnableHiddenProperties != nil {
		in, out := &in.EnableHiddenProperties, &out.EnableHiddenProperties
		*out = new(bool)
		**out = **in
	}
	if in.IPAllocationPolicy != nil {
		in, out := &in.IPAllocationPolicy, &out.IPAllocationPolicy
		*out = new(string)
		**out = **in
	}
	if in.IPProtocol != nil {
		in, out := &in.IPProtocol, &out.IPProtocol
		*out = new(string)
		**out = **in
	}
	if in.LocalOvfPath != nil {
		in, out := &in.LocalOvfPath, &out.LocalOvfPath
		*out = new(string)
		**out = **in
	}
	if in.OvfNetworkMap != nil {
		in, out := &in.OvfNetworkMap, &out.OvfNetworkMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RemoteOvfURL != nil {
		in, out := &in.RemoteOvfURL, &out.RemoteOvfURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OvfDeployObservation.
func (in *OvfDeployObservation) DeepCopy() *OvfDeployObservation {
	if in == nil {
		return nil
	}
	out := new(OvfDeployObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OvfDeployParameters) DeepCopyInto(out *OvfDeployParameters) {
	*out = *in
	if in.AllowUnverifiedSSLCert != nil {
		in, out := &in.AllowUnverifiedSSLCert, &out.AllowUnverifiedSSLCert
		*out = new(bool)
		**out = **in
	}
	if in.DeploymentOption != nil {
		in, out := &in.DeploymentOption, &out.DeploymentOption
		*out = new(string)
		**out = **in
	}
	if in.DiskProvisioning != nil {
		in, out := &in.DiskProvisioning, &out.DiskProvisioning
		*out = new(string)
		**out = **in
	}
	if in.EnableHiddenProperties != nil {
		in, out := &in.EnableHiddenProperties, &out.EnableHiddenProperties
		*out = new(bool)
		**out = **in
	}
	if in.IPAllocationPolicy != nil {
		in, out := &in.IPAllocationPolicy, &out.IPAllocationPolicy
		*out = new(string)
		**out = **in
	}
	if in.IPProtocol != nil {
		in, out := &in.IPProtocol, &out.IPProtocol
		*out = new(string)
		**out = **in
	}
	if in.LocalOvfPath != nil {
		in, out := &in.LocalOvfPath, &out.LocalOvfPath
		*out = new(string)
		**out = **in
	}
	if in.OvfNetworkMap != nil {
		in, out := &in.OvfNetworkMap, &out.OvfNetworkMap
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.RemoteOvfURL != nil {
		in, out := &in.RemoteOvfURL, &out.RemoteOvfURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OvfDeployParameters.
func (in *OvfDeployParameters) DeepCopy() *OvfDeployParameters {
	if in == nil {
		return nil
	}
	out := new(OvfDeployParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicationInitParameters) DeepCopyInto(out *PublicationInitParameters) {
	*out = *in
	if in.AuthenticationMethod != nil {
		in, out := &in.AuthenticationMethod, &out.AuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Published != nil {
		in, out := &in.Published, &out.Published
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicationInitParameters.
func (in *PublicationInitParameters) DeepCopy() *PublicationInitParameters {
	if in == nil {
		return nil
	}
	out := new(PublicationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicationObservation) DeepCopyInto(out *PublicationObservation) {
	*out = *in
	if in.AuthenticationMethod != nil {
		in, out := &in.AuthenticationMethod, &out.AuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.PublishURL != nil {
		in, out := &in.PublishURL, &out.PublishURL
		*out = new(string)
		**out = **in
	}
	if in.Published != nil {
		in, out := &in.Published, &out.Published
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicationObservation.
func (in *PublicationObservation) DeepCopy() *PublicationObservation {
	if in == nil {
		return nil
	}
	out := new(PublicationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicationParameters) DeepCopyInto(out *PublicationParameters) {
	*out = *in
	if in.AuthenticationMethod != nil {
		in, out := &in.AuthenticationMethod, &out.AuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.Published != nil {
		in, out := &in.Published, &out.Published
		*out = new(bool)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicationParameters.
func (in *PublicationParameters) DeepCopy() *PublicationParameters {
	if in == nil {
		return nil
	}
	out := new(PublicationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecInitParameters) DeepCopyInto(out *SpecInitParameters) {
	*out = *in
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSSuffixList != nil {
		in, out := &in.DNSSuffixList, &out.DNSSuffixList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Gateway != nil {
		in, out := &in.IPv4Gateway, &out.IPv4Gateway
		*out = new(string)
		**out = **in
	}
	if in.IPv6Gateway != nil {
		in, out := &in.IPv6Gateway, &out.IPv6Gateway
		*out = new(string)
		**out = **in
	}
	if in.LinuxOptions != nil {
		in, out := &in.LinuxOptions, &out.LinuxOptions
		*out = make([]LinuxOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]NetworkInterfaceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsOptions != nil {
		in, out := &in.WindowsOptions, &out.WindowsOptions
		*out = make([]WindowsOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsSysprepTextSecretRef != nil {
		in, out := &in.WindowsSysprepTextSecretRef, &out.WindowsSysprepTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecInitParameters.
func (in *SpecInitParameters) DeepCopy() *SpecInitParameters {
	if in == nil {
		return nil
	}
	out := new(SpecInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecObservation) DeepCopyInto(out *SpecObservation) {
	*out = *in
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSSuffixList != nil {
		in, out := &in.DNSSuffixList, &out.DNSSuffixList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Gateway != nil {
		in, out := &in.IPv4Gateway, &out.IPv4Gateway
		*out = new(string)
		**out = **in
	}
	if in.IPv6Gateway != nil {
		in, out := &in.IPv6Gateway, &out.IPv6Gateway
		*out = new(string)
		**out = **in
	}
	if in.LinuxOptions != nil {
		in, out := &in.LinuxOptions, &out.LinuxOptions
		*out = make([]LinuxOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]NetworkInterfaceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsOptions != nil {
		in, out := &in.WindowsOptions, &out.WindowsOptions
		*out = make([]WindowsOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecObservation.
func (in *SpecObservation) DeepCopy() *SpecObservation {
	if in == nil {
		return nil
	}
	out := new(SpecObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpecParameters) DeepCopyInto(out *SpecParameters) {
	*out = *in
	if in.DNSServerList != nil {
		in, out := &in.DNSServerList, &out.DNSServerList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DNSSuffixList != nil {
		in, out := &in.DNSSuffixList, &out.DNSSuffixList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IPv4Gateway != nil {
		in, out := &in.IPv4Gateway, &out.IPv4Gateway
		*out = new(string)
		**out = **in
	}
	if in.IPv6Gateway != nil {
		in, out := &in.IPv6Gateway, &out.IPv6Gateway
		*out = new(string)
		**out = **in
	}
	if in.LinuxOptions != nil {
		in, out := &in.LinuxOptions, &out.LinuxOptions
		*out = make([]LinuxOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]NetworkInterfaceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsOptions != nil {
		in, out := &in.WindowsOptions, &out.WindowsOptions
		*out = make([]WindowsOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WindowsSysprepTextSecretRef != nil {
		in, out := &in.WindowsSysprepTextSecretRef, &out.WindowsSysprepTextSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpecParameters.
func (in *SpecParameters) DeepCopy() *SpecParameters {
	if in == nil {
		return nil
	}
	out := new(SpecParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SubscriptionInitParameters) DeepCopyInto(out *SubscriptionInitParameters) {
	*out = *in
	if in.AuthenticationMethod != nil {
		in, out := &in.AuthenticationMethod, &out.AuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.AutomaticSync != nil {
		in, out := &in.AutomaticSync, &out.AutomaticSync
		*out = new(bool)
		**out = **in
	}
	if in.OnDemand != nil {
		in, out := &in.OnDemand, &out.OnDemand
		*out = new(bool)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionURL != nil {
		in, out := &in.SubscriptionURL, &out.SubscriptionURL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SubscriptionInitParameters.
func (in *SubscriptionInitParameters) DeepCopy() *SubscriptionInitParameters {
	if in == nil {
		return nil
	}
	out := new(SubscriptionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SubscriptionObservation) DeepCopyInto(out *SubscriptionObservation) {
	*out = *in
	if in.AuthenticationMethod != nil {
		in, out := &in.AuthenticationMethod, &out.AuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.AutomaticSync != nil {
		in, out := &in.AutomaticSync, &out.AutomaticSync
		*out = new(bool)
		**out = **in
	}
	if in.OnDemand != nil {
		in, out := &in.OnDemand, &out.OnDemand
		*out = new(bool)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionURL != nil {
		in, out := &in.SubscriptionURL, &out.SubscriptionURL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SubscriptionObservation.
func (in *SubscriptionObservation) DeepCopy() *SubscriptionObservation {
	if in == nil {
		return nil
	}
	out := new(SubscriptionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SubscriptionParameters) DeepCopyInto(out *SubscriptionParameters) {
	*out = *in
	if in.AuthenticationMethod != nil {
		in, out := &in.AuthenticationMethod, &out.AuthenticationMethod
		*out = new(string)
		**out = **in
	}
	if in.AutomaticSync != nil {
		in, out := &in.AutomaticSync, &out.AutomaticSync
		*out = new(bool)
		**out = **in
	}
	if in.OnDemand != nil {
		in, out := &in.OnDemand, &out.OnDemand
		*out = new(bool)
		**out = **in
	}
	if in.Password != nil {
		in, out := &in.Password, &out.Password
		*out = new(string)
		**out = **in
	}
	if in.SubscriptionURL != nil {
		in, out := &in.SubscriptionURL, &out.SubscriptionURL
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SubscriptionParameters.
func (in *SubscriptionParameters) DeepCopy() *SubscriptionParameters {
	if in == nil {
		return nil
	}
	out := new(SubscriptionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibrary) DeepCopyInto(out *VSphereContentLibrary) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibrary.
func (in *VSphereContentLibrary) DeepCopy() *VSphereContentLibrary {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibrary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereContentLibrary) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryInitParameters) DeepCopyInto(out *VSphereContentLibraryInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Publication != nil {
		in, out := &in.Publication, &out.Publication
		*out = make([]PublicationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageBacking != nil {
		in, out := &in.StorageBacking, &out.StorageBacking
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Subscription != nil {
		in, out := &in.Subscription, &out.Subscription
		*out = make([]SubscriptionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryInitParameters.
func (in *VSphereContentLibraryInitParameters) DeepCopy() *VSphereContentLibraryInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItem) DeepCopyInto(out *VSphereContentLibraryItem) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItem.
func (in *VSphereContentLibraryItem) DeepCopy() *VSphereContentLibraryItem {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereContentLibraryItem) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItemInitParameters) DeepCopyInto(out *VSphereContentLibraryItemInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FileURL != nil {
		in, out := &in.FileURL, &out.FileURL
		*out = new(string)
		**out = **in
	}
	if in.LibraryID != nil {
		in, out := &in.LibraryID, &out.LibraryID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SourceUUID != nil {
		in, out := &in.SourceUUID, &out.SourceUUID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItemInitParameters.
func (in *VSphereContentLibraryItemInitParameters) DeepCopy() *VSphereContentLibraryItemInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItemInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItemList) DeepCopyInto(out *VSphereContentLibraryItemList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereContentLibraryItem, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItemList.
func (in *VSphereContentLibraryItemList) DeepCopy() *VSphereContentLibraryItemList {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItemList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereContentLibraryItemList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItemObservation) DeepCopyInto(out *VSphereContentLibraryItemObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FileURL != nil {
		in, out := &in.FileURL, &out.FileURL
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LibraryID != nil {
		in, out := &in.LibraryID, &out.LibraryID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SourceUUID != nil {
		in, out := &in.SourceUUID, &out.SourceUUID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItemObservation.
func (in *VSphereContentLibraryItemObservation) DeepCopy() *VSphereContentLibraryItemObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItemObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItemParameters) DeepCopyInto(out *VSphereContentLibraryItemParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FileURL != nil {
		in, out := &in.FileURL, &out.FileURL
		*out = new(string)
		**out = **in
	}
	if in.LibraryID != nil {
		in, out := &in.LibraryID, &out.LibraryID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SourceUUID != nil {
		in, out := &in.SourceUUID, &out.SourceUUID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItemParameters.
func (in *VSphereContentLibraryItemParameters) DeepCopy() *VSphereContentLibraryItemParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItemParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItemSpec) DeepCopyInto(out *VSphereContentLibraryItemSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItemSpec.
func (in *VSphereContentLibraryItemSpec) DeepCopy() *VSphereContentLibraryItemSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItemSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryItemStatus) DeepCopyInto(out *VSphereContentLibraryItemStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryItemStatus.
func (in *VSphereContentLibraryItemStatus) DeepCopy() *VSphereContentLibraryItemStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryItemStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryList) DeepCopyInto(out *VSphereContentLibraryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereContentLibrary, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryList.
func (in *VSphereContentLibraryList) DeepCopy() *VSphereContentLibraryList {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereContentLibraryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryObservation) DeepCopyInto(out *VSphereContentLibraryObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Publication != nil {
		in, out := &in.Publication, &out.Publication
		*out = make([]PublicationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageBacking != nil {
		in, out := &in.StorageBacking, &out.StorageBacking
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Subscription != nil {
		in, out := &in.Subscription, &out.Subscription
		*out = make([]SubscriptionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryObservation.
func (in *VSphereContentLibraryObservation) DeepCopy() *VSphereContentLibraryObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryParameters) DeepCopyInto(out *VSphereContentLibraryParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Publication != nil {
		in, out := &in.Publication, &out.Publication
		*out = make([]PublicationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageBacking != nil {
		in, out := &in.StorageBacking, &out.StorageBacking
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Subscription != nil {
		in, out := &in.Subscription, &out.Subscription
		*out = make([]SubscriptionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryParameters.
func (in *VSphereContentLibraryParameters) DeepCopy() *VSphereContentLibraryParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibrarySpec) DeepCopyInto(out *VSphereContentLibrarySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibrarySpec.
func (in *VSphereContentLibrarySpec) DeepCopy() *VSphereContentLibrarySpec {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibrarySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereContentLibraryStatus) DeepCopyInto(out *VSphereContentLibraryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereContentLibraryStatus.
func (in *VSphereContentLibraryStatus) DeepCopy() *VSphereContentLibraryStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereContentLibraryStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomization) DeepCopyInto(out *VSphereGuestOSCustomization) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomization.
func (in *VSphereGuestOSCustomization) DeepCopy() *VSphereGuestOSCustomization {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomization)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereGuestOSCustomization) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomizationInitParameters) DeepCopyInto(out *VSphereGuestOSCustomizationInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomizationInitParameters.
func (in *VSphereGuestOSCustomizationInitParameters) DeepCopy() *VSphereGuestOSCustomizationInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomizationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomizationList) DeepCopyInto(out *VSphereGuestOSCustomizationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereGuestOSCustomization, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomizationList.
func (in *VSphereGuestOSCustomizationList) DeepCopy() *VSphereGuestOSCustomizationList {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomizationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereGuestOSCustomizationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomizationObservation) DeepCopyInto(out *VSphereGuestOSCustomizationObservation) {
	*out = *in
	if in.ChangeVersion != nil {
		in, out := &in.ChangeVersion, &out.ChangeVersion
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LastUpdateTime != nil {
		in, out := &in.LastUpdateTime, &out.LastUpdateTime
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomizationObservation.
func (in *VSphereGuestOSCustomizationObservation) DeepCopy() *VSphereGuestOSCustomizationObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomizationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomizationParameters) DeepCopyInto(out *VSphereGuestOSCustomizationParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make([]SpecParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomizationParameters.
func (in *VSphereGuestOSCustomizationParameters) DeepCopy() *VSphereGuestOSCustomizationParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomizationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomizationSpec) DeepCopyInto(out *VSphereGuestOSCustomizationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomizationSpec.
func (in *VSphereGuestOSCustomizationSpec) DeepCopy() *VSphereGuestOSCustomizationSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomizationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereGuestOSCustomizationStatus) DeepCopyInto(out *VSphereGuestOSCustomizationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereGuestOSCustomizationStatus.
func (in *VSphereGuestOSCustomizationStatus) DeepCopy() *VSphereGuestOSCustomizationStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereGuestOSCustomizationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainer) DeepCopyInto(out *VSphereVappContainer) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainer.
func (in *VSphereVappContainer) DeepCopy() *VSphereVappContainer {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVappContainer) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainerInitParameters) DeepCopyInto(out *VSphereVappContainerInitParameters) {
	*out = *in
	if in.CPUExpandable != nil {
		in, out := &in.CPUExpandable, &out.CPUExpandable
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.CPUShares != nil {
		in, out := &in.CPUShares, &out.CPUShares
		*out = new(float64)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MemoryExpandable != nil {
		in, out := &in.MemoryExpandable, &out.MemoryExpandable
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MemoryShares != nil {
		in, out := &in.MemoryShares, &out.MemoryShares
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentFolderID != nil {
		in, out := &in.ParentFolderID, &out.ParentFolderID
		*out = new(string)
		**out = **in
	}
	if in.ParentResourcePoolID != nil {
		in, out := &in.ParentResourcePoolID, &out.ParentResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainerInitParameters.
func (in *VSphereVappContainerInitParameters) DeepCopy() *VSphereVappContainerInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainerList) DeepCopyInto(out *VSphereVappContainerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereVappContainer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainerList.
func (in *VSphereVappContainerList) DeepCopy() *VSphereVappContainerList {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVappContainerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainerObservation) DeepCopyInto(out *VSphereVappContainerObservation) {
	*out = *in
	if in.CPUExpandable != nil {
		in, out := &in.CPUExpandable, &out.CPUExpandable
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.CPUShares != nil {
		in, out := &in.CPUShares, &out.CPUShares
		*out = new(float64)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MemoryExpandable != nil {
		in, out := &in.MemoryExpandable, &out.MemoryExpandable
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MemoryShares != nil {
		in, out := &in.MemoryShares, &out.MemoryShares
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentFolderID != nil {
		in, out := &in.ParentFolderID, &out.ParentFolderID
		*out = new(string)
		**out = **in
	}
	if in.ParentResourcePoolID != nil {
		in, out := &in.ParentResourcePoolID, &out.ParentResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainerObservation.
func (in *VSphereVappContainerObservation) DeepCopy() *VSphereVappContainerObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainerParameters) DeepCopyInto(out *VSphereVappContainerParameters) {
	*out = *in
	if in.CPUExpandable != nil {
		in, out := &in.CPUExpandable, &out.CPUExpandable
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.CPUShares != nil {
		in, out := &in.CPUShares, &out.CPUShares
		*out = new(float64)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MemoryExpandable != nil {
		in, out := &in.MemoryExpandable, &out.MemoryExpandable
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MemoryShares != nil {
		in, out := &in.MemoryShares, &out.MemoryShares
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentFolderID != nil {
		in, out := &in.ParentFolderID, &out.ParentFolderID
		*out = new(string)
		**out = **in
	}
	if in.ParentResourcePoolID != nil {
		in, out := &in.ParentResourcePoolID, &out.ParentResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainerParameters.
func (in *VSphereVappContainerParameters) DeepCopy() *VSphereVappContainerParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainerSpec) DeepCopyInto(out *VSphereVappContainerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainerSpec.
func (in *VSphereVappContainerSpec) DeepCopy() *VSphereVappContainerSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappContainerStatus) DeepCopyInto(out *VSphereVappContainerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappContainerStatus.
func (in *VSphereVappContainerStatus) DeepCopy() *VSphereVappContainerStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereVappContainerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntity) DeepCopyInto(out *VSphereVappEntity) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntity.
func (in *VSphereVappEntity) DeepCopy() *VSphereVappEntity {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntity)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVappEntity) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntityInitParameters) DeepCopyInto(out *VSphereVappEntityInitParameters) {
	*out = *in
	if in.ContainerID != nil {
		in, out := &in.ContainerID, &out.ContainerID
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.StartAction != nil {
		in, out := &in.StartAction, &out.StartAction
		*out = new(string)
		**out = **in
	}
	if in.StartDelay != nil {
		in, out := &in.StartDelay, &out.StartDelay
		*out = new(float64)
		**out = **in
	}
	if in.StartOrder != nil {
		in, out := &in.StartOrder, &out.StartOrder
		*out = new(float64)
		**out = **in
	}
	if in.StopAction != nil {
		in, out := &in.StopAction, &out.StopAction
		*out = new(string)
		**out = **in
	}
	if in.StopDelay != nil {
		in, out := &in.StopDelay, &out.StopDelay
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TargetID != nil {
		in, out := &in.TargetID, &out.TargetID
		*out = new(string)
		**out = **in
	}
	if in.WaitForGuest != nil {
		in, out := &in.WaitForGuest, &out.WaitForGuest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntityInitParameters.
func (in *VSphereVappEntityInitParameters) DeepCopy() *VSphereVappEntityInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntityInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntityList) DeepCopyInto(out *VSphereVappEntityList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereVappEntity, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntityList.
func (in *VSphereVappEntityList) DeepCopy() *VSphereVappEntityList {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntityList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVappEntityList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntityObservation) DeepCopyInto(out *VSphereVappEntityObservation) {
	*out = *in
	if in.ContainerID != nil {
		in, out := &in.ContainerID, &out.ContainerID
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.StartAction != nil {
		in, out := &in.StartAction, &out.StartAction
		*out = new(string)
		**out = **in
	}
	if in.StartDelay != nil {
		in, out := &in.StartDelay, &out.StartDelay
		*out = new(float64)
		**out = **in
	}
	if in.StartOrder != nil {
		in, out := &in.StartOrder, &out.StartOrder
		*out = new(float64)
		**out = **in
	}
	if in.StopAction != nil {
		in, out := &in.StopAction, &out.StopAction
		*out = new(string)
		**out = **in
	}
	if in.StopDelay != nil {
		in, out := &in.StopDelay, &out.StopDelay
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TargetID != nil {
		in, out := &in.TargetID, &out.TargetID
		*out = new(string)
		**out = **in
	}
	if in.WaitForGuest != nil {
		in, out := &in.WaitForGuest, &out.WaitForGuest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntityObservation.
func (in *VSphereVappEntityObservation) DeepCopy() *VSphereVappEntityObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntityParameters) DeepCopyInto(out *VSphereVappEntityParameters) {
	*out = *in
	if in.ContainerID != nil {
		in, out := &in.ContainerID, &out.ContainerID
		*out = new(string)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.StartAction != nil {
		in, out := &in.StartAction, &out.StartAction
		*out = new(string)
		**out = **in
	}
	if in.StartDelay != nil {
		in, out := &in.StartDelay, &out.StartDelay
		*out = new(float64)
		**out = **in
	}
	if in.StartOrder != nil {
		in, out := &in.StartOrder, &out.StartOrder
		*out = new(float64)
		**out = **in
	}
	if in.StopAction != nil {
		in, out := &in.StopAction, &out.StopAction
		*out = new(string)
		**out = **in
	}
	if in.StopDelay != nil {
		in, out := &in.StopDelay, &out.StopDelay
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TargetID != nil {
		in, out := &in.TargetID, &out.TargetID
		*out = new(string)
		**out = **in
	}
	if in.WaitForGuest != nil {
		in, out := &in.WaitForGuest, &out.WaitForGuest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntityParameters.
func (in *VSphereVappEntityParameters) DeepCopy() *VSphereVappEntityParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntitySpec) DeepCopyInto(out *VSphereVappEntitySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntitySpec.
func (in *VSphereVappEntitySpec) DeepCopy() *VSphereVappEntitySpec {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntitySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVappEntityStatus) DeepCopyInto(out *VSphereVappEntityStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVappEntityStatus.
func (in *VSphereVappEntityStatus) DeepCopy() *VSphereVappEntityStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereVappEntityStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDisk) DeepCopyInto(out *VSphereVirtualDisk) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDisk.
func (in *VSphereVirtualDisk) DeepCopy() *VSphereVirtualDisk {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDisk)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVirtualDisk) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDiskInitParameters) DeepCopyInto(out *VSphereVirtualDiskInitParameters) {
	*out = *in
	if in.AdapterType != nil {
		in, out := &in.AdapterType, &out.AdapterType
		*out = new(string)
		**out = **in
	}
	if in.CreateDirectories != nil {
		in, out := &in.CreateDirectories, &out.CreateDirectories
		*out = new(bool)
		**out = **in
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VmdkPath != nil {
		in, out := &in.VmdkPath, &out.VmdkPath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDiskInitParameters.
func (in *VSphereVirtualDiskInitParameters) DeepCopy() *VSphereVirtualDiskInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDiskInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDiskList) DeepCopyInto(out *VSphereVirtualDiskList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereVirtualDisk, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDiskList.
func (in *VSphereVirtualDiskList) DeepCopy() *VSphereVirtualDiskList {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDiskList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVirtualDiskList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDiskObservation) DeepCopyInto(out *VSphereVirtualDiskObservation) {
	*out = *in
	if in.AdapterType != nil {
		in, out := &in.AdapterType, &out.AdapterType
		*out = new(string)
		**out = **in
	}
	if in.CreateDirectories != nil {
		in, out := &in.CreateDirectories, &out.CreateDirectories
		*out = new(bool)
		**out = **in
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VmdkPath != nil {
		in, out := &in.VmdkPath, &out.VmdkPath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDiskObservation.
func (in *VSphereVirtualDiskObservation) DeepCopy() *VSphereVirtualDiskObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDiskObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDiskParameters) DeepCopyInto(out *VSphereVirtualDiskParameters) {
	*out = *in
	if in.AdapterType != nil {
		in, out := &in.AdapterType, &out.AdapterType
		*out = new(string)
		**out = **in
	}
	if in.CreateDirectories != nil {
		in, out := &in.CreateDirectories, &out.CreateDirectories
		*out = new(bool)
		**out = **in
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.Datastore != nil {
		in, out := &in.Datastore, &out.Datastore
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.VmdkPath != nil {
		in, out := &in.VmdkPath, &out.VmdkPath
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDiskParameters.
func (in *VSphereVirtualDiskParameters) DeepCopy() *VSphereVirtualDiskParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDiskParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDiskSpec) DeepCopyInto(out *VSphereVirtualDiskSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDiskSpec.
func (in *VSphereVirtualDiskSpec) DeepCopy() *VSphereVirtualDiskSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDiskSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualDiskStatus) DeepCopyInto(out *VSphereVirtualDiskStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualDiskStatus.
func (in *VSphereVirtualDiskStatus) DeepCopy() *VSphereVirtualDiskStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualDiskStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachine) DeepCopyInto(out *VSphereVirtualMachine) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachine.
func (in *VSphereVirtualMachine) DeepCopy() *VSphereVirtualMachine {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachine)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVirtualMachine) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineInitParameters) DeepCopyInto(out *VSphereVirtualMachineInitParameters) {
	*out = *in
	if in.AlternateGuestName != nil {
		in, out := &in.AlternateGuestName, &out.AlternateGuestName
		*out = new(string)
		**out = **in
	}
	if in.Annotation != nil {
		in, out := &in.Annotation, &out.Annotation
		*out = new(string)
		**out = **in
	}
	if in.BootDelay != nil {
		in, out := &in.BootDelay, &out.BootDelay
		*out = new(float64)
		**out = **in
	}
	if in.BootRetryDelay != nil {
		in, out := &in.BootRetryDelay, &out.BootRetryDelay
		*out = new(float64)
		**out = **in
	}
	if in.BootRetryEnabled != nil {
		in, out := &in.BootRetryEnabled, &out.BootRetryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUHotAddEnabled != nil {
		in, out := &in.CPUHotAddEnabled, &out.CPUHotAddEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUHotRemoveEnabled != nil {
		in, out := &in.CPUHotRemoveEnabled, &out.CPUHotRemoveEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUPerformanceCountersEnabled != nil {
		in, out := &in.CPUPerformanceCountersEnabled, &out.CPUPerformanceCountersEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareCount != nil {
		in, out := &in.CPUShareCount, &out.CPUShareCount
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Cdrom != nil {
		in, out := &in.Cdrom, &out.Cdrom
		*out = make([]CdromInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clone != nil {
		in, out := &in.Clone, &out.Clone
		*out = make([]CloneInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DatastoreClusterID != nil {
		in, out := &in.DatastoreClusterID, &out.DatastoreClusterID
		*out = new(string)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.Disk != nil {
		in, out := &in.Disk, &out.Disk
		*out = make([]DiskInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EfiSecureBootEnabled != nil {
		in, out := &in.EfiSecureBootEnabled, &out.EfiSecureBootEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableDiskUUID != nil {
		in, out := &in.EnableDiskUUID, &out.EnableDiskUUID
		*out = new(bool)
		**out = **in
	}
	if in.EnableLogging != nil {
		in, out := &in.EnableLogging, &out.EnableLogging
		*out = new(bool)
		**out = **in
	}
	if in.EptRviMode != nil {
		in, out := &in.EptRviMode, &out.EptRviMode
		*out = new(string)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtraConfigRebootRequired != nil {
		in, out := &in.ExtraConfigRebootRequired, &out.ExtraConfigRebootRequired
		*out = new(bool)
		**out = **in
	}
	if in.Firmware != nil {
		in, out := &in.Firmware, &out.Firmware
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForcePowerOff != nil {
		in, out := &in.ForcePowerOff, &out.ForcePowerOff
		*out = new(bool)
		**out = **in
	}
	if in.GuestID != nil {
		in, out := &in.GuestID, &out.GuestID
		*out = new(string)
		**out = **in
	}
	if in.HardwareVersion != nil {
		in, out := &in.HardwareVersion, &out.HardwareVersion
		*out = new(float64)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.HvMode != nil {
		in, out := &in.HvMode, &out.HvMode
		*out = new(string)
		**out = **in
	}
	if in.IdeControllerCount != nil {
		in, out := &in.IdeControllerCount, &out.IdeControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.IgnoredGuestIps != nil {
		in, out := &in.IgnoredGuestIps, &out.IgnoredGuestIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LatencySensitivity != nil {
		in, out := &in.LatencySensitivity, &out.LatencySensitivity
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.MemoryHotAddEnabled != nil {
		in, out := &in.MemoryHotAddEnabled, &out.MemoryHotAddEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservationLockedToMax != nil {
		in, out := &in.MemoryReservationLockedToMax, &out.MemoryReservationLockedToMax
		*out = new(bool)
		**out = **in
	}
	if in.MemoryShareCount != nil {
		in, out := &in.MemoryShareCount, &out.MemoryShareCount
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MigrateWaitTimeout != nil {
		in, out := &in.MigrateWaitTimeout, &out.MigrateWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NestedHvEnabled != nil {
		in, out := &in.NestedHvEnabled, &out.NestedHvEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]VSphereVirtualMachineNetworkInterfaceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NumCoresPerSocket != nil {
		in, out := &in.NumCoresPerSocket, &out.NumCoresPerSocket
		*out = new(float64)
		**out = **in
	}
	if in.NumCpus != nil {
		in, out := &in.NumCpus, &out.NumCpus
		*out = new(float64)
		**out = **in
	}
	if in.OvfDeploy != nil {
		in, out := &in.OvfDeploy, &out.OvfDeploy
		*out = make([]OvfDeployInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PciDeviceID != nil {
		in, out := &in.PciDeviceID, &out.PciDeviceID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PoweronTimeout != nil {
		in, out := &in.PoweronTimeout, &out.PoweronTimeout
		*out = new(float64)
		**out = **in
	}
	if in.ReplaceTrigger != nil {
		in, out := &in.ReplaceTrigger, &out.ReplaceTrigger
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolID != nil {
		in, out := &in.ResourcePoolID, &out.ResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.RunToolsScriptsAfterPowerOn != nil {
		in, out := &in.RunToolsScriptsAfterPowerOn, &out.RunToolsScriptsAfterPowerOn
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsAfterResume != nil {
		in, out := &in.RunToolsScriptsAfterResume, &out.RunToolsScriptsAfterResume
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestReboot != nil {
		in, out := &in.RunToolsScriptsBeforeGuestReboot, &out.RunToolsScriptsBeforeGuestReboot
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestShutdown != nil {
		in, out := &in.RunToolsScriptsBeforeGuestShutdown, &out.RunToolsScriptsBeforeGuestShutdown
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestStandby != nil {
		in, out := &in.RunToolsScriptsBeforeGuestStandby, &out.RunToolsScriptsBeforeGuestStandby
		*out = new(bool)
		**out = **in
	}
	if in.SataControllerCount != nil {
		in, out := &in.SataControllerCount, &out.SataControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.ScsiBusSharing != nil {
		in, out := &in.ScsiBusSharing, &out.ScsiBusSharing
		*out = new(string)
		**out = **in
	}
	if in.ScsiControllerCount != nil {
		in, out := &in.ScsiControllerCount, &out.ScsiControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.ScsiType != nil {
		in, out := &in.ScsiType, &out.ScsiType
		*out = new(string)
		**out = **in
	}
	if in.ShutdownWaitTimeout != nil {
		in, out := &in.ShutdownWaitTimeout, &out.ShutdownWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.StoragePolicyID != nil {
		in, out := &in.StoragePolicyID, &out.StoragePolicyID
		*out = new(string)
		**out = **in
	}
	if in.SwapPlacementPolicy != nil {
		in, out := &in.SwapPlacementPolicy, &out.SwapPlacementPolicy
		*out = new(string)
		**out = **in
	}
	if in.SyncTimeWithHost != nil {
		in, out := &in.SyncTimeWithHost, &out.SyncTimeWithHost
		*out = new(bool)
		**out = **in
	}
	if in.SyncTimeWithHostPeriodically != nil {
		in, out := &in.SyncTimeWithHostPeriodically, &out.SyncTimeWithHostPeriodically
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ToolsUpgradePolicy != nil {
		in, out := &in.ToolsUpgradePolicy, &out.ToolsUpgradePolicy
		*out = new(string)
		**out = **in
	}
	if in.Vapp != nil {
		in, out := &in.Vapp, &out.Vapp
		*out = make([]VappInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VbsEnabled != nil {
		in, out := &in.VbsEnabled, &out.VbsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Vtpm != nil {
		in, out := &in.Vtpm, &out.Vtpm
		*out = make([]VtpmInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VvtdEnabled != nil {
		in, out := &in.VvtdEnabled, &out.VvtdEnabled
		*out = new(bool)
		**out = **in
	}
	if in.WaitForGuestIPTimeout != nil {
		in, out := &in.WaitForGuestIPTimeout, &out.WaitForGuestIPTimeout
		*out = new(float64)
		**out = **in
	}
	if in.WaitForGuestNetRoutable != nil {
		in, out := &in.WaitForGuestNetRoutable, &out.WaitForGuestNetRoutable
		*out = new(bool)
		**out = **in
	}
	if in.WaitForGuestNetTimeout != nil {
		in, out := &in.WaitForGuestNetTimeout, &out.WaitForGuestNetTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineInitParameters.
func (in *VSphereVirtualMachineInitParameters) DeepCopy() *VSphereVirtualMachineInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineList) DeepCopyInto(out *VSphereVirtualMachineList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereVirtualMachine, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineList.
func (in *VSphereVirtualMachineList) DeepCopy() *VSphereVirtualMachineList {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVirtualMachineList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineNetworkInterfaceInitParameters) DeepCopyInto(out *VSphereVirtualMachineNetworkInterfaceInitParameters) {
	*out = *in
	if in.AdapterType != nil {
		in, out := &in.AdapterType, &out.AdapterType
		*out = new(string)
		**out = **in
	}
	if in.BandwidthLimit != nil {
		in, out := &in.BandwidthLimit, &out.BandwidthLimit
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthReservation != nil {
		in, out := &in.BandwidthReservation, &out.BandwidthReservation
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthShareCount != nil {
		in, out := &in.BandwidthShareCount, &out.BandwidthShareCount
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthShareLevel != nil {
		in, out := &in.BandwidthShareLevel, &out.BandwidthShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MacAddress != nil {
		in, out := &in.MacAddress, &out.MacAddress
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.OvfMapping != nil {
		in, out := &in.OvfMapping, &out.OvfMapping
		*out = new(string)
		**out = **in
	}
	if in.PhysicalFunction != nil {
		in, out := &in.PhysicalFunction, &out.PhysicalFunction
		*out = new(string)
		**out = **in
	}
	if in.UseStaticMac != nil {
		in, out := &in.UseStaticMac, &out.UseStaticMac
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineNetworkInterfaceInitParameters.
func (in *VSphereVirtualMachineNetworkInterfaceInitParameters) DeepCopy() *VSphereVirtualMachineNetworkInterfaceInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineNetworkInterfaceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineNetworkInterfaceObservation) DeepCopyInto(out *VSphereVirtualMachineNetworkInterfaceObservation) {
	*out = *in
	if in.AdapterType != nil {
		in, out := &in.AdapterType, &out.AdapterType
		*out = new(string)
		**out = **in
	}
	if in.BandwidthLimit != nil {
		in, out := &in.BandwidthLimit, &out.BandwidthLimit
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthReservation != nil {
		in, out := &in.BandwidthReservation, &out.BandwidthReservation
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthShareCount != nil {
		in, out := &in.BandwidthShareCount, &out.BandwidthShareCount
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthShareLevel != nil {
		in, out := &in.BandwidthShareLevel, &out.BandwidthShareLevel
		*out = new(string)
		**out = **in
	}
	if in.DeviceAddress != nil {
		in, out := &in.DeviceAddress, &out.DeviceAddress
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(float64)
		**out = **in
	}
	if in.MacAddress != nil {
		in, out := &in.MacAddress, &out.MacAddress
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.OvfMapping != nil {
		in, out := &in.OvfMapping, &out.OvfMapping
		*out = new(string)
		**out = **in
	}
	if in.PhysicalFunction != nil {
		in, out := &in.PhysicalFunction, &out.PhysicalFunction
		*out = new(string)
		**out = **in
	}
	if in.UseStaticMac != nil {
		in, out := &in.UseStaticMac, &out.UseStaticMac
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineNetworkInterfaceObservation.
func (in *VSphereVirtualMachineNetworkInterfaceObservation) DeepCopy() *VSphereVirtualMachineNetworkInterfaceObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineNetworkInterfaceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineNetworkInterfaceParameters) DeepCopyInto(out *VSphereVirtualMachineNetworkInterfaceParameters) {
	*out = *in
	if in.AdapterType != nil {
		in, out := &in.AdapterType, &out.AdapterType
		*out = new(string)
		**out = **in
	}
	if in.BandwidthLimit != nil {
		in, out := &in.BandwidthLimit, &out.BandwidthLimit
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthReservation != nil {
		in, out := &in.BandwidthReservation, &out.BandwidthReservation
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthShareCount != nil {
		in, out := &in.BandwidthShareCount, &out.BandwidthShareCount
		*out = new(float64)
		**out = **in
	}
	if in.BandwidthShareLevel != nil {
		in, out := &in.BandwidthShareLevel, &out.BandwidthShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MacAddress != nil {
		in, out := &in.MacAddress, &out.MacAddress
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.OvfMapping != nil {
		in, out := &in.OvfMapping, &out.OvfMapping
		*out = new(string)
		**out = **in
	}
	if in.PhysicalFunction != nil {
		in, out := &in.PhysicalFunction, &out.PhysicalFunction
		*out = new(string)
		**out = **in
	}
	if in.UseStaticMac != nil {
		in, out := &in.UseStaticMac, &out.UseStaticMac
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineNetworkInterfaceParameters.
func (in *VSphereVirtualMachineNetworkInterfaceParameters) DeepCopy() *VSphereVirtualMachineNetworkInterfaceParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineNetworkInterfaceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineObservation) DeepCopyInto(out *VSphereVirtualMachineObservation) {
	*out = *in
	if in.AlternateGuestName != nil {
		in, out := &in.AlternateGuestName, &out.AlternateGuestName
		*out = new(string)
		**out = **in
	}
	if in.Annotation != nil {
		in, out := &in.Annotation, &out.Annotation
		*out = new(string)
		**out = **in
	}
	if in.BootDelay != nil {
		in, out := &in.BootDelay, &out.BootDelay
		*out = new(float64)
		**out = **in
	}
	if in.BootRetryDelay != nil {
		in, out := &in.BootRetryDelay, &out.BootRetryDelay
		*out = new(float64)
		**out = **in
	}
	if in.BootRetryEnabled != nil {
		in, out := &in.BootRetryEnabled, &out.BootRetryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUHotAddEnabled != nil {
		in, out := &in.CPUHotAddEnabled, &out.CPUHotAddEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUHotRemoveEnabled != nil {
		in, out := &in.CPUHotRemoveEnabled, &out.CPUHotRemoveEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUPerformanceCountersEnabled != nil {
		in, out := &in.CPUPerformanceCountersEnabled, &out.CPUPerformanceCountersEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareCount != nil {
		in, out := &in.CPUShareCount, &out.CPUShareCount
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Cdrom != nil {
		in, out := &in.Cdrom, &out.Cdrom
		*out = make([]CdromObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ChangeVersion != nil {
		in, out := &in.ChangeVersion, &out.ChangeVersion
		*out = new(string)
		**out = **in
	}
	if in.Clone != nil {
		in, out := &in.Clone, &out.Clone
		*out = make([]CloneObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DatastoreClusterID != nil {
		in, out := &in.DatastoreClusterID, &out.DatastoreClusterID
		*out = new(string)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.DefaultIPAddress != nil {
		in, out := &in.DefaultIPAddress, &out.DefaultIPAddress
		*out = new(string)
		**out = **in
	}
	if in.Disk != nil {
		in, out := &in.Disk, &out.Disk
		*out = make([]DiskObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EfiSecureBootEnabled != nil {
		in, out := &in.EfiSecureBootEnabled, &out.EfiSecureBootEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableDiskUUID != nil {
		in, out := &in.EnableDiskUUID, &out.EnableDiskUUID
		*out = new(bool)
		**out = **in
	}
	if in.EnableLogging != nil {
		in, out := &in.EnableLogging, &out.EnableLogging
		*out = new(bool)
		**out = **in
	}
	if in.EptRviMode != nil {
		in, out := &in.EptRviMode, &out.EptRviMode
		*out = new(string)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtraConfigRebootRequired != nil {
		in, out := &in.ExtraConfigRebootRequired, &out.ExtraConfigRebootRequired
		*out = new(bool)
		**out = **in
	}
	if in.Firmware != nil {
		in, out := &in.Firmware, &out.Firmware
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForcePowerOff != nil {
		in, out := &in.ForcePowerOff, &out.ForcePowerOff
		*out = new(bool)
		**out = **in
	}
	if in.GuestID != nil {
		in, out := &in.GuestID, &out.GuestID
		*out = new(string)
		**out = **in
	}
	if in.GuestIPAddresses != nil {
		in, out := &in.GuestIPAddresses, &out.GuestIPAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HardwareVersion != nil {
		in, out := &in.HardwareVersion, &out.HardwareVersion
		*out = new(float64)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.HvMode != nil {
		in, out := &in.HvMode, &out.HvMode
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IdeControllerCount != nil {
		in, out := &in.IdeControllerCount, &out.IdeControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.IgnoredGuestIps != nil {
		in, out := &in.IgnoredGuestIps, &out.IgnoredGuestIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Imported != nil {
		in, out := &in.Imported, &out.Imported
		*out = new(bool)
		**out = **in
	}
	if in.LatencySensitivity != nil {
		in, out := &in.LatencySensitivity, &out.LatencySensitivity
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.MemoryHotAddEnabled != nil {
		in, out := &in.MemoryHotAddEnabled, &out.MemoryHotAddEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservationLockedToMax != nil {
		in, out := &in.MemoryReservationLockedToMax, &out.MemoryReservationLockedToMax
		*out = new(bool)
		**out = **in
	}
	if in.MemoryShareCount != nil {
		in, out := &in.MemoryShareCount, &out.MemoryShareCount
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MigrateWaitTimeout != nil {
		in, out := &in.MigrateWaitTimeout, &out.MigrateWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Moid != nil {
		in, out := &in.Moid, &out.Moid
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NestedHvEnabled != nil {
		in, out := &in.NestedHvEnabled, &out.NestedHvEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]VSphereVirtualMachineNetworkInterfaceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NumCoresPerSocket != nil {
		in, out := &in.NumCoresPerSocket, &out.NumCoresPerSocket
		*out = new(float64)
		**out = **in
	}
	if in.NumCpus != nil {
		in, out := &in.NumCpus, &out.NumCpus
		*out = new(float64)
		**out = **in
	}
	if in.OvfDeploy != nil {
		in, out := &in.OvfDeploy, &out.OvfDeploy
		*out = make([]OvfDeployObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PciDeviceID != nil {
		in, out := &in.PciDeviceID, &out.PciDeviceID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PowerState != nil {
		in, out := &in.PowerState, &out.PowerState
		*out = new(string)
		**out = **in
	}
	if in.PoweronTimeout != nil {
		in, out := &in.PoweronTimeout, &out.PoweronTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RebootRequired != nil {
		in, out := &in.RebootRequired, &out.RebootRequired
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceTrigger != nil {
		in, out := &in.ReplaceTrigger, &out.ReplaceTrigger
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolID != nil {
		in, out := &in.ResourcePoolID, &out.ResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.RunToolsScriptsAfterPowerOn != nil {
		in, out := &in.RunToolsScriptsAfterPowerOn, &out.RunToolsScriptsAfterPowerOn
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsAfterResume != nil {
		in, out := &in.RunToolsScriptsAfterResume, &out.RunToolsScriptsAfterResume
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestReboot != nil {
		in, out := &in.RunToolsScriptsBeforeGuestReboot, &out.RunToolsScriptsBeforeGuestReboot
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestShutdown != nil {
		in, out := &in.RunToolsScriptsBeforeGuestShutdown, &out.RunToolsScriptsBeforeGuestShutdown
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestStandby != nil {
		in, out := &in.RunToolsScriptsBeforeGuestStandby, &out.RunToolsScriptsBeforeGuestStandby
		*out = new(bool)
		**out = **in
	}
	if in.SataControllerCount != nil {
		in, out := &in.SataControllerCount, &out.SataControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.ScsiBusSharing != nil {
		in, out := &in.ScsiBusSharing, &out.ScsiBusSharing
		*out = new(string)
		**out = **in
	}
	if in.ScsiControllerCount != nil {
		in, out := &in.ScsiControllerCount, &out.ScsiControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.ScsiType != nil {
		in, out := &in.ScsiType, &out.ScsiType
		*out = new(string)
		**out = **in
	}
	if in.ShutdownWaitTimeout != nil {
		in, out := &in.ShutdownWaitTimeout, &out.ShutdownWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.StoragePolicyID != nil {
		in, out := &in.StoragePolicyID, &out.StoragePolicyID
		*out = new(string)
		**out = **in
	}
	if in.SwapPlacementPolicy != nil {
		in, out := &in.SwapPlacementPolicy, &out.SwapPlacementPolicy
		*out = new(string)
		**out = **in
	}
	if in.SyncTimeWithHost != nil {
		in, out := &in.SyncTimeWithHost, &out.SyncTimeWithHost
		*out = new(bool)
		**out = **in
	}
	if in.SyncTimeWithHostPeriodically != nil {
		in, out := &in.SyncTimeWithHostPeriodically, &out.SyncTimeWithHostPeriodically
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ToolsUpgradePolicy != nil {
		in, out := &in.ToolsUpgradePolicy, &out.ToolsUpgradePolicy
		*out = new(string)
		**out = **in
	}
	if in.UUID != nil {
		in, out := &in.UUID, &out.UUID
		*out = new(string)
		**out = **in
	}
	if in.Vapp != nil {
		in, out := &in.Vapp, &out.Vapp
		*out = make([]VappObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VappTransport != nil {
		in, out := &in.VappTransport, &out.VappTransport
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VbsEnabled != nil {
		in, out := &in.VbsEnabled, &out.VbsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VmwareToolsStatus != nil {
		in, out := &in.VmwareToolsStatus, &out.VmwareToolsStatus
		*out = new(string)
		**out = **in
	}
	if in.VmxPath != nil {
		in, out := &in.VmxPath, &out.VmxPath
		*out = new(string)
		**out = **in
	}
	if in.Vtpm != nil {
		in, out := &in.Vtpm, &out.Vtpm
		*out = make([]VtpmObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VvtdEnabled != nil {
		in, out := &in.VvtdEnabled, &out.VvtdEnabled
		*out = new(bool)
		**out = **in
	}
	if in.WaitForGuestIPTimeout != nil {
		in, out := &in.WaitForGuestIPTimeout, &out.WaitForGuestIPTimeout
		*out = new(float64)
		**out = **in
	}
	if in.WaitForGuestNetRoutable != nil {
		in, out := &in.WaitForGuestNetRoutable, &out.WaitForGuestNetRoutable
		*out = new(bool)
		**out = **in
	}
	if in.WaitForGuestNetTimeout != nil {
		in, out := &in.WaitForGuestNetTimeout, &out.WaitForGuestNetTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineObservation.
func (in *VSphereVirtualMachineObservation) DeepCopy() *VSphereVirtualMachineObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineParameters) DeepCopyInto(out *VSphereVirtualMachineParameters) {
	*out = *in
	if in.AlternateGuestName != nil {
		in, out := &in.AlternateGuestName, &out.AlternateGuestName
		*out = new(string)
		**out = **in
	}
	if in.Annotation != nil {
		in, out := &in.Annotation, &out.Annotation
		*out = new(string)
		**out = **in
	}
	if in.BootDelay != nil {
		in, out := &in.BootDelay, &out.BootDelay
		*out = new(float64)
		**out = **in
	}
	if in.BootRetryDelay != nil {
		in, out := &in.BootRetryDelay, &out.BootRetryDelay
		*out = new(float64)
		**out = **in
	}
	if in.BootRetryEnabled != nil {
		in, out := &in.BootRetryEnabled, &out.BootRetryEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUHotAddEnabled != nil {
		in, out := &in.CPUHotAddEnabled, &out.CPUHotAddEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUHotRemoveEnabled != nil {
		in, out := &in.CPUHotRemoveEnabled, &out.CPUHotRemoveEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUPerformanceCountersEnabled != nil {
		in, out := &in.CPUPerformanceCountersEnabled, &out.CPUPerformanceCountersEnabled
		*out = new(bool)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareCount != nil {
		in, out := &in.CPUShareCount, &out.CPUShareCount
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.Cdrom != nil {
		in, out := &in.Cdrom, &out.Cdrom
		*out = make([]CdromParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clone != nil {
		in, out := &in.Clone, &out.Clone
		*out = make([]CloneParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DatastoreClusterID != nil {
		in, out := &in.DatastoreClusterID, &out.DatastoreClusterID
		*out = new(string)
		**out = **in
	}
	if in.DatastoreID != nil {
		in, out := &in.DatastoreID, &out.DatastoreID
		*out = new(string)
		**out = **in
	}
	if in.Disk != nil {
		in, out := &in.Disk, &out.Disk
		*out = make([]DiskParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EfiSecureBootEnabled != nil {
		in, out := &in.EfiSecureBootEnabled, &out.EfiSecureBootEnabled
		*out = new(bool)
		**out = **in
	}
	if in.EnableDiskUUID != nil {
		in, out := &in.EnableDiskUUID, &out.EnableDiskUUID
		*out = new(bool)
		**out = **in
	}
	if in.EnableLogging != nil {
		in, out := &in.EnableLogging, &out.EnableLogging
		*out = new(bool)
		**out = **in
	}
	if in.EptRviMode != nil {
		in, out := &in.EptRviMode, &out.EptRviMode
		*out = new(string)
		**out = **in
	}
	if in.ExtraConfig != nil {
		in, out := &in.ExtraConfig, &out.ExtraConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ExtraConfigRebootRequired != nil {
		in, out := &in.ExtraConfigRebootRequired, &out.ExtraConfigRebootRequired
		*out = new(bool)
		**out = **in
	}
	if in.Firmware != nil {
		in, out := &in.Firmware, &out.Firmware
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForcePowerOff != nil {
		in, out := &in.ForcePowerOff, &out.ForcePowerOff
		*out = new(bool)
		**out = **in
	}
	if in.GuestID != nil {
		in, out := &in.GuestID, &out.GuestID
		*out = new(string)
		**out = **in
	}
	if in.HardwareVersion != nil {
		in, out := &in.HardwareVersion, &out.HardwareVersion
		*out = new(float64)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.HvMode != nil {
		in, out := &in.HvMode, &out.HvMode
		*out = new(string)
		**out = **in
	}
	if in.IdeControllerCount != nil {
		in, out := &in.IdeControllerCount, &out.IdeControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.IgnoredGuestIps != nil {
		in, out := &in.IgnoredGuestIps, &out.IgnoredGuestIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LatencySensitivity != nil {
		in, out := &in.LatencySensitivity, &out.LatencySensitivity
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.MemoryHotAddEnabled != nil {
		in, out := &in.MemoryHotAddEnabled, &out.MemoryHotAddEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservationLockedToMax != nil {
		in, out := &in.MemoryReservationLockedToMax, &out.MemoryReservationLockedToMax
		*out = new(bool)
		**out = **in
	}
	if in.MemoryShareCount != nil {
		in, out := &in.MemoryShareCount, &out.MemoryShareCount
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MigrateWaitTimeout != nil {
		in, out := &in.MigrateWaitTimeout, &out.MigrateWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NestedHvEnabled != nil {
		in, out := &in.NestedHvEnabled, &out.NestedHvEnabled
		*out = new(bool)
		**out = **in
	}
	if in.NetworkInterface != nil {
		in, out := &in.NetworkInterface, &out.NetworkInterface
		*out = make([]VSphereVirtualMachineNetworkInterfaceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NumCoresPerSocket != nil {
		in, out := &in.NumCoresPerSocket, &out.NumCoresPerSocket
		*out = new(float64)
		**out = **in
	}
	if in.NumCpus != nil {
		in, out := &in.NumCpus, &out.NumCpus
		*out = new(float64)
		**out = **in
	}
	if in.OvfDeploy != nil {
		in, out := &in.OvfDeploy, &out.OvfDeploy
		*out = make([]OvfDeployParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PciDeviceID != nil {
		in, out := &in.PciDeviceID, &out.PciDeviceID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PoweronTimeout != nil {
		in, out := &in.PoweronTimeout, &out.PoweronTimeout
		*out = new(float64)
		**out = **in
	}
	if in.ReplaceTrigger != nil {
		in, out := &in.ReplaceTrigger, &out.ReplaceTrigger
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolID != nil {
		in, out := &in.ResourcePoolID, &out.ResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.RunToolsScriptsAfterPowerOn != nil {
		in, out := &in.RunToolsScriptsAfterPowerOn, &out.RunToolsScriptsAfterPowerOn
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsAfterResume != nil {
		in, out := &in.RunToolsScriptsAfterResume, &out.RunToolsScriptsAfterResume
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestReboot != nil {
		in, out := &in.RunToolsScriptsBeforeGuestReboot, &out.RunToolsScriptsBeforeGuestReboot
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestShutdown != nil {
		in, out := &in.RunToolsScriptsBeforeGuestShutdown, &out.RunToolsScriptsBeforeGuestShutdown
		*out = new(bool)
		**out = **in
	}
	if in.RunToolsScriptsBeforeGuestStandby != nil {
		in, out := &in.RunToolsScriptsBeforeGuestStandby, &out.RunToolsScriptsBeforeGuestStandby
		*out = new(bool)
		**out = **in
	}
	if in.SataControllerCount != nil {
		in, out := &in.SataControllerCount, &out.SataControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.ScsiBusSharing != nil {
		in, out := &in.ScsiBusSharing, &out.ScsiBusSharing
		*out = new(string)
		**out = **in
	}
	if in.ScsiControllerCount != nil {
		in, out := &in.ScsiControllerCount, &out.ScsiControllerCount
		*out = new(float64)
		**out = **in
	}
	if in.ScsiType != nil {
		in, out := &in.ScsiType, &out.ScsiType
		*out = new(string)
		**out = **in
	}
	if in.ShutdownWaitTimeout != nil {
		in, out := &in.ShutdownWaitTimeout, &out.ShutdownWaitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.StoragePolicyID != nil {
		in, out := &in.StoragePolicyID, &out.StoragePolicyID
		*out = new(string)
		**out = **in
	}
	if in.SwapPlacementPolicy != nil {
		in, out := &in.SwapPlacementPolicy, &out.SwapPlacementPolicy
		*out = new(string)
		**out = **in
	}
	if in.SyncTimeWithHost != nil {
		in, out := &in.SyncTimeWithHost, &out.SyncTimeWithHost
		*out = new(bool)
		**out = **in
	}
	if in.SyncTimeWithHostPeriodically != nil {
		in, out := &in.SyncTimeWithHostPeriodically, &out.SyncTimeWithHostPeriodically
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ToolsUpgradePolicy != nil {
		in, out := &in.ToolsUpgradePolicy, &out.ToolsUpgradePolicy
		*out = new(string)
		**out = **in
	}
	if in.Vapp != nil {
		in, out := &in.Vapp, &out.Vapp
		*out = make([]VappParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VbsEnabled != nil {
		in, out := &in.VbsEnabled, &out.VbsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Vtpm != nil {
		in, out := &in.Vtpm, &out.Vtpm
		*out = make([]VtpmParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VvtdEnabled != nil {
		in, out := &in.VvtdEnabled, &out.VvtdEnabled
		*out = new(bool)
		**out = **in
	}
	if in.WaitForGuestIPTimeout != nil {
		in, out := &in.WaitForGuestIPTimeout, &out.WaitForGuestIPTimeout
		*out = new(float64)
		**out = **in
	}
	if in.WaitForGuestNetRoutable != nil {
		in, out := &in.WaitForGuestNetRoutable, &out.WaitForGuestNetRoutable
		*out = new(bool)
		**out = **in
	}
	if in.WaitForGuestNetTimeout != nil {
		in, out := &in.WaitForGuestNetTimeout, &out.WaitForGuestNetTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineParameters.
func (in *VSphereVirtualMachineParameters) DeepCopy() *VSphereVirtualMachineParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshot) DeepCopyInto(out *VSphereVirtualMachineSnapshot) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshot.
func (in *VSphereVirtualMachineSnapshot) DeepCopy() *VSphereVirtualMachineSnapshot {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshot)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVirtualMachineSnapshot) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshotInitParameters) DeepCopyInto(out *VSphereVirtualMachineSnapshotInitParameters) {
	*out = *in
	if in.Consolidate != nil {
		in, out := &in.Consolidate, &out.Consolidate
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(bool)
		**out = **in
	}
	if in.Quiesce != nil {
		in, out := &in.Quiesce, &out.Quiesce
		*out = new(bool)
		**out = **in
	}
	if in.RemoveChildren != nil {
		in, out := &in.RemoveChildren, &out.RemoveChildren
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineUUID != nil {
		in, out := &in.VirtualMachineUUID, &out.VirtualMachineUUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshotInitParameters.
func (in *VSphereVirtualMachineSnapshotInitParameters) DeepCopy() *VSphereVirtualMachineSnapshotInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshotInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshotList) DeepCopyInto(out *VSphereVirtualMachineSnapshotList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereVirtualMachineSnapshot, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshotList.
func (in *VSphereVirtualMachineSnapshotList) DeepCopy() *VSphereVirtualMachineSnapshotList {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshotList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVirtualMachineSnapshotList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshotObservation) DeepCopyInto(out *VSphereVirtualMachineSnapshotObservation) {
	*out = *in
	if in.Consolidate != nil {
		in, out := &in.Consolidate, &out.Consolidate
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(bool)
		**out = **in
	}
	if in.Quiesce != nil {
		in, out := &in.Quiesce, &out.Quiesce
		*out = new(bool)
		**out = **in
	}
	if in.RemoveChildren != nil {
		in, out := &in.RemoveChildren, &out.RemoveChildren
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineUUID != nil {
		in, out := &in.VirtualMachineUUID, &out.VirtualMachineUUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshotObservation.
func (in *VSphereVirtualMachineSnapshotObservation) DeepCopy() *VSphereVirtualMachineSnapshotObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshotObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshotParameters) DeepCopyInto(out *VSphereVirtualMachineSnapshotParameters) {
	*out = *in
	if in.Consolidate != nil {
		in, out := &in.Consolidate, &out.Consolidate
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(bool)
		**out = **in
	}
	if in.Quiesce != nil {
		in, out := &in.Quiesce, &out.Quiesce
		*out = new(bool)
		**out = **in
	}
	if in.RemoveChildren != nil {
		in, out := &in.RemoveChildren, &out.RemoveChildren
		*out = new(bool)
		**out = **in
	}
	if in.SnapshotName != nil {
		in, out := &in.SnapshotName, &out.SnapshotName
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineUUID != nil {
		in, out := &in.VirtualMachineUUID, &out.VirtualMachineUUID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshotParameters.
func (in *VSphereVirtualMachineSnapshotParameters) DeepCopy() *VSphereVirtualMachineSnapshotParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshotParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshotSpec) DeepCopyInto(out *VSphereVirtualMachineSnapshotSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshotSpec.
func (in *VSphereVirtualMachineSnapshotSpec) DeepCopy() *VSphereVirtualMachineSnapshotSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshotSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSnapshotStatus) DeepCopyInto(out *VSphereVirtualMachineSnapshotStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSnapshotStatus.
func (in *VSphereVirtualMachineSnapshotStatus) DeepCopy() *VSphereVirtualMachineSnapshotStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSnapshotStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineSpec) DeepCopyInto(out *VSphereVirtualMachineSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineSpec.
func (in *VSphereVirtualMachineSpec) DeepCopy() *VSphereVirtualMachineSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVirtualMachineStatus) DeepCopyInto(out *VSphereVirtualMachineStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVirtualMachineStatus.
func (in *VSphereVirtualMachineStatus) DeepCopy() *VSphereVirtualMachineStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereVirtualMachineStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VappInitParameters) DeepCopyInto(out *VappInitParameters) {
	*out = *in
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VappInitParameters.
func (in *VappInitParameters) DeepCopy() *VappInitParameters {
	if in == nil {
		return nil
	}
	out := new(VappInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VappObservation) DeepCopyInto(out *VappObservation) {
	*out = *in
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VappObservation.
func (in *VappObservation) DeepCopy() *VappObservation {
	if in == nil {
		return nil
	}
	out := new(VappObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VappParameters) DeepCopyInto(out *VappParameters) {
	*out = *in
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VappParameters.
func (in *VappParameters) DeepCopy() *VappParameters {
	if in == nil {
		return nil
	}
	out := new(VappParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VtpmInitParameters) DeepCopyInto(out *VtpmInitParameters) {
	*out = *in
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VtpmInitParameters.
func (in *VtpmInitParameters) DeepCopy() *VtpmInitParameters {
	if in == nil {
		return nil
	}
	out := new(VtpmInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VtpmObservation) DeepCopyInto(out *VtpmObservation) {
	*out = *in
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VtpmObservation.
func (in *VtpmObservation) DeepCopy() *VtpmObservation {
	if in == nil {
		return nil
	}
	out := new(VtpmObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VtpmParameters) DeepCopyInto(out *VtpmParameters) {
	*out = *in
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VtpmParameters.
func (in *VtpmParameters) DeepCopy() *VtpmParameters {
	if in == nil {
		return nil
	}
	out := new(VtpmParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsOptionsInitParameters) DeepCopyInto(out *WindowsOptionsInitParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AutoLogon != nil {
		in, out := &in.AutoLogon, &out.AutoLogon
		*out = new(bool)
		**out = **in
	}
	if in.AutoLogonCount != nil {
		in, out := &in.AutoLogonCount, &out.AutoLogonCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputerName != nil {
		in, out := &in.ComputerName, &out.ComputerName
		*out = new(string)
		**out = **in
	}
	if in.DomainAdminPasswordSecretRef != nil {
		in, out := &in.DomainAdminPasswordSecretRef, &out.DomainAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.DomainAdminUser != nil {
		in, out := &in.DomainAdminUser, &out.DomainAdminUser
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		*out = new(string)
		**out = **in
	}
	if in.JoinDomain != nil {
		in, out := &in.JoinDomain, &out.JoinDomain
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.ProductKeySecretRef != nil {
		in, out := &in.ProductKeySecretRef, &out.ProductKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.RunOnceCommandList != nil {
		in, out := &in.RunOnceCommandList, &out.RunOnceCommandList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(float64)
		**out = **in
	}
	if in.Workgroup != nil {
		in, out := &in.Workgroup, &out.Workgroup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsOptionsInitParameters.
func (in *WindowsOptionsInitParameters) DeepCopy() *WindowsOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(WindowsOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsOptionsObservation) DeepCopyInto(out *WindowsOptionsObservation) {
	*out = *in
	if in.AutoLogon != nil {
		in, out := &in.AutoLogon, &out.AutoLogon
		*out = new(bool)
		**out = **in
	}
	if in.AutoLogonCount != nil {
		in, out := &in.AutoLogonCount, &out.AutoLogonCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputerName != nil {
		in, out := &in.ComputerName, &out.ComputerName
		*out = new(string)
		**out = **in
	}
	if in.DomainAdminUser != nil {
		in, out := &in.DomainAdminUser, &out.DomainAdminUser
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		*out = new(string)
		**out = **in
	}
	if in.JoinDomain != nil {
		in, out := &in.JoinDomain, &out.JoinDomain
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.RunOnceCommandList != nil {
		in, out := &in.RunOnceCommandList, &out.RunOnceCommandList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(float64)
		**out = **in
	}
	if in.Workgroup != nil {
		in, out := &in.Workgroup, &out.Workgroup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsOptionsObservation.
func (in *WindowsOptionsObservation) DeepCopy() *WindowsOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(WindowsOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WindowsOptionsParameters) DeepCopyInto(out *WindowsOptionsParameters) {
	*out = *in
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.AutoLogon != nil {
		in, out := &in.AutoLogon, &out.AutoLogon
		*out = new(bool)
		**out = **in
	}
	if in.AutoLogonCount != nil {
		in, out := &in.AutoLogonCount, &out.AutoLogonCount
		*out = new(float64)
		**out = **in
	}
	if in.ComputerName != nil {
		in, out := &in.ComputerName, &out.ComputerName
		*out = new(string)
		**out = **in
	}
	if in.DomainAdminPasswordSecretRef != nil {
		in, out := &in.DomainAdminPasswordSecretRef, &out.DomainAdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.DomainAdminUser != nil {
		in, out := &in.DomainAdminUser, &out.DomainAdminUser
		*out = new(string)
		**out = **in
	}
	if in.DomainOu != nil {
		in, out := &in.DomainOu, &out.DomainOu
		*out = new(string)
		**out = **in
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		*out = new(string)
		**out = **in
	}
	if in.JoinDomain != nil {
		in, out := &in.JoinDomain, &out.JoinDomain
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.ProductKeySecretRef != nil {
		in, out := &in.ProductKeySecretRef, &out.ProductKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.RunOnceCommandList != nil {
		in, out := &in.RunOnceCommandList, &out.RunOnceCommandList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(float64)
		**out = **in
	}
	if in.Workgroup != nil {
		in, out := &in.Workgroup, &out.Workgroup
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WindowsOptionsParameters.
func (in *WindowsOptionsParameters) DeepCopy() *WindowsOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(WindowsOptionsParameters)
	in.DeepCopyInto(out)
	return out
}
