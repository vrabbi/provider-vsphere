// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicationInitParameters struct {

	// Method to authenticate users. Must be NONE or BASIC.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Password used by subscribers to authenticate.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Publish the content library. Default false.
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PublicationObservation struct {

	// Method to authenticate users. Must be NONE or BASIC.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Password used by subscribers to authenticate.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The URL of the published content library.
	PublishURL *string `json:"publishUrl,omitempty" tf:"publish_url,omitempty"`

	// Publish the content library. Default false.
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PublicationParameters struct {

	// Method to authenticate users. Must be NONE or BASIC.
	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Password used by subscribers to authenticate.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Publish the content library. Default false.
	// +kubebuilder:validation:Optional
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SubscriptionInitParameters struct {

	// Method to authenticate users. Must be NONE or BASIC.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Enable automatic synchronization with the published library. Default false.
	AutomaticSync *bool `json:"automaticSync,omitempty" tf:"automatic_sync,omitempty"`

	// Download the library from a content only when needed. Default true.
	OnDemand *bool `json:"onDemand,omitempty" tf:"on_demand,omitempty"`

	// Password used by subscribers to authenticate.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// URL of the published content library.
	SubscriptionURL *string `json:"subscriptionUrl,omitempty" tf:"subscription_url,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SubscriptionObservation struct {

	// Method to authenticate users. Must be NONE or BASIC.
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Enable automatic synchronization with the published library. Default false.
	AutomaticSync *bool `json:"automaticSync,omitempty" tf:"automatic_sync,omitempty"`

	// Download the library from a content only when needed. Default true.
	OnDemand *bool `json:"onDemand,omitempty" tf:"on_demand,omitempty"`

	// Password used by subscribers to authenticate.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// URL of the published content library.
	SubscriptionURL *string `json:"subscriptionUrl,omitempty" tf:"subscription_url,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SubscriptionParameters struct {

	// Method to authenticate users. Must be NONE or BASIC.
	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// Enable automatic synchronization with the published library. Default false.
	// +kubebuilder:validation:Optional
	AutomaticSync *bool `json:"automaticSync,omitempty" tf:"automatic_sync,omitempty"`

	// Download the library from a content only when needed. Default true.
	// +kubebuilder:validation:Optional
	OnDemand *bool `json:"onDemand,omitempty" tf:"on_demand,omitempty"`

	// Password used by subscribers to authenticate.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// URL of the published content library.
	// +kubebuilder:validation:Optional
	SubscriptionURL *string `json:"subscriptionUrl,omitempty" tf:"subscription_url,omitempty"`

	// Username used by subscribers to authenticate. Currently can only be vcsp.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type VSphereContentLibraryInitParameters struct {

	// A description for the content library.
	// Optional description of the content library.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the content library.
	// The name of the content library.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Options to publish a local content library.
	// Publication configuration for content library.
	Publication []PublicationInitParameters `json:"publication,omitempty" tf:"publication,omitempty"`

	// The managed object reference ID of the datastore on which to store the content library items.
	// The name of the content library.
	// +listType=set
	StorageBacking []*string `json:"storageBacking,omitempty" tf:"storage_backing,omitempty"`

	// Options subscribe to a published content library.
	// Publication configuration for content library.
	Subscription []SubscriptionInitParameters `json:"subscription,omitempty" tf:"subscription,omitempty"`
}

type VSphereContentLibraryObservation struct {

	// A description for the content library.
	// Optional description of the content library.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The managed object reference ID of the content library.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the content library.
	// The name of the content library.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Options to publish a local content library.
	// Publication configuration for content library.
	Publication []PublicationObservation `json:"publication,omitempty" tf:"publication,omitempty"`

	// The managed object reference ID of the datastore on which to store the content library items.
	// The name of the content library.
	// +listType=set
	StorageBacking []*string `json:"storageBacking,omitempty" tf:"storage_backing,omitempty"`

	// Options subscribe to a published content library.
	// Publication configuration for content library.
	Subscription []SubscriptionObservation `json:"subscription,omitempty" tf:"subscription,omitempty"`
}

type VSphereContentLibraryParameters struct {

	// A description for the content library.
	// Optional description of the content library.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the content library.
	// The name of the content library.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Options to publish a local content library.
	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Publication []PublicationParameters `json:"publication,omitempty" tf:"publication,omitempty"`

	// The managed object reference ID of the datastore on which to store the content library items.
	// The name of the content library.
	// +kubebuilder:validation:Optional
	// +listType=set
	StorageBacking []*string `json:"storageBacking,omitempty" tf:"storage_backing,omitempty"`

	// Options subscribe to a published content library.
	// Publication configuration for content library.
	// +kubebuilder:validation:Optional
	Subscription []SubscriptionParameters `json:"subscription,omitempty" tf:"subscription,omitempty"`
}

// VSphereContentLibrarySpec defines the desired state of VSphereContentLibrary
type VSphereContentLibrarySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereContentLibraryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereContentLibraryInitParameters `json:"initProvider,omitempty"`
}

// VSphereContentLibraryStatus defines the observed state of VSphereContentLibrary.
type VSphereContentLibraryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereContentLibraryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereContentLibrary is the Schema for the VSphereContentLibrarys API. Provides a vSphere content library. Content libraries allow you to manage and share virtual machines, vApp templates, and other types of files. Content libraries enable you to share content across vCenter Server instances in the same or different locations.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereContentLibrary struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageBacking) || (has(self.initProvider) && has(self.initProvider.storageBacking))",message="spec.forProvider.storageBacking is a required parameter"
	Spec   VSphereContentLibrarySpec   `json:"spec"`
	Status VSphereContentLibraryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereContentLibraryList contains a list of VSphereContentLibrarys
type VSphereContentLibraryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereContentLibrary `json:"items"`
}

// Repository type metadata.
var (
	VSphereContentLibrary_Kind             = "VSphereContentLibrary"
	VSphereContentLibrary_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereContentLibrary_Kind}.String()
	VSphereContentLibrary_KindAPIVersion   = VSphereContentLibrary_Kind + "." + CRDGroupVersion.String()
	VSphereContentLibrary_GroupVersionKind = CRDGroupVersion.WithKind(VSphereContentLibrary_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereContentLibrary{}, &VSphereContentLibraryList{})
}
