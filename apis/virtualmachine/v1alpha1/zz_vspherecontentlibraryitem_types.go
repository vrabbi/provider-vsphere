// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereContentLibraryItemInitParameters struct {

	// A description for the content library item.
	// Optional description of the content library item.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// File to import as the content library item.
	// ID of source VM of content library item.
	FileURL *string `json:"fileUrl,omitempty" tf:"file_url,omitempty"`

	// The ID of the content library in which to create the item.
	// ID of the content library to contain item
	LibraryID *string `json:"libraryId,omitempty" tf:"library_id,omitempty"`

	// The name of the item to be created in the content library.
	// The name of the content library item.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Virtual machine UUID to clone to content library.
	// The managed object ID of an existing VM to be cloned to the content library.
	SourceUUID *string `json:"sourceUuid,omitempty" tf:"source_uuid,omitempty"`

	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: ovf.
	// Type of content library item.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereContentLibraryItemObservation struct {

	// A description for the content library item.
	// Optional description of the content library item.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// File to import as the content library item.
	// ID of source VM of content library item.
	FileURL *string `json:"fileUrl,omitempty" tf:"file_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the content library in which to create the item.
	// ID of the content library to contain item
	LibraryID *string `json:"libraryId,omitempty" tf:"library_id,omitempty"`

	// The name of the item to be created in the content library.
	// The name of the content library item.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Virtual machine UUID to clone to content library.
	// The managed object ID of an existing VM to be cloned to the content library.
	SourceUUID *string `json:"sourceUuid,omitempty" tf:"source_uuid,omitempty"`

	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: ovf.
	// Type of content library item.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereContentLibraryItemParameters struct {

	// A description for the content library item.
	// Optional description of the content library item.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// File to import as the content library item.
	// ID of source VM of content library item.
	// +kubebuilder:validation:Optional
	FileURL *string `json:"fileUrl,omitempty" tf:"file_url,omitempty"`

	// The ID of the content library in which to create the item.
	// ID of the content library to contain item
	// +kubebuilder:validation:Optional
	LibraryID *string `json:"libraryId,omitempty" tf:"library_id,omitempty"`

	// The name of the item to be created in the content library.
	// The name of the content library item.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Virtual machine UUID to clone to content library.
	// The managed object ID of an existing VM to be cloned to the content library.
	// +kubebuilder:validation:Optional
	SourceUUID *string `json:"sourceUuid,omitempty" tf:"source_uuid,omitempty"`

	// Type of content library item.
	// One of "ovf", "iso", or "vm-template". Default: ovf.
	// Type of content library item.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// VSphereContentLibraryItemSpec defines the desired state of VSphereContentLibraryItem
type VSphereContentLibraryItemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereContentLibraryItemParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereContentLibraryItemInitParameters `json:"initProvider,omitempty"`
}

// VSphereContentLibraryItemStatus defines the observed state of VSphereContentLibraryItem.
type VSphereContentLibraryItemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereContentLibraryItemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereContentLibraryItem is the Schema for the VSphereContentLibraryItems API. Creates an item in a vSphere content library. Each item can contain multiple files.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereContentLibraryItem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.libraryId) || (has(self.initProvider) && has(self.initProvider.libraryId))",message="spec.forProvider.libraryId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VSphereContentLibraryItemSpec   `json:"spec"`
	Status VSphereContentLibraryItemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereContentLibraryItemList contains a list of VSphereContentLibraryItems
type VSphereContentLibraryItemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereContentLibraryItem `json:"items"`
}

// Repository type metadata.
var (
	VSphereContentLibraryItem_Kind             = "VSphereContentLibraryItem"
	VSphereContentLibraryItem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereContentLibraryItem_Kind}.String()
	VSphereContentLibraryItem_KindAPIVersion   = VSphereContentLibraryItem_Kind + "." + CRDGroupVersion.String()
	VSphereContentLibraryItem_GroupVersionKind = CRDGroupVersion.WithKind(VSphereContentLibraryItem_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereContentLibraryItem{}, &VSphereContentLibraryItemList{})
}
