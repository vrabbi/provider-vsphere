// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LinuxOptionsInitParameters struct {

	// The domain name for this virtual machine.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The hostname for this virtual machine.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Specifies whether or not the hardware clock should be in UTC or not.
	HwClockUtc *bool `json:"hwClockUtc,omitempty" tf:"hw_clock_utc,omitempty"`

	// The customization script to run before and or after guest customization
	ScriptTextSecretRef *v1.SecretKeySelector `json:"scriptTextSecretRef,omitempty" tf:"-"`

	// Customize the time zone on the VM. This should be a time zone-style entry, like America/Los_Angeles.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type LinuxOptionsObservation struct {

	// The domain name for this virtual machine.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The hostname for this virtual machine.
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// Specifies whether or not the hardware clock should be in UTC or not.
	HwClockUtc *bool `json:"hwClockUtc,omitempty" tf:"hw_clock_utc,omitempty"`

	// Customize the time zone on the VM. This should be a time zone-style entry, like America/Los_Angeles.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type LinuxOptionsParameters struct {

	// The domain name for this virtual machine.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The hostname for this virtual machine.
	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// Specifies whether or not the hardware clock should be in UTC or not.
	// +kubebuilder:validation:Optional
	HwClockUtc *bool `json:"hwClockUtc,omitempty" tf:"hw_clock_utc,omitempty"`

	// The customization script to run before and or after guest customization
	// +kubebuilder:validation:Optional
	ScriptTextSecretRef *v1.SecretKeySelector `json:"scriptTextSecretRef,omitempty" tf:"-"`

	// Customize the time zone on the VM. This should be a time zone-style entry, like America/Los_Angeles.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type NetworkInterfaceInitParameters struct {

	// A DNS search domain to add to the DNS configuration on the virtual machine.
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
	DNSServerList []*string `json:"dnsServerList,omitempty" tf:"dns_server_list,omitempty"`

	// The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
	IPv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address,omitempty"`

	// The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
	IPv4Netmask *float64 `json:"ipv4Netmask,omitempty" tf:"ipv4_netmask,omitempty"`

	// The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
	IPv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address,omitempty"`

	// The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
	IPv6Netmask *float64 `json:"ipv6Netmask,omitempty" tf:"ipv6_netmask,omitempty"`
}

type NetworkInterfaceObservation struct {

	// A DNS search domain to add to the DNS configuration on the virtual machine.
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
	DNSServerList []*string `json:"dnsServerList,omitempty" tf:"dns_server_list,omitempty"`

	// The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
	IPv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address,omitempty"`

	// The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
	IPv4Netmask *float64 `json:"ipv4Netmask,omitempty" tf:"ipv4_netmask,omitempty"`

	// The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
	IPv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address,omitempty"`

	// The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
	IPv6Netmask *float64 `json:"ipv6Netmask,omitempty" tf:"ipv6_netmask,omitempty"`
}

type NetworkInterfaceParameters struct {

	// A DNS search domain to add to the DNS configuration on the virtual machine.
	// +kubebuilder:validation:Optional
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// Network-interface specific DNS settings for Windows operating systems. Ignored on Linux.
	// +kubebuilder:validation:Optional
	DNSServerList []*string `json:"dnsServerList,omitempty" tf:"dns_server_list,omitempty"`

	// The IPv4 address assigned to this network adapter. If left blank, DHCP is used.
	// +kubebuilder:validation:Optional
	IPv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address,omitempty"`

	// The IPv4 CIDR netmask for the supplied IP address. Ignored if DHCP is selected.
	// +kubebuilder:validation:Optional
	IPv4Netmask *float64 `json:"ipv4Netmask,omitempty" tf:"ipv4_netmask,omitempty"`

	// The IPv6 address assigned to this network adapter. If left blank, default auto-configuration is used.
	// +kubebuilder:validation:Optional
	IPv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address,omitempty"`

	// The IPv6 CIDR netmask for the supplied IP address. Ignored if auto-configuration is selected.
	// +kubebuilder:validation:Optional
	IPv6Netmask *float64 `json:"ipv6Netmask,omitempty" tf:"ipv6_netmask,omitempty"`
}

type SpecInitParameters struct {

	// The list of DNS servers for a virtual network adapter with a static IP address.
	DNSServerList []*string `json:"dnsServerList,omitempty" tf:"dns_server_list,omitempty"`

	// A list of DNS search domains to add to the DNS configuration on the virtual machine.
	DNSSuffixList []*string `json:"dnsSuffixList,omitempty" tf:"dns_suffix_list,omitempty"`

	// The IPv4 default gateway when using network_interface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
	IPv4Gateway *string `json:"ipv4Gateway,omitempty" tf:"ipv4_gateway,omitempty"`

	// The IPv6 default gateway when using network_interface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
	IPv6Gateway *string `json:"ipv6Gateway,omitempty" tf:"ipv6_gateway,omitempty"`

	// A list of configuration options specific to Linux virtual machines.
	LinuxOptions []LinuxOptionsInitParameters `json:"linuxOptions,omitempty" tf:"linux_options,omitempty"`

	// A specification of network interface configuration options.
	NetworkInterface []NetworkInterfaceInitParameters `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// A list of configuration options specific to Windows virtual machines.
	WindowsOptions []WindowsOptionsInitParameters `json:"windowsOptions,omitempty" tf:"windows_options,omitempty"`

	// Use this option to specify a windows sysprep file directly.
	WindowsSysprepTextSecretRef *v1.SecretKeySelector `json:"windowsSysprepTextSecretRef,omitempty" tf:"-"`
}

type SpecObservation struct {

	// The list of DNS servers for a virtual network adapter with a static IP address.
	DNSServerList []*string `json:"dnsServerList,omitempty" tf:"dns_server_list,omitempty"`

	// A list of DNS search domains to add to the DNS configuration on the virtual machine.
	DNSSuffixList []*string `json:"dnsSuffixList,omitempty" tf:"dns_suffix_list,omitempty"`

	// The IPv4 default gateway when using network_interface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
	IPv4Gateway *string `json:"ipv4Gateway,omitempty" tf:"ipv4_gateway,omitempty"`

	// The IPv6 default gateway when using network_interface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
	IPv6Gateway *string `json:"ipv6Gateway,omitempty" tf:"ipv6_gateway,omitempty"`

	// A list of configuration options specific to Linux virtual machines.
	LinuxOptions []LinuxOptionsObservation `json:"linuxOptions,omitempty" tf:"linux_options,omitempty"`

	// A specification of network interface configuration options.
	NetworkInterface []NetworkInterfaceObservation `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// A list of configuration options specific to Windows virtual machines.
	WindowsOptions []WindowsOptionsObservation `json:"windowsOptions,omitempty" tf:"windows_options,omitempty"`
}

type SpecParameters struct {

	// The list of DNS servers for a virtual network adapter with a static IP address.
	// +kubebuilder:validation:Optional
	DNSServerList []*string `json:"dnsServerList,omitempty" tf:"dns_server_list,omitempty"`

	// A list of DNS search domains to add to the DNS configuration on the virtual machine.
	// +kubebuilder:validation:Optional
	DNSSuffixList []*string `json:"dnsSuffixList,omitempty" tf:"dns_suffix_list,omitempty"`

	// The IPv4 default gateway when using network_interface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
	// +kubebuilder:validation:Optional
	IPv4Gateway *string `json:"ipv4Gateway,omitempty" tf:"ipv4_gateway,omitempty"`

	// The IPv6 default gateway when using network_interface customization on the virtual machine. This address must be local to a static IPv4 address configured in an interface sub-resource.
	// +kubebuilder:validation:Optional
	IPv6Gateway *string `json:"ipv6Gateway,omitempty" tf:"ipv6_gateway,omitempty"`

	// A list of configuration options specific to Linux virtual machines.
	// +kubebuilder:validation:Optional
	LinuxOptions []LinuxOptionsParameters `json:"linuxOptions,omitempty" tf:"linux_options,omitempty"`

	// A specification of network interface configuration options.
	// +kubebuilder:validation:Optional
	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// A list of configuration options specific to Windows virtual machines.
	// +kubebuilder:validation:Optional
	WindowsOptions []WindowsOptionsParameters `json:"windowsOptions,omitempty" tf:"windows_options,omitempty"`

	// Use this option to specify a windows sysprep file directly.
	// +kubebuilder:validation:Optional
	WindowsSysprepTextSecretRef *v1.SecretKeySelector `json:"windowsSysprepTextSecretRef,omitempty" tf:"-"`
}

type VSphereGuestOSCustomizationInitParameters struct {

	// The description for the customization specification.
	// The description for the customization specification.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The name of the customization specification is the unique identifier per vCenter Server instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Container object for the Guest OS properties about to be customized . See virtual machine customizations
	Spec []SpecInitParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// The type of customization specification: One among: Windows, Linux.
	// The type of customization specification: One among: Windows, Linux.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereGuestOSCustomizationObservation struct {

	// The number of last changed version to the customization specification.
	// The number of last changed version to the customization specification.
	ChangeVersion *string `json:"changeVersion,omitempty" tf:"change_version,omitempty"`

	// The description for the customization specification.
	// The description for the customization specification.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time of last modification to the customization specification.
	// The time of last modification to the customization specification.
	LastUpdateTime *string `json:"lastUpdateTime,omitempty" tf:"last_update_time,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The name of the customization specification is the unique identifier per vCenter Server instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Container object for the Guest OS properties about to be customized . See virtual machine customizations
	Spec []SpecObservation `json:"spec,omitempty" tf:"spec,omitempty"`

	// The type of customization specification: One among: Windows, Linux.
	// The type of customization specification: One among: Windows, Linux.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereGuestOSCustomizationParameters struct {

	// The description for the customization specification.
	// The description for the customization specification.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Container object for the Guest OS properties about to be customized . See virtual machine customizations
	// +kubebuilder:validation:Optional
	Spec []SpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`

	// The type of customization specification: One among: Windows, Linux.
	// The type of customization specification: One among: Windows, Linux.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WindowsOptionsInitParameters struct {

	// The new administrator password for this virtual machine.
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// Specifies whether or not the VM automatically logs on as Administrator.
	AutoLogon *bool `json:"autoLogon,omitempty" tf:"auto_logon,omitempty"`

	// Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
	AutoLogonCount *float64 `json:"autoLogonCount,omitempty" tf:"auto_logon_count,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The host name for this virtual machine.
	ComputerName *string `json:"computerName,omitempty" tf:"computer_name,omitempty"`

	// The password of the domain administrator used to join this virtual machine to the domain.
	DomainAdminPasswordSecretRef *v1.SecretKeySelector `json:"domainAdminPasswordSecretRef,omitempty" tf:"-"`

	// The user account of the domain administrator used to join this virtual machine to the domain.
	DomainAdminUser *string `json:"domainAdminUser,omitempty" tf:"domain_admin_user,omitempty"`

	// The MachineObjectOU which specifies the full LDAP path name of the OU to which the virtual machine belongs.
	DomainOu *string `json:"domainOu,omitempty" tf:"domain_ou,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The full name of the user of this virtual machine.
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The domain that the virtual machine should join.
	JoinDomain *string `json:"joinDomain,omitempty" tf:"join_domain,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The organization name this virtual machine is being installed for.
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`

	// The product key for this virtual machine.
	ProductKeySecretRef *v1.SecretKeySelector `json:"productKeySecretRef,omitempty" tf:"-"`

	// A list of commands to run at first user logon, after guest customization.
	RunOnceCommandList []*string `json:"runOnceCommandList,omitempty" tf:"run_once_command_list,omitempty"`

	// The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
	TimeZone *float64 `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The workgroup for this virtual machine if not joining a domain.
	Workgroup *string `json:"workgroup,omitempty" tf:"workgroup,omitempty"`
}

type WindowsOptionsObservation struct {

	// Specifies whether or not the VM automatically logs on as Administrator.
	AutoLogon *bool `json:"autoLogon,omitempty" tf:"auto_logon,omitempty"`

	// Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
	AutoLogonCount *float64 `json:"autoLogonCount,omitempty" tf:"auto_logon_count,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The host name for this virtual machine.
	ComputerName *string `json:"computerName,omitempty" tf:"computer_name,omitempty"`

	// The user account of the domain administrator used to join this virtual machine to the domain.
	DomainAdminUser *string `json:"domainAdminUser,omitempty" tf:"domain_admin_user,omitempty"`

	// The MachineObjectOU which specifies the full LDAP path name of the OU to which the virtual machine belongs.
	DomainOu *string `json:"domainOu,omitempty" tf:"domain_ou,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The full name of the user of this virtual machine.
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The domain that the virtual machine should join.
	JoinDomain *string `json:"joinDomain,omitempty" tf:"join_domain,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The organization name this virtual machine is being installed for.
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`

	// A list of commands to run at first user logon, after guest customization.
	RunOnceCommandList []*string `json:"runOnceCommandList,omitempty" tf:"run_once_command_list,omitempty"`

	// The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
	TimeZone *float64 `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The workgroup for this virtual machine if not joining a domain.
	Workgroup *string `json:"workgroup,omitempty" tf:"workgroup,omitempty"`
}

type WindowsOptionsParameters struct {

	// The new administrator password for this virtual machine.
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// Specifies whether or not the VM automatically logs on as Administrator.
	// +kubebuilder:validation:Optional
	AutoLogon *bool `json:"autoLogon,omitempty" tf:"auto_logon,omitempty"`

	// Specifies how many times the VM should auto-logon the Administrator account when auto_logon is true.
	// +kubebuilder:validation:Optional
	AutoLogonCount *float64 `json:"autoLogonCount,omitempty" tf:"auto_logon_count,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The host name for this virtual machine.
	// +kubebuilder:validation:Optional
	ComputerName *string `json:"computerName" tf:"computer_name,omitempty"`

	// The password of the domain administrator used to join this virtual machine to the domain.
	// +kubebuilder:validation:Optional
	DomainAdminPasswordSecretRef *v1.SecretKeySelector `json:"domainAdminPasswordSecretRef,omitempty" tf:"-"`

	// The user account of the domain administrator used to join this virtual machine to the domain.
	// +kubebuilder:validation:Optional
	DomainAdminUser *string `json:"domainAdminUser,omitempty" tf:"domain_admin_user,omitempty"`

	// The MachineObjectOU which specifies the full LDAP path name of the OU to which the virtual machine belongs.
	// +kubebuilder:validation:Optional
	DomainOu *string `json:"domainOu,omitempty" tf:"domain_ou,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The full name of the user of this virtual machine.
	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The domain that the virtual machine should join.
	// +kubebuilder:validation:Optional
	JoinDomain *string `json:"joinDomain,omitempty" tf:"join_domain,omitempty"`

	// The name of the customization specification is the unique identifier per vCenter Server instance.
	// The organization name this virtual machine is being installed for.
	// +kubebuilder:validation:Optional
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`

	// The product key for this virtual machine.
	// +kubebuilder:validation:Optional
	ProductKeySecretRef *v1.SecretKeySelector `json:"productKeySecretRef,omitempty" tf:"-"`

	// A list of commands to run at first user logon, after guest customization.
	// +kubebuilder:validation:Optional
	RunOnceCommandList []*string `json:"runOnceCommandList,omitempty" tf:"run_once_command_list,omitempty"`

	// The new time zone for the virtual machine. This is a sysprep-dictated timezone code.
	// +kubebuilder:validation:Optional
	TimeZone *float64 `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The workgroup for this virtual machine if not joining a domain.
	// +kubebuilder:validation:Optional
	Workgroup *string `json:"workgroup,omitempty" tf:"workgroup,omitempty"`
}

// VSphereGuestOSCustomizationSpec defines the desired state of VSphereGuestOSCustomization
type VSphereGuestOSCustomizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereGuestOSCustomizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereGuestOSCustomizationInitParameters `json:"initProvider,omitempty"`
}

// VSphereGuestOSCustomizationStatus defines the observed state of VSphereGuestOSCustomization.
type VSphereGuestOSCustomizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereGuestOSCustomizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereGuestOSCustomization is the Schema for the VSphereGuestOSCustomizations API. Provides a VMware vSphere customization specification resource. This can be used to apply a customization specification to the guest operating system of a virtual machine after cloning.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereGuestOSCustomization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.spec) || (has(self.initProvider) && has(self.initProvider.spec))",message="spec.forProvider.spec is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   VSphereGuestOSCustomizationSpec   `json:"spec"`
	Status VSphereGuestOSCustomizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereGuestOSCustomizationList contains a list of VSphereGuestOSCustomizations
type VSphereGuestOSCustomizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereGuestOSCustomization `json:"items"`
}

// Repository type metadata.
var (
	VSphereGuestOSCustomization_Kind             = "VSphereGuestOSCustomization"
	VSphereGuestOSCustomization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereGuestOSCustomization_Kind}.String()
	VSphereGuestOSCustomization_KindAPIVersion   = VSphereGuestOSCustomization_Kind + "." + CRDGroupVersion.String()
	VSphereGuestOSCustomization_GroupVersionKind = CRDGroupVersion.WithKind(VSphereGuestOSCustomization_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereGuestOSCustomization{}, &VSphereGuestOSCustomizationList{})
}
