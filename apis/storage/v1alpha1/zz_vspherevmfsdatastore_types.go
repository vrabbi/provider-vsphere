// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereVmfsDatastoreInitParameters struct {

	// Map of custom attribute ids to attribute
	// value string to set on datastore resource. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object
	// ID of a datastore cluster to put this datastore in.
	// Conflicts with folder.
	// The managed object ID of the datastore cluster to place the datastore in.
	DatastoreClusterID *string `json:"datastoreClusterId,omitempty" tf:"datastore_cluster_id,omitempty"`

	// The disks to use with the datastore.
	// The disks to add to the datastore.
	Disks []*string `json:"disks,omitempty" tf:"disks,omitempty"`

	// The relative path to a folder to put this datastore in.
	// This is a path relative to the datacenter you are deploying the datastore to. Conflicts with
	// datastore_cluster_id.
	// The path to the datastore folder to put the datastore in.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The managed object ID of
	// the host to set the datastore up on. Note that this is not necessarily the
	// only host that the datastore will be set up on - see
	// here for more info. Forces a
	// new resource if changed.
	// The managed object ID of the host to set up the datastore on.
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	// The name of the datastore. Forces a new resource if
	// changed.
	// The name of the datastore.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereVmfsDatastoreObservation struct {

	// The connectivity status of the datastore. If this is false,
	// some other computed attributes may be out of date.
	// The connectivity status of the datastore. If this is false, some other computed attributes may be out of date.
	Accessible *bool `json:"accessible,omitempty" tf:"accessible,omitempty"`

	// Maximum capacity of the datastore, in megabytes.
	// Maximum capacity of the datastore, in MB.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Map of custom attribute ids to attribute
	// value string to set on datastore resource. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object
	// ID of a datastore cluster to put this datastore in.
	// Conflicts with folder.
	// The managed object ID of the datastore cluster to place the datastore in.
	DatastoreClusterID *string `json:"datastoreClusterId,omitempty" tf:"datastore_cluster_id,omitempty"`

	// The disks to use with the datastore.
	// The disks to add to the datastore.
	Disks []*string `json:"disks,omitempty" tf:"disks,omitempty"`

	// The relative path to a folder to put this datastore in.
	// This is a path relative to the datacenter you are deploying the datastore to. Conflicts with
	// datastore_cluster_id.
	// The path to the datastore folder to put the datastore in.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// Available space of this datastore, in megabytes.
	// Available space of this datastore, in MB.
	FreeSpace *float64 `json:"freeSpace,omitempty" tf:"free_space,omitempty"`

	// The managed object ID of
	// the host to set the datastore up on. Note that this is not necessarily the
	// only host that the datastore will be set up on - see
	// here for more info. Forces a
	// new resource if changed.
	// The managed object ID of the host to set up the datastore on.
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	// The managed object reference ID of the datastore.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current maintenance mode state of the datastore.
	// The current maintenance mode state of the datastore.
	MaintenanceMode *string `json:"maintenanceMode,omitempty" tf:"maintenance_mode,omitempty"`

	// If true, more than one host in the datacenter has
	// been configured with access to the datastore.
	// If true, more than one host in the datacenter has been configured with access to the datastore.
	MultipleHostAccess *bool `json:"multipleHostAccess,omitempty" tf:"multiple_host_access,omitempty"`

	// The name of the datastore. Forces a new resource if
	// changed.
	// The name of the datastore.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The unique locator for the datastore.
	// The unique locator for the datastore.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Total additional storage space, in megabytes,
	// potentially used by all virtual machines on this datastore.
	// Total additional storage space, in MB, potentially used by all virtual machines on this datastore.
	UncommittedSpace *float64 `json:"uncommittedSpace,omitempty" tf:"uncommitted_space,omitempty"`
}

type VSphereVmfsDatastoreParameters struct {

	// Map of custom attribute ids to attribute
	// value string to set on datastore resource. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object
	// ID of a datastore cluster to put this datastore in.
	// Conflicts with folder.
	// The managed object ID of the datastore cluster to place the datastore in.
	// +kubebuilder:validation:Optional
	DatastoreClusterID *string `json:"datastoreClusterId,omitempty" tf:"datastore_cluster_id,omitempty"`

	// The disks to use with the datastore.
	// The disks to add to the datastore.
	// +kubebuilder:validation:Optional
	Disks []*string `json:"disks,omitempty" tf:"disks,omitempty"`

	// The relative path to a folder to put this datastore in.
	// This is a path relative to the datacenter you are deploying the datastore to. Conflicts with
	// datastore_cluster_id.
	// The path to the datastore folder to put the datastore in.
	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The managed object ID of
	// the host to set the datastore up on. Note that this is not necessarily the
	// only host that the datastore will be set up on - see
	// here for more info. Forces a
	// new resource if changed.
	// The managed object ID of the host to set up the datastore on.
	// +kubebuilder:validation:Optional
	HostSystemID *string `json:"hostSystemId,omitempty" tf:"host_system_id,omitempty"`

	// The name of the datastore. Forces a new resource if
	// changed.
	// The name of the datastore.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VSphereVmfsDatastoreSpec defines the desired state of VSphereVmfsDatastore
type VSphereVmfsDatastoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVmfsDatastoreParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereVmfsDatastoreInitParameters `json:"initProvider,omitempty"`
}

// VSphereVmfsDatastoreStatus defines the observed state of VSphereVmfsDatastore.
type VSphereVmfsDatastoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVmfsDatastoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereVmfsDatastore is the Schema for the VSphereVmfsDatastores API. Provides a vSphere VMFS datastore resource. This can be used to configure a VMFS datastore on a host or set of hosts.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVmfsDatastore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.disks) || (has(self.initProvider) && has(self.initProvider.disks))",message="spec.forProvider.disks is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostSystemId) || (has(self.initProvider) && has(self.initProvider.hostSystemId))",message="spec.forProvider.hostSystemId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VSphereVmfsDatastoreSpec   `json:"spec"`
	Status VSphereVmfsDatastoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVmfsDatastoreList contains a list of VSphereVmfsDatastores
type VSphereVmfsDatastoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVmfsDatastore `json:"items"`
}

// Repository type metadata.
var (
	VSphereVmfsDatastore_Kind             = "VSphereVmfsDatastore"
	VSphereVmfsDatastore_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVmfsDatastore_Kind}.String()
	VSphereVmfsDatastore_KindAPIVersion   = VSphereVmfsDatastore_Kind + "." + CRDGroupVersion.String()
	VSphereVmfsDatastore_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVmfsDatastore_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVmfsDatastore{}, &VSphereVmfsDatastoreList{})
}
