// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereDatastoreClusterInitParameters struct {

	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	// The managed object ID of the datacenter to put the datastore cluster in.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.
	// The name of the folder to locate the datastore cluster in.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The name of the datastore cluster.
	// Name for the new storage pod.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Advanced configuration options for storage DRS.
	// +mapType=granular
	SdrsAdvancedOptions map[string]*string `json:"sdrsAdvancedOptions,omitempty" tf:"sdrs_advanced_options,omitempty"`

	// The global automation level for all
	// virtual machines in this datastore cluster. Default: manual.
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel *string `json:"sdrsAutomationLevel,omitempty" tf:"sdrs_automation_level,omitempty"`

	// When true, all disks in a
	// single virtual machine will be kept on the same datastore. Default: true.
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVMAffinity *bool `json:"sdrsDefaultIntraVmAffinity,omitempty" tf:"sdrs_default_intra_vm_affinity,omitempty"`

	// Enable Storage DRS for this datastore cluster.
	// Default: false.
	// Enable storage DRS for this datastore cluster.
	SdrsEnabled *bool `json:"sdrsEnabled,omitempty" tf:"sdrs_enabled,omitempty"`

	// The threshold, in GB, that storage
	// DRS uses to make decisions to migrate VMs out of a datastore. Default: 50
	// GB.
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold *float64 `json:"sdrsFreeSpaceThreshold,omitempty" tf:"sdrs_free_space_threshold,omitempty"`

	// The free space threshold to use. When set to utilization, drs_space_utilization_threshold is used, and when set to freeSpace, drs_free_space_threshold is used.
	SdrsFreeSpaceThresholdMode *string `json:"sdrsFreeSpaceThresholdMode,omitempty" tf:"sdrs_free_space_threshold_mode,omitempty"`

	// The threshold, in
	// percent of used space, that storage DRS uses to make decisions to migrate VMs
	// out of a datastore. Default: 80 percent.
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to balance the space.
	SdrsFreeSpaceUtilizationDifference *float64 `json:"sdrsFreeSpaceUtilizationDifference,omitempty" tf:"sdrs_free_space_utilization_difference,omitempty"`

	// Overrides the default
	// automation settings when correcting I/O load imbalances.
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel *string `json:"sdrsIoBalanceAutomationLevel,omitempty" tf:"sdrs_io_balance_automation_level,omitempty"`

	// The I/O latency threshold, in
	// milliseconds, that storage DRS uses to make recommendations to move disks
	// from this datastore. Default: 15 seconds.
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this datastore.
	SdrsIoLatencyThreshold *float64 `json:"sdrsIoLatencyThreshold,omitempty" tf:"sdrs_io_latency_threshold,omitempty"`

	// Enable I/O load balancing for
	// this datastore cluster. Default: true.
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled *bool `json:"sdrsIoLoadBalanceEnabled,omitempty" tf:"sdrs_io_load_balance_enabled,omitempty"`

	// The difference between load
	// in datastores in the cluster before storage DRS makes recommendations to
	// balance the load. Default: 5 percent.
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold *float64 `json:"sdrsIoLoadImbalanceThreshold,omitempty" tf:"sdrs_io_load_imbalance_threshold,omitempty"`

	// The threshold of reservable
	// IOPS of all virtual machines on the datastore before storage DRS makes
	// recommendations to move VMs off of a datastore. Note that this setting should
	// only be set if sdrs_io_reservable_percent_threshold cannot make an accurate
	// estimate of the capacity of the datastores in your cluster, and should be set
	// to roughly 50-60% of the worst case peak performance of the backing LUNs.
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to move VMs off of a datastore.
	SdrsIoReservableIopsThreshold *float64 `json:"sdrsIoReservableIopsThreshold,omitempty" tf:"sdrs_io_reservable_iops_threshold,omitempty"`

	// The threshold, in
	// percent, of actual estimated performance of the datastore (in IOPS) that
	// storage DRS uses to make recommendations to move VMs off of a datastore when
	// the total reservable IOPS exceeds the threshold. Default: 60 percent.
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold *float64 `json:"sdrsIoReservablePercentThreshold,omitempty" tf:"sdrs_io_reservable_percent_threshold,omitempty"`

	// The reservable IOPS
	// threshold setting to use, sdrs_io_reservable_percent_threshold in the event
	// of automatic, or sdrs_io_reservable_iops_threshold in the event of
	// manual. Default: automatic.
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode *string `json:"sdrsIoReservableThresholdMode,omitempty" tf:"sdrs_io_reservable_threshold_mode,omitempty"`

	// The storage DRS poll interval, in
	// minutes. Default: 480 minutes.
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval *float64 `json:"sdrsLoadBalanceInterval,omitempty" tf:"sdrs_load_balance_interval,omitempty"`

	// Overrides the default
	// automation settings when correcting storage and VM policy violations.
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel *string `json:"sdrsPolicyEnforcementAutomationLevel,omitempty" tf:"sdrs_policy_enforcement_automation_level,omitempty"`

	// Overrides the default
	// automation settings when correcting affinity rule violations.
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel *string `json:"sdrsRuleEnforcementAutomationLevel,omitempty" tf:"sdrs_rule_enforcement_automation_level,omitempty"`

	// Overrides the default
	// automation settings when correcting disk space imbalances.
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel *string `json:"sdrsSpaceBalanceAutomationLevel,omitempty" tf:"sdrs_space_balance_automation_level,omitempty"`

	// Runtime thresholds govern
	// when Storage DRS performs or recommends migrations
	// (based on the selected automation level). Default: 80 percent.
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold *float64 `json:"sdrsSpaceUtilizationThreshold,omitempty" tf:"sdrs_space_utilization_threshold,omitempty"`

	// Overrides the default
	// automation settings when generating recommendations for datastore evacuation.
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVMEvacuationAutomationLevel *string `json:"sdrsVmEvacuationAutomationLevel,omitempty" tf:"sdrs_vm_evacuation_automation_level,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereDatastoreClusterObservation struct {

	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	// The managed object ID of the datacenter to put the datastore cluster in.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.
	// The name of the folder to locate the datastore cluster in.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the datastore cluster.
	// Name for the new storage pod.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Advanced configuration options for storage DRS.
	// +mapType=granular
	SdrsAdvancedOptions map[string]*string `json:"sdrsAdvancedOptions,omitempty" tf:"sdrs_advanced_options,omitempty"`

	// The global automation level for all
	// virtual machines in this datastore cluster. Default: manual.
	// The default automation level for all virtual machines in this storage cluster.
	SdrsAutomationLevel *string `json:"sdrsAutomationLevel,omitempty" tf:"sdrs_automation_level,omitempty"`

	// When true, all disks in a
	// single virtual machine will be kept on the same datastore. Default: true.
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	SdrsDefaultIntraVMAffinity *bool `json:"sdrsDefaultIntraVmAffinity,omitempty" tf:"sdrs_default_intra_vm_affinity,omitempty"`

	// Enable Storage DRS for this datastore cluster.
	// Default: false.
	// Enable storage DRS for this datastore cluster.
	SdrsEnabled *bool `json:"sdrsEnabled,omitempty" tf:"sdrs_enabled,omitempty"`

	// The threshold, in GB, that storage
	// DRS uses to make decisions to migrate VMs out of a datastore. Default: 50
	// GB.
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsFreeSpaceThreshold *float64 `json:"sdrsFreeSpaceThreshold,omitempty" tf:"sdrs_free_space_threshold,omitempty"`

	// The free space threshold to use. When set to utilization, drs_space_utilization_threshold is used, and when set to freeSpace, drs_free_space_threshold is used.
	SdrsFreeSpaceThresholdMode *string `json:"sdrsFreeSpaceThresholdMode,omitempty" tf:"sdrs_free_space_threshold_mode,omitempty"`

	// The threshold, in
	// percent of used space, that storage DRS uses to make decisions to migrate VMs
	// out of a datastore. Default: 80 percent.
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to balance the space.
	SdrsFreeSpaceUtilizationDifference *float64 `json:"sdrsFreeSpaceUtilizationDifference,omitempty" tf:"sdrs_free_space_utilization_difference,omitempty"`

	// Overrides the default
	// automation settings when correcting I/O load imbalances.
	// Overrides the default automation settings when correcting I/O load imbalances.
	SdrsIoBalanceAutomationLevel *string `json:"sdrsIoBalanceAutomationLevel,omitempty" tf:"sdrs_io_balance_automation_level,omitempty"`

	// The I/O latency threshold, in
	// milliseconds, that storage DRS uses to make recommendations to move disks
	// from this datastore. Default: 15 seconds.
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this datastore.
	SdrsIoLatencyThreshold *float64 `json:"sdrsIoLatencyThreshold,omitempty" tf:"sdrs_io_latency_threshold,omitempty"`

	// Enable I/O load balancing for
	// this datastore cluster. Default: true.
	// Enable I/O load balancing for this datastore cluster.
	SdrsIoLoadBalanceEnabled *bool `json:"sdrsIoLoadBalanceEnabled,omitempty" tf:"sdrs_io_load_balance_enabled,omitempty"`

	// The difference between load
	// in datastores in the cluster before storage DRS makes recommendations to
	// balance the load. Default: 5 percent.
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	SdrsIoLoadImbalanceThreshold *float64 `json:"sdrsIoLoadImbalanceThreshold,omitempty" tf:"sdrs_io_load_imbalance_threshold,omitempty"`

	// The threshold of reservable
	// IOPS of all virtual machines on the datastore before storage DRS makes
	// recommendations to move VMs off of a datastore. Note that this setting should
	// only be set if sdrs_io_reservable_percent_threshold cannot make an accurate
	// estimate of the capacity of the datastores in your cluster, and should be set
	// to roughly 50-60% of the worst case peak performance of the backing LUNs.
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to move VMs off of a datastore.
	SdrsIoReservableIopsThreshold *float64 `json:"sdrsIoReservableIopsThreshold,omitempty" tf:"sdrs_io_reservable_iops_threshold,omitempty"`

	// The threshold, in
	// percent, of actual estimated performance of the datastore (in IOPS) that
	// storage DRS uses to make recommendations to move VMs off of a datastore when
	// the total reservable IOPS exceeds the threshold. Default: 60 percent.
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	SdrsIoReservablePercentThreshold *float64 `json:"sdrsIoReservablePercentThreshold,omitempty" tf:"sdrs_io_reservable_percent_threshold,omitempty"`

	// The reservable IOPS
	// threshold setting to use, sdrs_io_reservable_percent_threshold in the event
	// of automatic, or sdrs_io_reservable_iops_threshold in the event of
	// manual. Default: automatic.
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	SdrsIoReservableThresholdMode *string `json:"sdrsIoReservableThresholdMode,omitempty" tf:"sdrs_io_reservable_threshold_mode,omitempty"`

	// The storage DRS poll interval, in
	// minutes. Default: 480 minutes.
	// The storage DRS poll interval, in minutes.
	SdrsLoadBalanceInterval *float64 `json:"sdrsLoadBalanceInterval,omitempty" tf:"sdrs_load_balance_interval,omitempty"`

	// Overrides the default
	// automation settings when correcting storage and VM policy violations.
	// Overrides the default automation settings when correcting storage and VM policy violations.
	SdrsPolicyEnforcementAutomationLevel *string `json:"sdrsPolicyEnforcementAutomationLevel,omitempty" tf:"sdrs_policy_enforcement_automation_level,omitempty"`

	// Overrides the default
	// automation settings when correcting affinity rule violations.
	// Overrides the default automation settings when correcting affinity rule violations.
	SdrsRuleEnforcementAutomationLevel *string `json:"sdrsRuleEnforcementAutomationLevel,omitempty" tf:"sdrs_rule_enforcement_automation_level,omitempty"`

	// Overrides the default
	// automation settings when correcting disk space imbalances.
	// Overrides the default automation settings when correcting disk space imbalances.
	SdrsSpaceBalanceAutomationLevel *string `json:"sdrsSpaceBalanceAutomationLevel,omitempty" tf:"sdrs_space_balance_automation_level,omitempty"`

	// Runtime thresholds govern
	// when Storage DRS performs or recommends migrations
	// (based on the selected automation level). Default: 80 percent.
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	SdrsSpaceUtilizationThreshold *float64 `json:"sdrsSpaceUtilizationThreshold,omitempty" tf:"sdrs_space_utilization_threshold,omitempty"`

	// Overrides the default
	// automation settings when generating recommendations for datastore evacuation.
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	SdrsVMEvacuationAutomationLevel *string `json:"sdrsVmEvacuationAutomationLevel,omitempty" tf:"sdrs_vm_evacuation_automation_level,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereDatastoreClusterParameters struct {

	// A map of custom attribute ids to attribute
	// value strings to set for the datastore cluster. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The managed object ID of
	// the datacenter to create the datastore cluster in. Forces a new resource if
	// changed.
	// The managed object ID of the datacenter to put the datastore cluster in.
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The relative path to a folder to put this datastore
	// cluster in.  This is a path relative to the datacenter you are deploying the
	// datastore to.
	// The name of the folder to locate the datastore cluster in.
	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The name of the datastore cluster.
	// Name for the new storage pod.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Advanced configuration options for storage DRS.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	SdrsAdvancedOptions map[string]*string `json:"sdrsAdvancedOptions,omitempty" tf:"sdrs_advanced_options,omitempty"`

	// The global automation level for all
	// virtual machines in this datastore cluster. Default: manual.
	// The default automation level for all virtual machines in this storage cluster.
	// +kubebuilder:validation:Optional
	SdrsAutomationLevel *string `json:"sdrsAutomationLevel,omitempty" tf:"sdrs_automation_level,omitempty"`

	// When true, all disks in a
	// single virtual machine will be kept on the same datastore. Default: true.
	// When true, storage DRS keeps VMDKs for individual VMs on the same datastore by default.
	// +kubebuilder:validation:Optional
	SdrsDefaultIntraVMAffinity *bool `json:"sdrsDefaultIntraVmAffinity,omitempty" tf:"sdrs_default_intra_vm_affinity,omitempty"`

	// Enable Storage DRS for this datastore cluster.
	// Default: false.
	// Enable storage DRS for this datastore cluster.
	// +kubebuilder:validation:Optional
	SdrsEnabled *bool `json:"sdrsEnabled,omitempty" tf:"sdrs_enabled,omitempty"`

	// The threshold, in GB, that storage
	// DRS uses to make decisions to migrate VMs out of a datastore. Default: 50
	// GB.
	// The threshold, in GB, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	// +kubebuilder:validation:Optional
	SdrsFreeSpaceThreshold *float64 `json:"sdrsFreeSpaceThreshold,omitempty" tf:"sdrs_free_space_threshold,omitempty"`

	// The free space threshold to use. When set to utilization, drs_space_utilization_threshold is used, and when set to freeSpace, drs_free_space_threshold is used.
	// +kubebuilder:validation:Optional
	SdrsFreeSpaceThresholdMode *string `json:"sdrsFreeSpaceThresholdMode,omitempty" tf:"sdrs_free_space_threshold_mode,omitempty"`

	// The threshold, in
	// percent of used space, that storage DRS uses to make decisions to migrate VMs
	// out of a datastore. Default: 80 percent.
	// The threshold, in percent, of difference between space utilization in datastores before storage DRS makes decisions to balance the space.
	// +kubebuilder:validation:Optional
	SdrsFreeSpaceUtilizationDifference *float64 `json:"sdrsFreeSpaceUtilizationDifference,omitempty" tf:"sdrs_free_space_utilization_difference,omitempty"`

	// Overrides the default
	// automation settings when correcting I/O load imbalances.
	// Overrides the default automation settings when correcting I/O load imbalances.
	// +kubebuilder:validation:Optional
	SdrsIoBalanceAutomationLevel *string `json:"sdrsIoBalanceAutomationLevel,omitempty" tf:"sdrs_io_balance_automation_level,omitempty"`

	// The I/O latency threshold, in
	// milliseconds, that storage DRS uses to make recommendations to move disks
	// from this datastore. Default: 15 seconds.
	// The I/O latency threshold, in milliseconds, that storage DRS uses to make recommendations to move disks from this datastore.
	// +kubebuilder:validation:Optional
	SdrsIoLatencyThreshold *float64 `json:"sdrsIoLatencyThreshold,omitempty" tf:"sdrs_io_latency_threshold,omitempty"`

	// Enable I/O load balancing for
	// this datastore cluster. Default: true.
	// Enable I/O load balancing for this datastore cluster.
	// +kubebuilder:validation:Optional
	SdrsIoLoadBalanceEnabled *bool `json:"sdrsIoLoadBalanceEnabled,omitempty" tf:"sdrs_io_load_balance_enabled,omitempty"`

	// The difference between load
	// in datastores in the cluster before storage DRS makes recommendations to
	// balance the load. Default: 5 percent.
	// The difference between load in datastores in the cluster before storage DRS makes recommendations to balance the load.
	// +kubebuilder:validation:Optional
	SdrsIoLoadImbalanceThreshold *float64 `json:"sdrsIoLoadImbalanceThreshold,omitempty" tf:"sdrs_io_load_imbalance_threshold,omitempty"`

	// The threshold of reservable
	// IOPS of all virtual machines on the datastore before storage DRS makes
	// recommendations to move VMs off of a datastore. Note that this setting should
	// only be set if sdrs_io_reservable_percent_threshold cannot make an accurate
	// estimate of the capacity of the datastores in your cluster, and should be set
	// to roughly 50-60% of the worst case peak performance of the backing LUNs.
	// The threshold of reservable IOPS of all virtual machines on the datastore before storage DRS makes recommendations to move VMs off of a datastore.
	// +kubebuilder:validation:Optional
	SdrsIoReservableIopsThreshold *float64 `json:"sdrsIoReservableIopsThreshold,omitempty" tf:"sdrs_io_reservable_iops_threshold,omitempty"`

	// The threshold, in
	// percent, of actual estimated performance of the datastore (in IOPS) that
	// storage DRS uses to make recommendations to move VMs off of a datastore when
	// the total reservable IOPS exceeds the threshold. Default: 60 percent.
	// The threshold, in percent, of actual estimated performance of the datastore (in IOPS) that storage DRS uses to make recommendations to move VMs off of a datastore when the total reservable IOPS exceeds the threshold.
	// +kubebuilder:validation:Optional
	SdrsIoReservablePercentThreshold *float64 `json:"sdrsIoReservablePercentThreshold,omitempty" tf:"sdrs_io_reservable_percent_threshold,omitempty"`

	// The reservable IOPS
	// threshold setting to use, sdrs_io_reservable_percent_threshold in the event
	// of automatic, or sdrs_io_reservable_iops_threshold in the event of
	// manual. Default: automatic.
	// The reservable IOPS threshold to use, percent in the event of automatic, or manual threshold in the event of manual.
	// +kubebuilder:validation:Optional
	SdrsIoReservableThresholdMode *string `json:"sdrsIoReservableThresholdMode,omitempty" tf:"sdrs_io_reservable_threshold_mode,omitempty"`

	// The storage DRS poll interval, in
	// minutes. Default: 480 minutes.
	// The storage DRS poll interval, in minutes.
	// +kubebuilder:validation:Optional
	SdrsLoadBalanceInterval *float64 `json:"sdrsLoadBalanceInterval,omitempty" tf:"sdrs_load_balance_interval,omitempty"`

	// Overrides the default
	// automation settings when correcting storage and VM policy violations.
	// Overrides the default automation settings when correcting storage and VM policy violations.
	// +kubebuilder:validation:Optional
	SdrsPolicyEnforcementAutomationLevel *string `json:"sdrsPolicyEnforcementAutomationLevel,omitempty" tf:"sdrs_policy_enforcement_automation_level,omitempty"`

	// Overrides the default
	// automation settings when correcting affinity rule violations.
	// Overrides the default automation settings when correcting affinity rule violations.
	// +kubebuilder:validation:Optional
	SdrsRuleEnforcementAutomationLevel *string `json:"sdrsRuleEnforcementAutomationLevel,omitempty" tf:"sdrs_rule_enforcement_automation_level,omitempty"`

	// Overrides the default
	// automation settings when correcting disk space imbalances.
	// Overrides the default automation settings when correcting disk space imbalances.
	// +kubebuilder:validation:Optional
	SdrsSpaceBalanceAutomationLevel *string `json:"sdrsSpaceBalanceAutomationLevel,omitempty" tf:"sdrs_space_balance_automation_level,omitempty"`

	// Runtime thresholds govern
	// when Storage DRS performs or recommends migrations
	// (based on the selected automation level). Default: 80 percent.
	// The threshold, in percent of used space, that storage DRS uses to make decisions to migrate VMs out of a datastore.
	// +kubebuilder:validation:Optional
	SdrsSpaceUtilizationThreshold *float64 `json:"sdrsSpaceUtilizationThreshold,omitempty" tf:"sdrs_space_utilization_threshold,omitempty"`

	// Overrides the default
	// automation settings when generating recommendations for datastore evacuation.
	// Overrides the default automation settings when generating recommendations for datastore evacuation.
	// +kubebuilder:validation:Optional
	SdrsVMEvacuationAutomationLevel *string `json:"sdrsVmEvacuationAutomationLevel,omitempty" tf:"sdrs_vm_evacuation_automation_level,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VSphereDatastoreClusterSpec defines the desired state of VSphereDatastoreCluster
type VSphereDatastoreClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereDatastoreClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereDatastoreClusterInitParameters `json:"initProvider,omitempty"`
}

// VSphereDatastoreClusterStatus defines the observed state of VSphereDatastoreCluster.
type VSphereDatastoreClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereDatastoreClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereDatastoreCluster is the Schema for the VSphereDatastoreClusters API. Provides a vSphere datastore cluster resource. This can be used to create and manage datastore clusters.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereDatastoreCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datacenterId) || (has(self.initProvider) && has(self.initProvider.datacenterId))",message="spec.forProvider.datacenterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VSphereDatastoreClusterSpec   `json:"spec"`
	Status VSphereDatastoreClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDatastoreClusterList contains a list of VSphereDatastoreClusters
type VSphereDatastoreClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereDatastoreCluster `json:"items"`
}

// Repository type metadata.
var (
	VSphereDatastoreCluster_Kind             = "VSphereDatastoreCluster"
	VSphereDatastoreCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereDatastoreCluster_Kind}.String()
	VSphereDatastoreCluster_KindAPIVersion   = VSphereDatastoreCluster_Kind + "." + CRDGroupVersion.String()
	VSphereDatastoreCluster_GroupVersionKind = CRDGroupVersion.WithKind(VSphereDatastoreCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereDatastoreCluster{}, &VSphereDatastoreClusterList{})
}
