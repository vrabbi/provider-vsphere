// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagRulesInitParameters struct {

	// Include datastores with the given tags or exclude. Default true.
	// Whether to include or exclude datastores tagged with the provided tags
	IncludeDatastoresWithTags *bool `json:"includeDatastoresWithTags,omitempty" tf:"include_datastores_with_tags,omitempty"`

	// Name of the tag category.
	// The tag category to select the tags from.
	TagCategory *string `json:"tagCategory,omitempty" tf:"tag_category,omitempty"`

	// List of Name of tags to select from the given category.
	// The tags to use for creating a tag-based vm placement rule.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagRulesObservation struct {

	// Include datastores with the given tags or exclude. Default true.
	// Whether to include or exclude datastores tagged with the provided tags
	IncludeDatastoresWithTags *bool `json:"includeDatastoresWithTags,omitempty" tf:"include_datastores_with_tags,omitempty"`

	// Name of the tag category.
	// The tag category to select the tags from.
	TagCategory *string `json:"tagCategory,omitempty" tf:"tag_category,omitempty"`

	// List of Name of tags to select from the given category.
	// The tags to use for creating a tag-based vm placement rule.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type TagRulesParameters struct {

	// Include datastores with the given tags or exclude. Default true.
	// Whether to include or exclude datastores tagged with the provided tags
	// +kubebuilder:validation:Optional
	IncludeDatastoresWithTags *bool `json:"includeDatastoresWithTags,omitempty" tf:"include_datastores_with_tags,omitempty"`

	// Name of the tag category.
	// The tag category to select the tags from.
	// +kubebuilder:validation:Optional
	TagCategory *string `json:"tagCategory" tf:"tag_category,omitempty"`

	// List of Name of tags to select from the given category.
	// The tags to use for creating a tag-based vm placement rule.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags" tf:"tags,omitempty"`
}

type VSphereVmStoragePolicyInitParameters struct {

	// Description of the storage policy.
	// Description of the storage policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the storage policy.
	// Name of the storage policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of tag rules. The tag category and tags to be associated to this storage policy.
	// Tag rules to filter datastores to be used for placement of VMs.
	TagRules []TagRulesInitParameters `json:"tagRules,omitempty" tf:"tag_rules,omitempty"`
}

type VSphereVmStoragePolicyObservation struct {

	// Description of the storage policy.
	// Description of the storage policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the storage policy.
	// Name of the storage policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of tag rules. The tag category and tags to be associated to this storage policy.
	// Tag rules to filter datastores to be used for placement of VMs.
	TagRules []TagRulesObservation `json:"tagRules,omitempty" tf:"tag_rules,omitempty"`
}

type VSphereVmStoragePolicyParameters struct {

	// Description of the storage policy.
	// Description of the storage policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the storage policy.
	// Name of the storage policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// List of tag rules. The tag category and tags to be associated to this storage policy.
	// Tag rules to filter datastores to be used for placement of VMs.
	// +kubebuilder:validation:Optional
	TagRules []TagRulesParameters `json:"tagRules,omitempty" tf:"tag_rules,omitempty"`
}

// VSphereVmStoragePolicySpec defines the desired state of VSphereVmStoragePolicy
type VSphereVmStoragePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereVmStoragePolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereVmStoragePolicyInitParameters `json:"initProvider,omitempty"`
}

// VSphereVmStoragePolicyStatus defines the observed state of VSphereVmStoragePolicy.
type VSphereVmStoragePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereVmStoragePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereVmStoragePolicy is the Schema for the VSphereVmStoragePolicys API. Storage policies can select the most appropriate datastore for the virtual machine and enforce the required level of service.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereVmStoragePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tagRules) || (has(self.initProvider) && has(self.initProvider.tagRules))",message="spec.forProvider.tagRules is a required parameter"
	Spec   VSphereVmStoragePolicySpec   `json:"spec"`
	Status VSphereVmStoragePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereVmStoragePolicyList contains a list of VSphereVmStoragePolicys
type VSphereVmStoragePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereVmStoragePolicy `json:"items"`
}

// Repository type metadata.
var (
	VSphereVmStoragePolicy_Kind             = "VSphereVmStoragePolicy"
	VSphereVmStoragePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereVmStoragePolicy_Kind}.String()
	VSphereVmStoragePolicy_KindAPIVersion   = VSphereVmStoragePolicy_Kind + "." + CRDGroupVersion.String()
	VSphereVmStoragePolicy_GroupVersionKind = CRDGroupVersion.WithKind(VSphereVmStoragePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereVmStoragePolicy{}, &VSphereVmStoragePolicyList{})
}
