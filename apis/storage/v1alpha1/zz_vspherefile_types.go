// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereFileInitParameters struct {

	// Create directories in destination_file
	// path parameter on first apply if any are missing for copy operation.
	CreateDirectories *bool `json:"createDirectories,omitempty" tf:"create_directories,omitempty"`

	// The name of a datacenter to which the file will be
	// uploaded.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// The name of the datastore to which to upload the
	// file.
	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The path to where the file should be uploaded
	// or copied to on the destination datastore in vSphere.
	DestinationFile *string `json:"destinationFile,omitempty" tf:"destination_file,omitempty"`

	// The name of a datacenter from which the file
	// will be copied. Forces a new resource if changed.
	SourceDatacenter *string `json:"sourceDatacenter,omitempty" tf:"source_datacenter,omitempty"`

	// The name of the datastore from which file will
	// be copied. Forces a new resource if changed.
	SourceDatastore *string `json:"sourceDatastore,omitempty" tf:"source_datastore,omitempty"`

	// Forces a new resource if changed.
	SourceFile *string `json:"sourceFile,omitempty" tf:"source_file,omitempty"`
}

type VSphereFileObservation struct {

	// Create directories in destination_file
	// path parameter on first apply if any are missing for copy operation.
	CreateDirectories *bool `json:"createDirectories,omitempty" tf:"create_directories,omitempty"`

	// The name of a datacenter to which the file will be
	// uploaded.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// The name of the datastore to which to upload the
	// file.
	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The path to where the file should be uploaded
	// or copied to on the destination datastore in vSphere.
	DestinationFile *string `json:"destinationFile,omitempty" tf:"destination_file,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of a datacenter from which the file
	// will be copied. Forces a new resource if changed.
	SourceDatacenter *string `json:"sourceDatacenter,omitempty" tf:"source_datacenter,omitempty"`

	// The name of the datastore from which file will
	// be copied. Forces a new resource if changed.
	SourceDatastore *string `json:"sourceDatastore,omitempty" tf:"source_datastore,omitempty"`

	// Forces a new resource if changed.
	SourceFile *string `json:"sourceFile,omitempty" tf:"source_file,omitempty"`
}

type VSphereFileParameters struct {

	// Create directories in destination_file
	// path parameter on first apply if any are missing for copy operation.
	// +kubebuilder:validation:Optional
	CreateDirectories *bool `json:"createDirectories,omitempty" tf:"create_directories,omitempty"`

	// The name of a datacenter to which the file will be
	// uploaded.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// The name of the datastore to which to upload the
	// file.
	// +kubebuilder:validation:Optional
	Datastore *string `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The path to where the file should be uploaded
	// or copied to on the destination datastore in vSphere.
	// +kubebuilder:validation:Optional
	DestinationFile *string `json:"destinationFile,omitempty" tf:"destination_file,omitempty"`

	// The name of a datacenter from which the file
	// will be copied. Forces a new resource if changed.
	// +kubebuilder:validation:Optional
	SourceDatacenter *string `json:"sourceDatacenter,omitempty" tf:"source_datacenter,omitempty"`

	// The name of the datastore from which file will
	// be copied. Forces a new resource if changed.
	// +kubebuilder:validation:Optional
	SourceDatastore *string `json:"sourceDatastore,omitempty" tf:"source_datastore,omitempty"`

	// Forces a new resource if changed.
	// +kubebuilder:validation:Optional
	SourceFile *string `json:"sourceFile,omitempty" tf:"source_file,omitempty"`
}

// VSphereFileSpec defines the desired state of VSphereFile
type VSphereFileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereFileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereFileInitParameters `json:"initProvider,omitempty"`
}

// VSphereFileStatus defines the observed state of VSphereFile.
type VSphereFileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereFileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereFile is the Schema for the VSphereFiles API. Provides a VMware vSphere file resource. This can be used to upload files (e.g. .iso and .
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereFile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datastore) || (has(self.initProvider) && has(self.initProvider.datastore))",message="spec.forProvider.datastore is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationFile) || (has(self.initProvider) && has(self.initProvider.destinationFile))",message="spec.forProvider.destinationFile is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceFile) || (has(self.initProvider) && has(self.initProvider.sourceFile))",message="spec.forProvider.sourceFile is a required parameter"
	Spec   VSphereFileSpec   `json:"spec"`
	Status VSphereFileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereFileList contains a list of VSphereFiles
type VSphereFileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereFile `json:"items"`
}

// Repository type metadata.
var (
	VSphereFile_Kind             = "VSphereFile"
	VSphereFile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereFile_Kind}.String()
	VSphereFile_KindAPIVersion   = VSphereFile_Kind + "." + CRDGroupVersion.String()
	VSphereFile_GroupVersionKind = CRDGroupVersion.WithKind(VSphereFile_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereFile{}, &VSphereFileList{})
}
