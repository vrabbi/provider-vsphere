// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NtpdInitParameters struct {

	// Whether the NTP service is enabled. Default is false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// The policy for the NTP service. Valid values are 'Start and stop with host', 'Start and stop manually', 'Start and stop with port usage'.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type NtpdObservation struct {

	// Whether the NTP service is enabled. Default is false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// The policy for the NTP service. Valid values are 'Start and stop with host', 'Start and stop manually', 'Start and stop with port usage'.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type NtpdParameters struct {

	// Whether the NTP service is enabled. Default is false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// The policy for the NTP service. Valid values are 'Start and stop with host', 'Start and stop manually', 'Start and stop with port usage'.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`
}

type ServicesInitParameters struct {

	// service has three settings, enabled sets service to running or not running, policy sets service based on setting of on which sets service to "Start and stop with host", off which sets service to "Start and stop manually", automatic which sets service to "Start and stop with port usage".
	Ntpd []NtpdInitParameters `json:"ntpd,omitempty" tf:"ntpd,omitempty"`
}

type ServicesObservation struct {

	// service has three settings, enabled sets service to running or not running, policy sets service based on setting of on which sets service to "Start and stop with host", off which sets service to "Start and stop manually", automatic which sets service to "Start and stop with port usage".
	Ntpd []NtpdObservation `json:"ntpd,omitempty" tf:"ntpd,omitempty"`
}

type ServicesParameters struct {

	// service has three settings, enabled sets service to running or not running, policy sets service based on setting of on which sets service to "Start and stop with host", off which sets service to "Start and stop manually", automatic which sets service to "Start and stop with port usage".
	// +kubebuilder:validation:Optional
	Ntpd []NtpdParameters `json:"ntpd,omitempty" tf:"ntpd,omitempty"`
}

type VSphereHostInitParameters struct {

	// The ID of the Compute Cluster this host should
	// be added to. This should not be set if datacenter is set. Conflicts with:
	// cluster_managed.
	// ID of the vSphere cluster the host will belong to.
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Can be set to true if compute cluster
	// membership will be managed through the compute_cluster resource rather
	// than thehost resource. Conflicts with: cluster.
	// Must be set if host is a member of a managed compute_cluster resource.
	ClusterManaged *bool `json:"clusterManaged,omitempty" tf:"cluster_managed,omitempty"`

	// If set to false then the host will be disconnected.
	// Default is false.
	// Set the state of the host. If set to false then the host will be asked to disconnect.
	Connected *bool `json:"connected,omitempty" tf:"connected,omitempty"`

	// A map of custom attribute IDs and string
	// values to apply to the resource. Please refer to the
	// vsphere_custom_attributes resource for more information on applying
	// tags to resources.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter this host should
	// be added to. This should not be set if cluster is set.
	// ID of the vSphere datacenter the host will belong to.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// If set to true then it will force the host to be added,
	// even if the host is already connected to a different vCenter Server instance.
	// Default is false.
	// Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// FQDN or IP address of the host to be added.
	// FQDN or IP address of the host.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The license key that will be applied to the host.
	// The license key is expected to be present in vSphere.
	// License key that will be applied to this host.
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Set the lockdown state of the host. Valid options are
	// disabled, normal, and strict. Default is disabled.
	// Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
	Lockdown *string `json:"lockdown,omitempty" tf:"lockdown,omitempty"`

	// Set the management state of the host.
	// Default is false.
	// Set the host's maintenance mode. Default is false
	Maintenance *bool `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Password that will be used by vSphere to authenticate
	// to the host.
	// Password of the administration account of the host.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Set Services on host, the settings to be set are based on service being set as part of import.
	Services []ServicesInitParameters `json:"services,omitempty" tf:"services,omitempty"`

	// The IDs of any tags to attach to this resource. Please
	// refer to the vsphere_tag resource for more information on applying
	// tags to resources.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Host's certificate SHA-1 thumbprint. If not set the
	// CA that signed the host's certificate should be trusted. If the CA is not
	// trusted and no thumbprint is set then the operation will fail. See data source
	// vsphere_host_thumbprint.
	// Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username that will be used by vSphere to authenticate
	// to the host.
	// Username of the administration account of the host.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type VSphereHostObservation struct {

	// The ID of the Compute Cluster this host should
	// be added to. This should not be set if datacenter is set. Conflicts with:
	// cluster_managed.
	// ID of the vSphere cluster the host will belong to.
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Can be set to true if compute cluster
	// membership will be managed through the compute_cluster resource rather
	// than thehost resource. Conflicts with: cluster.
	// Must be set if host is a member of a managed compute_cluster resource.
	ClusterManaged *bool `json:"clusterManaged,omitempty" tf:"cluster_managed,omitempty"`

	// If set to false then the host will be disconnected.
	// Default is false.
	// Set the state of the host. If set to false then the host will be asked to disconnect.
	Connected *bool `json:"connected,omitempty" tf:"connected,omitempty"`

	// A map of custom attribute IDs and string
	// values to apply to the resource. Please refer to the
	// vsphere_custom_attributes resource for more information on applying
	// tags to resources.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter this host should
	// be added to. This should not be set if cluster is set.
	// ID of the vSphere datacenter the host will belong to.
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// If set to true then it will force the host to be added,
	// even if the host is already connected to a different vCenter Server instance.
	// Default is false.
	// Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// FQDN or IP address of the host to be added.
	// FQDN or IP address of the host.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The ID of the host.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The license key that will be applied to the host.
	// The license key is expected to be present in vSphere.
	// License key that will be applied to this host.
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Set the lockdown state of the host. Valid options are
	// disabled, normal, and strict. Default is disabled.
	// Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
	Lockdown *string `json:"lockdown,omitempty" tf:"lockdown,omitempty"`

	// Set the management state of the host.
	// Default is false.
	// Set the host's maintenance mode. Default is false
	Maintenance *bool `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Set Services on host, the settings to be set are based on service being set as part of import.
	Services []ServicesObservation `json:"services,omitempty" tf:"services,omitempty"`

	// The IDs of any tags to attach to this resource. Please
	// refer to the vsphere_tag resource for more information on applying
	// tags to resources.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Host's certificate SHA-1 thumbprint. If not set the
	// CA that signed the host's certificate should be trusted. If the CA is not
	// trusted and no thumbprint is set then the operation will fail. See data source
	// vsphere_host_thumbprint.
	// Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username that will be used by vSphere to authenticate
	// to the host.
	// Username of the administration account of the host.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type VSphereHostParameters struct {

	// The ID of the Compute Cluster this host should
	// be added to. This should not be set if datacenter is set. Conflicts with:
	// cluster_managed.
	// ID of the vSphere cluster the host will belong to.
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Can be set to true if compute cluster
	// membership will be managed through the compute_cluster resource rather
	// than thehost resource. Conflicts with: cluster.
	// Must be set if host is a member of a managed compute_cluster resource.
	// +kubebuilder:validation:Optional
	ClusterManaged *bool `json:"clusterManaged,omitempty" tf:"cluster_managed,omitempty"`

	// If set to false then the host will be disconnected.
	// Default is false.
	// Set the state of the host. If set to false then the host will be asked to disconnect.
	// +kubebuilder:validation:Optional
	Connected *bool `json:"connected,omitempty" tf:"connected,omitempty"`

	// A map of custom attribute IDs and string
	// values to apply to the resource. Please refer to the
	// vsphere_custom_attributes resource for more information on applying
	// tags to resources.
	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter this host should
	// be added to. This should not be set if cluster is set.
	// ID of the vSphere datacenter the host will belong to.
	// +kubebuilder:validation:Optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter,omitempty"`

	// If set to true then it will force the host to be added,
	// even if the host is already connected to a different vCenter Server instance.
	// Default is false.
	// Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// FQDN or IP address of the host to be added.
	// FQDN or IP address of the host.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The license key that will be applied to the host.
	// The license key is expected to be present in vSphere.
	// License key that will be applied to this host.
	// +kubebuilder:validation:Optional
	License *string `json:"license,omitempty" tf:"license,omitempty"`

	// Set the lockdown state of the host. Valid options are
	// disabled, normal, and strict. Default is disabled.
	// Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
	// +kubebuilder:validation:Optional
	Lockdown *string `json:"lockdown,omitempty" tf:"lockdown,omitempty"`

	// Set the management state of the host.
	// Default is false.
	// Set the host's maintenance mode. Default is false
	// +kubebuilder:validation:Optional
	Maintenance *bool `json:"maintenance,omitempty" tf:"maintenance,omitempty"`

	// Password that will be used by vSphere to authenticate
	// to the host.
	// Password of the administration account of the host.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Set Services on host, the settings to be set are based on service being set as part of import.
	// +kubebuilder:validation:Optional
	Services []ServicesParameters `json:"services,omitempty" tf:"services,omitempty"`

	// The IDs of any tags to attach to this resource. Please
	// refer to the vsphere_tag resource for more information on applying
	// tags to resources.
	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Host's certificate SHA-1 thumbprint. If not set the
	// CA that signed the host's certificate should be trusted. If the CA is not
	// trusted and no thumbprint is set then the operation will fail. See data source
	// vsphere_host_thumbprint.
	// Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
	// +kubebuilder:validation:Optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username that will be used by vSphere to authenticate
	// to the host.
	// Username of the administration account of the host.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// VSphereHostSpec defines the desired state of VSphereHost
type VSphereHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereHostParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereHostInitParameters `json:"initProvider,omitempty"`
}

// VSphereHostStatus defines the observed state of VSphereHost.
type VSphereHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereHost is the Schema for the VSphereHosts API. Provides a VMware vSphere host resource. This represents an ESXi host that can be used as a member of a cluster or as a standalone host.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostname) || (has(self.initProvider) && has(self.initProvider.hostname))",message="spec.forProvider.hostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   VSphereHostSpec   `json:"spec"`
	Status VSphereHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereHostList contains a list of VSphereHosts
type VSphereHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereHost `json:"items"`
}

// Repository type metadata.
var (
	VSphereHost_Kind             = "VSphereHost"
	VSphereHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereHost_Kind}.String()
	VSphereHost_KindAPIVersion   = VSphereHost_Kind + "." + CRDGroupVersion.String()
	VSphereHost_GroupVersionKind = CRDGroupVersion.WithKind(VSphereHost_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereHost{}, &VSphereHostList{})
}
