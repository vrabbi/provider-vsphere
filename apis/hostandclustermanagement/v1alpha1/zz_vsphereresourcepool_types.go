// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereResourcePoolInitParameters struct {

	// Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has unreserved resources.
	CPUExpandable *bool `json:"cpuExpandable,omitempty" tf:"cpu_expandable,omitempty"`

	// The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// Amount of CPU (MHz) that is guaranteed available to the resource pool.
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	CPUShareLevel *string `json:"cpuShareLevel,omitempty" tf:"cpu_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, cpu_share_level must be custom.
	CPUShares *float64 `json:"cpuShares,omitempty" tf:"cpu_shares,omitempty"`

	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has unreserved resources.
	MemoryExpandable *bool `json:"memoryExpandable,omitempty" tf:"memory_expandable,omitempty"`

	// The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// Amount of memory (MB) that is guaranteed available to the resource pool.
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	MemoryShareLevel *string `json:"memoryShareLevel,omitempty" tf:"memory_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, memory_share_level must be custom.
	MemoryShares *float64 `json:"memoryShares,omitempty" tf:"memory_shares,omitempty"`

	// Name of resource pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the root resource pool of the compute resource the resource pool is in.
	ParentResourcePoolID *string `json:"parentResourcePoolId,omitempty" tf:"parent_resource_pool_id,omitempty"`

	// Determines if the shares of all descendants of the resource pool are scaled up or down when the shares of the resource pool are scaled up or down.
	ScaleDescendantsShares *string `json:"scaleDescendantsShares,omitempty" tf:"scale_descendants_shares,omitempty"`

	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereResourcePoolObservation struct {

	// Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has unreserved resources.
	CPUExpandable *bool `json:"cpuExpandable,omitempty" tf:"cpu_expandable,omitempty"`

	// The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// Amount of CPU (MHz) that is guaranteed available to the resource pool.
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	CPUShareLevel *string `json:"cpuShareLevel,omitempty" tf:"cpu_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, cpu_share_level must be custom.
	CPUShares *float64 `json:"cpuShares,omitempty" tf:"cpu_shares,omitempty"`

	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has unreserved resources.
	MemoryExpandable *bool `json:"memoryExpandable,omitempty" tf:"memory_expandable,omitempty"`

	// The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// Amount of memory (MB) that is guaranteed available to the resource pool.
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	MemoryShareLevel *string `json:"memoryShareLevel,omitempty" tf:"memory_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, memory_share_level must be custom.
	MemoryShares *float64 `json:"memoryShares,omitempty" tf:"memory_shares,omitempty"`

	// Name of resource pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the root resource pool of the compute resource the resource pool is in.
	ParentResourcePoolID *string `json:"parentResourcePoolId,omitempty" tf:"parent_resource_pool_id,omitempty"`

	// Determines if the shares of all descendants of the resource pool are scaled up or down when the shares of the resource pool are scaled up or down.
	ScaleDescendantsShares *string `json:"scaleDescendantsShares,omitempty" tf:"scale_descendants_shares,omitempty"`

	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereResourcePoolParameters struct {

	// Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has unreserved resources.
	// +kubebuilder:validation:Optional
	CPUExpandable *bool `json:"cpuExpandable,omitempty" tf:"cpu_expandable,omitempty"`

	// The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	// +kubebuilder:validation:Optional
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// Amount of CPU (MHz) that is guaranteed available to the resource pool.
	// +kubebuilder:validation:Optional
	CPUReservation *float64 `json:"cpuReservation,omitempty" tf:"cpu_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	// +kubebuilder:validation:Optional
	CPUShareLevel *string `json:"cpuShareLevel,omitempty" tf:"cpu_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, cpu_share_level must be custom.
	// +kubebuilder:validation:Optional
	CPUShares *float64 `json:"cpuShares,omitempty" tf:"cpu_shares,omitempty"`

	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// Determines if the reservation on a resource pool can grow beyond the specified value, if the parent resource pool has unreserved resources.
	// +kubebuilder:validation:Optional
	MemoryExpandable *bool `json:"memoryExpandable,omitempty" tf:"memory_expandable,omitempty"`

	// The utilization of a resource pool will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	// +kubebuilder:validation:Optional
	MemoryLimit *float64 `json:"memoryLimit,omitempty" tf:"memory_limit,omitempty"`

	// Amount of memory (MB) that is guaranteed available to the resource pool.
	// +kubebuilder:validation:Optional
	MemoryReservation *float64 `json:"memoryReservation,omitempty" tf:"memory_reservation,omitempty"`

	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	// +kubebuilder:validation:Optional
	MemoryShareLevel *string `json:"memoryShareLevel,omitempty" tf:"memory_share_level,omitempty"`

	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, memory_share_level must be custom.
	// +kubebuilder:validation:Optional
	MemoryShares *float64 `json:"memoryShares,omitempty" tf:"memory_shares,omitempty"`

	// Name of resource pool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the root resource pool of the compute resource the resource pool is in.
	// +kubebuilder:validation:Optional
	ParentResourcePoolID *string `json:"parentResourcePoolId,omitempty" tf:"parent_resource_pool_id,omitempty"`

	// Determines if the shares of all descendants of the resource pool are scaled up or down when the shares of the resource pool are scaled up or down.
	// +kubebuilder:validation:Optional
	ScaleDescendantsShares *string `json:"scaleDescendantsShares,omitempty" tf:"scale_descendants_shares,omitempty"`

	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VSphereResourcePoolSpec defines the desired state of VSphereResourcePool
type VSphereResourcePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereResourcePoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereResourcePoolInitParameters `json:"initProvider,omitempty"`
}

// VSphereResourcePoolStatus defines the observed state of VSphereResourcePool.
type VSphereResourcePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereResourcePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereResourcePool is the Schema for the VSphereResourcePools API. Provides a resource for VMware vSphere resource pools. This can be used to create and manage resource pools.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereResourcePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parentResourcePoolId) || (has(self.initProvider) && has(self.initProvider.parentResourcePoolId))",message="spec.forProvider.parentResourcePoolId is a required parameter"
	Spec   VSphereResourcePoolSpec   `json:"spec"`
	Status VSphereResourcePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereResourcePoolList contains a list of VSphereResourcePools
type VSphereResourcePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereResourcePool `json:"items"`
}

// Repository type metadata.
var (
	VSphereResourcePool_Kind             = "VSphereResourcePool"
	VSphereResourcePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereResourcePool_Kind}.String()
	VSphereResourcePool_KindAPIVersion   = VSphereResourcePool_Kind + "." + CRDGroupVersion.String()
	VSphereResourcePool_GroupVersionKind = CRDGroupVersion.WithKind(VSphereResourcePool_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereResourcePool{}, &VSphereResourcePoolList{})
}
