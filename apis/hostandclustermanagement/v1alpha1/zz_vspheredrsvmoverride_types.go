// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereDrsVmOverrideInitParameters struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// Overrides the automation level for this virtual
	// machine in the cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated. Default: manual.
	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Overrides the default DRS setting for this virtual
	// machine. Can be either true or false. Default: false.
	// Enable DRS for this virtual machine.
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type VSphereDrsVmOverrideObservation struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// Overrides the automation level for this virtual
	// machine in the cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated. Default: manual.
	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Overrides the default DRS setting for this virtual
	// machine. Can be either true or false. Default: false.
	// Enable DRS for this virtual machine.
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type VSphereDrsVmOverrideParameters struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Optional
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// Overrides the automation level for this virtual
	// machine in the cluster. Can be one of manual, partiallyAutomated, or
	// fullyAutomated. Default: manual.
	// The automation level for this virtual machine in the cluster. Can be one of manual, partiallyAutomated, or fullyAutomated.
	// +kubebuilder:validation:Optional
	DrsAutomationLevel *string `json:"drsAutomationLevel,omitempty" tf:"drs_automation_level,omitempty"`

	// Overrides the default DRS setting for this virtual
	// machine. Can be either true or false. Default: false.
	// Enable DRS for this virtual machine.
	// +kubebuilder:validation:Optional
	DrsEnabled *bool `json:"drsEnabled,omitempty" tf:"drs_enabled,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// VSphereDrsVmOverrideSpec defines the desired state of VSphereDrsVmOverride
type VSphereDrsVmOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereDrsVmOverrideParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereDrsVmOverrideInitParameters `json:"initProvider,omitempty"`
}

// VSphereDrsVmOverrideStatus defines the observed state of VSphereDrsVmOverride.
type VSphereDrsVmOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereDrsVmOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereDrsVmOverride is the Schema for the VSphereDrsVmOverrides API. Provides a VMware vSphere DRS virtual machine override resource. This can be used to override DRS settings in a cluster.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereDrsVmOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.computeClusterId) || (has(self.initProvider) && has(self.initProvider.computeClusterId))",message="spec.forProvider.computeClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualMachineId) || (has(self.initProvider) && has(self.initProvider.virtualMachineId))",message="spec.forProvider.virtualMachineId is a required parameter"
	Spec   VSphereDrsVmOverrideSpec   `json:"spec"`
	Status VSphereDrsVmOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDrsVmOverrideList contains a list of VSphereDrsVmOverrides
type VSphereDrsVmOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereDrsVmOverride `json:"items"`
}

// Repository type metadata.
var (
	VSphereDrsVmOverride_Kind             = "VSphereDrsVmOverride"
	VSphereDrsVmOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereDrsVmOverride_Kind}.String()
	VSphereDrsVmOverride_KindAPIVersion   = VSphereDrsVmOverride_Kind + "." + CRDGroupVersion.String()
	VSphereDrsVmOverride_GroupVersionKind = CRDGroupVersion.WithKind(VSphereDrsVmOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereDrsVmOverride{}, &VSphereDrsVmOverrideList{})
}
