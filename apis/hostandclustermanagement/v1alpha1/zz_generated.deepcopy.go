//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentInitParameters) DeepCopyInto(out *ComponentInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentInitParameters.
func (in *ComponentInitParameters) DeepCopy() *ComponentInitParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentObservation) DeepCopyInto(out *ComponentObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentObservation.
func (in *ComponentObservation) DeepCopy() *ComponentObservation {
	if in == nil {
		return nil
	}
	out := new(ComponentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ComponentParameters) DeepCopyInto(out *ComponentParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ComponentParameters.
func (in *ComponentParameters) DeepCopy() *ComponentParameters {
	if in == nil {
		return nil
	}
	out := new(ComponentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FaultDomainInitParameters) DeepCopyInto(out *FaultDomainInitParameters) {
	*out = *in
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FaultDomainInitParameters.
func (in *FaultDomainInitParameters) DeepCopy() *FaultDomainInitParameters {
	if in == nil {
		return nil
	}
	out := new(FaultDomainInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FaultDomainObservation) DeepCopyInto(out *FaultDomainObservation) {
	*out = *in
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FaultDomainObservation.
func (in *FaultDomainObservation) DeepCopy() *FaultDomainObservation {
	if in == nil {
		return nil
	}
	out := new(FaultDomainObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FaultDomainParameters) DeepCopyInto(out *FaultDomainParameters) {
	*out = *in
	if in.HostIds != nil {
		in, out := &in.HostIds, &out.HostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FaultDomainParameters.
func (in *FaultDomainParameters) DeepCopy() *FaultDomainParameters {
	if in == nil {
		return nil
	}
	out := new(FaultDomainParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostImageInitParameters) DeepCopyInto(out *HostImageInitParameters) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = make([]ComponentInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EsxVersion != nil {
		in, out := &in.EsxVersion, &out.EsxVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostImageInitParameters.
func (in *HostImageInitParameters) DeepCopy() *HostImageInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostImageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostImageObservation) DeepCopyInto(out *HostImageObservation) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = make([]ComponentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EsxVersion != nil {
		in, out := &in.EsxVersion, &out.EsxVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostImageObservation.
func (in *HostImageObservation) DeepCopy() *HostImageObservation {
	if in == nil {
		return nil
	}
	out := new(HostImageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostImageParameters) DeepCopyInto(out *HostImageParameters) {
	*out = *in
	if in.Component != nil {
		in, out := &in.Component, &out.Component
		*out = make([]ComponentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EsxVersion != nil {
		in, out := &in.EsxVersion, &out.EsxVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostImageParameters.
func (in *HostImageParameters) DeepCopy() *HostImageParameters {
	if in == nil {
		return nil
	}
	out := new(HostImageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPv4InitParameters) DeepCopyInto(out *IPv4InitParameters) {
	*out = *in
	if in.DHCP != nil {
		in, out := &in.DHCP, &out.DHCP
		*out = new(bool)
		**out = **in
	}
	if in.Gw != nil {
		in, out := &in.Gw, &out.Gw
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.Netmask != nil {
		in, out := &in.Netmask, &out.Netmask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPv4InitParameters.
func (in *IPv4InitParameters) DeepCopy() *IPv4InitParameters {
	if in == nil {
		return nil
	}
	out := new(IPv4InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPv4Observation) DeepCopyInto(out *IPv4Observation) {
	*out = *in
	if in.DHCP != nil {
		in, out := &in.DHCP, &out.DHCP
		*out = new(bool)
		**out = **in
	}
	if in.Gw != nil {
		in, out := &in.Gw, &out.Gw
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.Netmask != nil {
		in, out := &in.Netmask, &out.Netmask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPv4Observation.
func (in *IPv4Observation) DeepCopy() *IPv4Observation {
	if in == nil {
		return nil
	}
	out := new(IPv4Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPv4Parameters) DeepCopyInto(out *IPv4Parameters) {
	*out = *in
	if in.DHCP != nil {
		in, out := &in.DHCP, &out.DHCP
		*out = new(bool)
		**out = **in
	}
	if in.Gw != nil {
		in, out := &in.Gw, &out.Gw
		*out = new(string)
		**out = **in
	}
	if in.IP != nil {
		in, out := &in.IP, &out.IP
		*out = new(string)
		**out = **in
	}
	if in.Netmask != nil {
		in, out := &in.Netmask, &out.Netmask
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPv4Parameters.
func (in *IPv4Parameters) DeepCopy() *IPv4Parameters {
	if in == nil {
		return nil
	}
	out := new(IPv4Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPv6InitParameters) DeepCopyInto(out *IPv6InitParameters) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Autoconfig != nil {
		in, out := &in.Autoconfig, &out.Autoconfig
		*out = new(bool)
		**out = **in
	}
	if in.DHCP != nil {
		in, out := &in.DHCP, &out.DHCP
		*out = new(bool)
		**out = **in
	}
	if in.Gw != nil {
		in, out := &in.Gw, &out.Gw
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPv6InitParameters.
func (in *IPv6InitParameters) DeepCopy() *IPv6InitParameters {
	if in == nil {
		return nil
	}
	out := new(IPv6InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPv6Observation) DeepCopyInto(out *IPv6Observation) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Autoconfig != nil {
		in, out := &in.Autoconfig, &out.Autoconfig
		*out = new(bool)
		**out = **in
	}
	if in.DHCP != nil {
		in, out := &in.DHCP, &out.DHCP
		*out = new(bool)
		**out = **in
	}
	if in.Gw != nil {
		in, out := &in.Gw, &out.Gw
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPv6Observation.
func (in *IPv6Observation) DeepCopy() *IPv6Observation {
	if in == nil {
		return nil
	}
	out := new(IPv6Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IPv6Parameters) DeepCopyInto(out *IPv6Parameters) {
	*out = *in
	if in.Addresses != nil {
		in, out := &in.Addresses, &out.Addresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Autoconfig != nil {
		in, out := &in.Autoconfig, &out.Autoconfig
		*out = new(bool)
		**out = **in
	}
	if in.DHCP != nil {
		in, out := &in.DHCP, &out.DHCP
		*out = new(bool)
		**out = **in
	}
	if in.Gw != nil {
		in, out := &in.Gw, &out.Gw
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IPv6Parameters.
func (in *IPv6Parameters) DeepCopy() *IPv6Parameters {
	if in == nil {
		return nil
	}
	out := new(IPv6Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NtpdInitParameters) DeepCopyInto(out *NtpdInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.NtpServers != nil {
		in, out := &in.NtpServers, &out.NtpServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NtpdInitParameters.
func (in *NtpdInitParameters) DeepCopy() *NtpdInitParameters {
	if in == nil {
		return nil
	}
	out := new(NtpdInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NtpdObservation) DeepCopyInto(out *NtpdObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.NtpServers != nil {
		in, out := &in.NtpServers, &out.NtpServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NtpdObservation.
func (in *NtpdObservation) DeepCopy() *NtpdObservation {
	if in == nil {
		return nil
	}
	out := new(NtpdObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NtpdParameters) DeepCopyInto(out *NtpdParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.NtpServers != nil {
		in, out := &in.NtpServers, &out.NtpServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Policy != nil {
		in, out := &in.Policy, &out.Policy
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NtpdParameters.
func (in *NtpdParameters) DeepCopy() *NtpdParameters {
	if in == nil {
		return nil
	}
	out := new(NtpdParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicesInitParameters) DeepCopyInto(out *ServicesInitParameters) {
	*out = *in
	if in.Ntpd != nil {
		in, out := &in.Ntpd, &out.Ntpd
		*out = make([]NtpdInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicesInitParameters.
func (in *ServicesInitParameters) DeepCopy() *ServicesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServicesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicesObservation) DeepCopyInto(out *ServicesObservation) {
	*out = *in
	if in.Ntpd != nil {
		in, out := &in.Ntpd, &out.Ntpd
		*out = make([]NtpdObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicesObservation.
func (in *ServicesObservation) DeepCopy() *ServicesObservation {
	if in == nil {
		return nil
	}
	out := new(ServicesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServicesParameters) DeepCopyInto(out *ServicesParameters) {
	*out = *in
	if in.Ntpd != nil {
		in, out := &in.Ntpd, &out.Ntpd
		*out = make([]NtpdParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServicesParameters.
func (in *ServicesParameters) DeepCopy() *ServicesParameters {
	if in == nil {
		return nil
	}
	out := new(ServicesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeCluster) DeepCopyInto(out *VSphereComputeCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeCluster.
func (in *VSphereComputeCluster) DeepCopy() *VSphereComputeCluster {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroup) DeepCopyInto(out *VSphereComputeClusterHostGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroup.
func (in *VSphereComputeClusterHostGroup) DeepCopy() *VSphereComputeClusterHostGroup {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterHostGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroupInitParameters) DeepCopyInto(out *VSphereComputeClusterHostGroupInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroupInitParameters.
func (in *VSphereComputeClusterHostGroupInitParameters) DeepCopy() *VSphereComputeClusterHostGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroupList) DeepCopyInto(out *VSphereComputeClusterHostGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeClusterHostGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroupList.
func (in *VSphereComputeClusterHostGroupList) DeepCopy() *VSphereComputeClusterHostGroupList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterHostGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroupObservation) DeepCopyInto(out *VSphereComputeClusterHostGroupObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroupObservation.
func (in *VSphereComputeClusterHostGroupObservation) DeepCopy() *VSphereComputeClusterHostGroupObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroupParameters) DeepCopyInto(out *VSphereComputeClusterHostGroupParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroupParameters.
func (in *VSphereComputeClusterHostGroupParameters) DeepCopy() *VSphereComputeClusterHostGroupParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroupSpec) DeepCopyInto(out *VSphereComputeClusterHostGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroupSpec.
func (in *VSphereComputeClusterHostGroupSpec) DeepCopy() *VSphereComputeClusterHostGroupSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterHostGroupStatus) DeepCopyInto(out *VSphereComputeClusterHostGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterHostGroupStatus.
func (in *VSphereComputeClusterHostGroupStatus) DeepCopy() *VSphereComputeClusterHostGroupStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterHostGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterInitParameters) DeepCopyInto(out *VSphereComputeClusterInitParameters) {
	*out = *in
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DpmThreshold != nil {
		in, out := &in.DpmThreshold, &out.DpmThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsAdvancedOptions != nil {
		in, out := &in.DrsAdvancedOptions, &out.DrsAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnablePredictiveDrs != nil {
		in, out := &in.DrsEnablePredictiveDrs, &out.DrsEnablePredictiveDrs
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnableVMOverrides != nil {
		in, out := &in.DrsEnableVMOverrides, &out.DrsEnableVMOverrides
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DrsMigrationThreshold != nil {
		in, out := &in.DrsMigrationThreshold, &out.DrsMigrationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsScaleDescendantsShares != nil {
		in, out := &in.DrsScaleDescendantsShares, &out.DrsScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForceEvacuateOnDestroy != nil {
		in, out := &in.ForceEvacuateOnDestroy, &out.ForceEvacuateOnDestroy
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlFailoverHostSystemIds != nil {
		in, out := &in.HaAdmissionControlFailoverHostSystemIds, &out.HaAdmissionControlFailoverHostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaAdmissionControlHostFailureTolerance != nil {
		in, out := &in.HaAdmissionControlHostFailureTolerance, &out.HaAdmissionControlHostFailureTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPerformanceTolerance != nil {
		in, out := &in.HaAdmissionControlPerformanceTolerance, &out.HaAdmissionControlPerformanceTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPolicy != nil {
		in, out := &in.HaAdmissionControlPolicy, &out.HaAdmissionControlPolicy
		*out = new(string)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageAutoCompute != nil {
		in, out := &in.HaAdmissionControlResourcePercentageAutoCompute, &out.HaAdmissionControlResourcePercentageAutoCompute
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageCPU != nil {
		in, out := &in.HaAdmissionControlResourcePercentageCPU, &out.HaAdmissionControlResourcePercentageCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageMemory != nil {
		in, out := &in.HaAdmissionControlResourcePercentageMemory, &out.HaAdmissionControlResourcePercentageMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitCPU != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitCPU, &out.HaAdmissionControlSlotPolicyExplicitCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitMemory != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitMemory, &out.HaAdmissionControlSlotPolicyExplicitMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyUseExplicitSize != nil {
		in, out := &in.HaAdmissionControlSlotPolicyUseExplicitSize, &out.HaAdmissionControlSlotPolicyUseExplicitSize
		*out = new(bool)
		**out = **in
	}
	if in.HaAdvancedOptions != nil {
		in, out := &in.HaAdvancedOptions, &out.HaAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaEnabled != nil {
		in, out := &in.HaEnabled, &out.HaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HaHeartbeatDatastoreIds != nil {
		in, out := &in.HaHeartbeatDatastoreIds, &out.HaHeartbeatDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaHeartbeatDatastorePolicy != nil {
		in, out := &in.HaHeartbeatDatastorePolicy, &out.HaHeartbeatDatastorePolicy
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostMonitoring != nil {
		in, out := &in.HaHostMonitoring, &out.HaHostMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMComponentProtection != nil {
		in, out := &in.HaVMComponentProtection, &out.HaVMComponentProtection
		*out = new(string)
		**out = **in
	}
	if in.HaVMDependencyRestartCondition != nil {
		in, out := &in.HaVMDependencyRestartCondition, &out.HaVMDependencyRestartCondition
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartAdditionalDelay != nil {
		in, out := &in.HaVMRestartAdditionalDelay, &out.HaVMRestartAdditionalDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostClusterExitTimeout != nil {
		in, out := &in.HostClusterExitTimeout, &out.HostClusterExitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostImage != nil {
		in, out := &in.HostImage, &out.HostImage
		*out = make([]HostImageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostManaged != nil {
		in, out := &in.HostManaged, &out.HostManaged
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaAutomationLevel != nil {
		in, out := &in.ProactiveHaAutomationLevel, &out.ProactiveHaAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaEnabled != nil {
		in, out := &in.ProactiveHaEnabled, &out.ProactiveHaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProactiveHaModerateRemediation != nil {
		in, out := &in.ProactiveHaModerateRemediation, &out.ProactiveHaModerateRemediation
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaProviderIds != nil {
		in, out := &in.ProactiveHaProviderIds, &out.ProactiveHaProviderIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProactiveHaSevereRemediation != nil {
		in, out := &in.ProactiveHaSevereRemediation, &out.ProactiveHaSevereRemediation
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanCompressionEnabled != nil {
		in, out := &in.VsanCompressionEnabled, &out.VsanCompressionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDedupEnabled != nil {
		in, out := &in.VsanDedupEnabled, &out.VsanDedupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDiskGroup != nil {
		in, out := &in.VsanDiskGroup, &out.VsanDiskGroup
		*out = make([]VsanDiskGroupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanDitEncryptionEnabled != nil {
		in, out := &in.VsanDitEncryptionEnabled, &out.VsanDitEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDitRekeyInterval != nil {
		in, out := &in.VsanDitRekeyInterval, &out.VsanDitRekeyInterval
		*out = new(float64)
		**out = **in
	}
	if in.VsanEnabled != nil {
		in, out := &in.VsanEnabled, &out.VsanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanEsaEnabled != nil {
		in, out := &in.VsanEsaEnabled, &out.VsanEsaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanFaultDomains != nil {
		in, out := &in.VsanFaultDomains, &out.VsanFaultDomains
		*out = make([]VsanFaultDomainsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanNetworkDiagnosticModeEnabled != nil {
		in, out := &in.VsanNetworkDiagnosticModeEnabled, &out.VsanNetworkDiagnosticModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanPerformanceEnabled != nil {
		in, out := &in.VsanPerformanceEnabled, &out.VsanPerformanceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanRemoteDatastoreIds != nil {
		in, out := &in.VsanRemoteDatastoreIds, &out.VsanRemoteDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanStretchedCluster != nil {
		in, out := &in.VsanStretchedCluster, &out.VsanStretchedCluster
		*out = make([]VsanStretchedClusterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanUnmapEnabled != nil {
		in, out := &in.VsanUnmapEnabled, &out.VsanUnmapEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanVerboseModeEnabled != nil {
		in, out := &in.VsanVerboseModeEnabled, &out.VsanVerboseModeEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterInitParameters.
func (in *VSphereComputeClusterInitParameters) DeepCopy() *VSphereComputeClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterList) DeepCopyInto(out *VSphereComputeClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterList.
func (in *VSphereComputeClusterList) DeepCopy() *VSphereComputeClusterList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterObservation) DeepCopyInto(out *VSphereComputeClusterObservation) {
	*out = *in
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DpmThreshold != nil {
		in, out := &in.DpmThreshold, &out.DpmThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsAdvancedOptions != nil {
		in, out := &in.DrsAdvancedOptions, &out.DrsAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnablePredictiveDrs != nil {
		in, out := &in.DrsEnablePredictiveDrs, &out.DrsEnablePredictiveDrs
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnableVMOverrides != nil {
		in, out := &in.DrsEnableVMOverrides, &out.DrsEnableVMOverrides
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DrsMigrationThreshold != nil {
		in, out := &in.DrsMigrationThreshold, &out.DrsMigrationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsScaleDescendantsShares != nil {
		in, out := &in.DrsScaleDescendantsShares, &out.DrsScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForceEvacuateOnDestroy != nil {
		in, out := &in.ForceEvacuateOnDestroy, &out.ForceEvacuateOnDestroy
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlFailoverHostSystemIds != nil {
		in, out := &in.HaAdmissionControlFailoverHostSystemIds, &out.HaAdmissionControlFailoverHostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaAdmissionControlHostFailureTolerance != nil {
		in, out := &in.HaAdmissionControlHostFailureTolerance, &out.HaAdmissionControlHostFailureTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPerformanceTolerance != nil {
		in, out := &in.HaAdmissionControlPerformanceTolerance, &out.HaAdmissionControlPerformanceTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPolicy != nil {
		in, out := &in.HaAdmissionControlPolicy, &out.HaAdmissionControlPolicy
		*out = new(string)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageAutoCompute != nil {
		in, out := &in.HaAdmissionControlResourcePercentageAutoCompute, &out.HaAdmissionControlResourcePercentageAutoCompute
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageCPU != nil {
		in, out := &in.HaAdmissionControlResourcePercentageCPU, &out.HaAdmissionControlResourcePercentageCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageMemory != nil {
		in, out := &in.HaAdmissionControlResourcePercentageMemory, &out.HaAdmissionControlResourcePercentageMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitCPU != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitCPU, &out.HaAdmissionControlSlotPolicyExplicitCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitMemory != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitMemory, &out.HaAdmissionControlSlotPolicyExplicitMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyUseExplicitSize != nil {
		in, out := &in.HaAdmissionControlSlotPolicyUseExplicitSize, &out.HaAdmissionControlSlotPolicyUseExplicitSize
		*out = new(bool)
		**out = **in
	}
	if in.HaAdvancedOptions != nil {
		in, out := &in.HaAdvancedOptions, &out.HaAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaEnabled != nil {
		in, out := &in.HaEnabled, &out.HaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HaHeartbeatDatastoreIds != nil {
		in, out := &in.HaHeartbeatDatastoreIds, &out.HaHeartbeatDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaHeartbeatDatastorePolicy != nil {
		in, out := &in.HaHeartbeatDatastorePolicy, &out.HaHeartbeatDatastorePolicy
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostMonitoring != nil {
		in, out := &in.HaHostMonitoring, &out.HaHostMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMComponentProtection != nil {
		in, out := &in.HaVMComponentProtection, &out.HaVMComponentProtection
		*out = new(string)
		**out = **in
	}
	if in.HaVMDependencyRestartCondition != nil {
		in, out := &in.HaVMDependencyRestartCondition, &out.HaVMDependencyRestartCondition
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartAdditionalDelay != nil {
		in, out := &in.HaVMRestartAdditionalDelay, &out.HaVMRestartAdditionalDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostClusterExitTimeout != nil {
		in, out := &in.HostClusterExitTimeout, &out.HostClusterExitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostImage != nil {
		in, out := &in.HostImage, &out.HostImage
		*out = make([]HostImageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostManaged != nil {
		in, out := &in.HostManaged, &out.HostManaged
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaAutomationLevel != nil {
		in, out := &in.ProactiveHaAutomationLevel, &out.ProactiveHaAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaEnabled != nil {
		in, out := &in.ProactiveHaEnabled, &out.ProactiveHaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProactiveHaModerateRemediation != nil {
		in, out := &in.ProactiveHaModerateRemediation, &out.ProactiveHaModerateRemediation
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaProviderIds != nil {
		in, out := &in.ProactiveHaProviderIds, &out.ProactiveHaProviderIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProactiveHaSevereRemediation != nil {
		in, out := &in.ProactiveHaSevereRemediation, &out.ProactiveHaSevereRemediation
		*out = new(string)
		**out = **in
	}
	if in.ResourcePoolID != nil {
		in, out := &in.ResourcePoolID, &out.ResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanCompressionEnabled != nil {
		in, out := &in.VsanCompressionEnabled, &out.VsanCompressionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDedupEnabled != nil {
		in, out := &in.VsanDedupEnabled, &out.VsanDedupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDiskGroup != nil {
		in, out := &in.VsanDiskGroup, &out.VsanDiskGroup
		*out = make([]VsanDiskGroupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanDitEncryptionEnabled != nil {
		in, out := &in.VsanDitEncryptionEnabled, &out.VsanDitEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDitRekeyInterval != nil {
		in, out := &in.VsanDitRekeyInterval, &out.VsanDitRekeyInterval
		*out = new(float64)
		**out = **in
	}
	if in.VsanEnabled != nil {
		in, out := &in.VsanEnabled, &out.VsanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanEsaEnabled != nil {
		in, out := &in.VsanEsaEnabled, &out.VsanEsaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanFaultDomains != nil {
		in, out := &in.VsanFaultDomains, &out.VsanFaultDomains
		*out = make([]VsanFaultDomainsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanNetworkDiagnosticModeEnabled != nil {
		in, out := &in.VsanNetworkDiagnosticModeEnabled, &out.VsanNetworkDiagnosticModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanPerformanceEnabled != nil {
		in, out := &in.VsanPerformanceEnabled, &out.VsanPerformanceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanRemoteDatastoreIds != nil {
		in, out := &in.VsanRemoteDatastoreIds, &out.VsanRemoteDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanStretchedCluster != nil {
		in, out := &in.VsanStretchedCluster, &out.VsanStretchedCluster
		*out = make([]VsanStretchedClusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanUnmapEnabled != nil {
		in, out := &in.VsanUnmapEnabled, &out.VsanUnmapEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanVerboseModeEnabled != nil {
		in, out := &in.VsanVerboseModeEnabled, &out.VsanVerboseModeEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterObservation.
func (in *VSphereComputeClusterObservation) DeepCopy() *VSphereComputeClusterObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterParameters) DeepCopyInto(out *VSphereComputeClusterParameters) {
	*out = *in
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DpmThreshold != nil {
		in, out := &in.DpmThreshold, &out.DpmThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsAdvancedOptions != nil {
		in, out := &in.DrsAdvancedOptions, &out.DrsAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnablePredictiveDrs != nil {
		in, out := &in.DrsEnablePredictiveDrs, &out.DrsEnablePredictiveDrs
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnableVMOverrides != nil {
		in, out := &in.DrsEnableVMOverrides, &out.DrsEnableVMOverrides
		*out = new(bool)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DrsMigrationThreshold != nil {
		in, out := &in.DrsMigrationThreshold, &out.DrsMigrationThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DrsScaleDescendantsShares != nil {
		in, out := &in.DrsScaleDescendantsShares, &out.DrsScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Folder != nil {
		in, out := &in.Folder, &out.Folder
		*out = new(string)
		**out = **in
	}
	if in.ForceEvacuateOnDestroy != nil {
		in, out := &in.ForceEvacuateOnDestroy, &out.ForceEvacuateOnDestroy
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlFailoverHostSystemIds != nil {
		in, out := &in.HaAdmissionControlFailoverHostSystemIds, &out.HaAdmissionControlFailoverHostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaAdmissionControlHostFailureTolerance != nil {
		in, out := &in.HaAdmissionControlHostFailureTolerance, &out.HaAdmissionControlHostFailureTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPerformanceTolerance != nil {
		in, out := &in.HaAdmissionControlPerformanceTolerance, &out.HaAdmissionControlPerformanceTolerance
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlPolicy != nil {
		in, out := &in.HaAdmissionControlPolicy, &out.HaAdmissionControlPolicy
		*out = new(string)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageAutoCompute != nil {
		in, out := &in.HaAdmissionControlResourcePercentageAutoCompute, &out.HaAdmissionControlResourcePercentageAutoCompute
		*out = new(bool)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageCPU != nil {
		in, out := &in.HaAdmissionControlResourcePercentageCPU, &out.HaAdmissionControlResourcePercentageCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlResourcePercentageMemory != nil {
		in, out := &in.HaAdmissionControlResourcePercentageMemory, &out.HaAdmissionControlResourcePercentageMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitCPU != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitCPU, &out.HaAdmissionControlSlotPolicyExplicitCPU
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyExplicitMemory != nil {
		in, out := &in.HaAdmissionControlSlotPolicyExplicitMemory, &out.HaAdmissionControlSlotPolicyExplicitMemory
		*out = new(float64)
		**out = **in
	}
	if in.HaAdmissionControlSlotPolicyUseExplicitSize != nil {
		in, out := &in.HaAdmissionControlSlotPolicyUseExplicitSize, &out.HaAdmissionControlSlotPolicyUseExplicitSize
		*out = new(bool)
		**out = **in
	}
	if in.HaAdvancedOptions != nil {
		in, out := &in.HaAdvancedOptions, &out.HaAdvancedOptions
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaEnabled != nil {
		in, out := &in.HaEnabled, &out.HaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HaHeartbeatDatastoreIds != nil {
		in, out := &in.HaHeartbeatDatastoreIds, &out.HaHeartbeatDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaHeartbeatDatastorePolicy != nil {
		in, out := &in.HaHeartbeatDatastorePolicy, &out.HaHeartbeatDatastorePolicy
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostMonitoring != nil {
		in, out := &in.HaHostMonitoring, &out.HaHostMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMComponentProtection != nil {
		in, out := &in.HaVMComponentProtection, &out.HaVMComponentProtection
		*out = new(string)
		**out = **in
	}
	if in.HaVMDependencyRestartCondition != nil {
		in, out := &in.HaVMDependencyRestartCondition, &out.HaVMDependencyRestartCondition
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartAdditionalDelay != nil {
		in, out := &in.HaVMRestartAdditionalDelay, &out.HaVMRestartAdditionalDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostClusterExitTimeout != nil {
		in, out := &in.HostClusterExitTimeout, &out.HostClusterExitTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HostImage != nil {
		in, out := &in.HostImage, &out.HostImage
		*out = make([]HostImageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostManaged != nil {
		in, out := &in.HostManaged, &out.HostManaged
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemIds != nil {
		in, out := &in.HostSystemIds, &out.HostSystemIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaAutomationLevel != nil {
		in, out := &in.ProactiveHaAutomationLevel, &out.ProactiveHaAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaEnabled != nil {
		in, out := &in.ProactiveHaEnabled, &out.ProactiveHaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ProactiveHaModerateRemediation != nil {
		in, out := &in.ProactiveHaModerateRemediation, &out.ProactiveHaModerateRemediation
		*out = new(string)
		**out = **in
	}
	if in.ProactiveHaProviderIds != nil {
		in, out := &in.ProactiveHaProviderIds, &out.ProactiveHaProviderIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProactiveHaSevereRemediation != nil {
		in, out := &in.ProactiveHaSevereRemediation, &out.ProactiveHaSevereRemediation
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanCompressionEnabled != nil {
		in, out := &in.VsanCompressionEnabled, &out.VsanCompressionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDedupEnabled != nil {
		in, out := &in.VsanDedupEnabled, &out.VsanDedupEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDiskGroup != nil {
		in, out := &in.VsanDiskGroup, &out.VsanDiskGroup
		*out = make([]VsanDiskGroupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanDitEncryptionEnabled != nil {
		in, out := &in.VsanDitEncryptionEnabled, &out.VsanDitEncryptionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanDitRekeyInterval != nil {
		in, out := &in.VsanDitRekeyInterval, &out.VsanDitRekeyInterval
		*out = new(float64)
		**out = **in
	}
	if in.VsanEnabled != nil {
		in, out := &in.VsanEnabled, &out.VsanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanEsaEnabled != nil {
		in, out := &in.VsanEsaEnabled, &out.VsanEsaEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanFaultDomains != nil {
		in, out := &in.VsanFaultDomains, &out.VsanFaultDomains
		*out = make([]VsanFaultDomainsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanNetworkDiagnosticModeEnabled != nil {
		in, out := &in.VsanNetworkDiagnosticModeEnabled, &out.VsanNetworkDiagnosticModeEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanPerformanceEnabled != nil {
		in, out := &in.VsanPerformanceEnabled, &out.VsanPerformanceEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanRemoteDatastoreIds != nil {
		in, out := &in.VsanRemoteDatastoreIds, &out.VsanRemoteDatastoreIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VsanStretchedCluster != nil {
		in, out := &in.VsanStretchedCluster, &out.VsanStretchedCluster
		*out = make([]VsanStretchedClusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VsanUnmapEnabled != nil {
		in, out := &in.VsanUnmapEnabled, &out.VsanUnmapEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VsanVerboseModeEnabled != nil {
		in, out := &in.VsanVerboseModeEnabled, &out.VsanVerboseModeEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterParameters.
func (in *VSphereComputeClusterParameters) DeepCopy() *VSphereComputeClusterParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterSpec) DeepCopyInto(out *VSphereComputeClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterSpec.
func (in *VSphereComputeClusterSpec) DeepCopy() *VSphereComputeClusterSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterStatus) DeepCopyInto(out *VSphereComputeClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterStatus.
func (in *VSphereComputeClusterStatus) DeepCopy() *VSphereComputeClusterStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRule) DeepCopyInto(out *VSphereComputeClusterVmAffinityRule) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRule.
func (in *VSphereComputeClusterVmAffinityRule) DeepCopy() *VSphereComputeClusterVmAffinityRule {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmAffinityRule) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRuleInitParameters) DeepCopyInto(out *VSphereComputeClusterVmAffinityRuleInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRuleInitParameters.
func (in *VSphereComputeClusterVmAffinityRuleInitParameters) DeepCopy() *VSphereComputeClusterVmAffinityRuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRuleList) DeepCopyInto(out *VSphereComputeClusterVmAffinityRuleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeClusterVmAffinityRule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRuleList.
func (in *VSphereComputeClusterVmAffinityRuleList) DeepCopy() *VSphereComputeClusterVmAffinityRuleList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRuleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmAffinityRuleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRuleObservation) DeepCopyInto(out *VSphereComputeClusterVmAffinityRuleObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRuleObservation.
func (in *VSphereComputeClusterVmAffinityRuleObservation) DeepCopy() *VSphereComputeClusterVmAffinityRuleObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRuleParameters) DeepCopyInto(out *VSphereComputeClusterVmAffinityRuleParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRuleParameters.
func (in *VSphereComputeClusterVmAffinityRuleParameters) DeepCopy() *VSphereComputeClusterVmAffinityRuleParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRuleSpec) DeepCopyInto(out *VSphereComputeClusterVmAffinityRuleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRuleSpec.
func (in *VSphereComputeClusterVmAffinityRuleSpec) DeepCopy() *VSphereComputeClusterVmAffinityRuleSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRuleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAffinityRuleStatus) DeepCopyInto(out *VSphereComputeClusterVmAffinityRuleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAffinityRuleStatus.
func (in *VSphereComputeClusterVmAffinityRuleStatus) DeepCopy() *VSphereComputeClusterVmAffinityRuleStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAffinityRuleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRule) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRule) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRule.
func (in *VSphereComputeClusterVmAntiAffinityRule) DeepCopy() *VSphereComputeClusterVmAntiAffinityRule {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmAntiAffinityRule) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRuleInitParameters) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRuleInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRuleInitParameters.
func (in *VSphereComputeClusterVmAntiAffinityRuleInitParameters) DeepCopy() *VSphereComputeClusterVmAntiAffinityRuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRuleList) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRuleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeClusterVmAntiAffinityRule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRuleList.
func (in *VSphereComputeClusterVmAntiAffinityRuleList) DeepCopy() *VSphereComputeClusterVmAntiAffinityRuleList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRuleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmAntiAffinityRuleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRuleObservation) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRuleObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRuleObservation.
func (in *VSphereComputeClusterVmAntiAffinityRuleObservation) DeepCopy() *VSphereComputeClusterVmAntiAffinityRuleObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRuleParameters) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRuleParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRuleParameters.
func (in *VSphereComputeClusterVmAntiAffinityRuleParameters) DeepCopy() *VSphereComputeClusterVmAntiAffinityRuleParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRuleSpec) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRuleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRuleSpec.
func (in *VSphereComputeClusterVmAntiAffinityRuleSpec) DeepCopy() *VSphereComputeClusterVmAntiAffinityRuleSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRuleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmAntiAffinityRuleStatus) DeepCopyInto(out *VSphereComputeClusterVmAntiAffinityRuleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmAntiAffinityRuleStatus.
func (in *VSphereComputeClusterVmAntiAffinityRuleStatus) DeepCopy() *VSphereComputeClusterVmAntiAffinityRuleStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmAntiAffinityRuleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRule) DeepCopyInto(out *VSphereComputeClusterVmDependencyRule) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRule.
func (in *VSphereComputeClusterVmDependencyRule) DeepCopy() *VSphereComputeClusterVmDependencyRule {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmDependencyRule) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRuleInitParameters) DeepCopyInto(out *VSphereComputeClusterVmDependencyRuleInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DependencyVMGroupName != nil {
		in, out := &in.DependencyVMGroupName, &out.DependencyVMGroupName
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VMGroupName != nil {
		in, out := &in.VMGroupName, &out.VMGroupName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRuleInitParameters.
func (in *VSphereComputeClusterVmDependencyRuleInitParameters) DeepCopy() *VSphereComputeClusterVmDependencyRuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRuleList) DeepCopyInto(out *VSphereComputeClusterVmDependencyRuleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeClusterVmDependencyRule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRuleList.
func (in *VSphereComputeClusterVmDependencyRuleList) DeepCopy() *VSphereComputeClusterVmDependencyRuleList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRuleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmDependencyRuleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRuleObservation) DeepCopyInto(out *VSphereComputeClusterVmDependencyRuleObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DependencyVMGroupName != nil {
		in, out := &in.DependencyVMGroupName, &out.DependencyVMGroupName
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VMGroupName != nil {
		in, out := &in.VMGroupName, &out.VMGroupName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRuleObservation.
func (in *VSphereComputeClusterVmDependencyRuleObservation) DeepCopy() *VSphereComputeClusterVmDependencyRuleObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRuleParameters) DeepCopyInto(out *VSphereComputeClusterVmDependencyRuleParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DependencyVMGroupName != nil {
		in, out := &in.DependencyVMGroupName, &out.DependencyVMGroupName
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VMGroupName != nil {
		in, out := &in.VMGroupName, &out.VMGroupName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRuleParameters.
func (in *VSphereComputeClusterVmDependencyRuleParameters) DeepCopy() *VSphereComputeClusterVmDependencyRuleParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRuleSpec) DeepCopyInto(out *VSphereComputeClusterVmDependencyRuleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRuleSpec.
func (in *VSphereComputeClusterVmDependencyRuleSpec) DeepCopy() *VSphereComputeClusterVmDependencyRuleSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRuleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmDependencyRuleStatus) DeepCopyInto(out *VSphereComputeClusterVmDependencyRuleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmDependencyRuleStatus.
func (in *VSphereComputeClusterVmDependencyRuleStatus) DeepCopy() *VSphereComputeClusterVmDependencyRuleStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmDependencyRuleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroup) DeepCopyInto(out *VSphereComputeClusterVmGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroup.
func (in *VSphereComputeClusterVmGroup) DeepCopy() *VSphereComputeClusterVmGroup {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroupInitParameters) DeepCopyInto(out *VSphereComputeClusterVmGroupInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroupInitParameters.
func (in *VSphereComputeClusterVmGroupInitParameters) DeepCopy() *VSphereComputeClusterVmGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroupList) DeepCopyInto(out *VSphereComputeClusterVmGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeClusterVmGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroupList.
func (in *VSphereComputeClusterVmGroupList) DeepCopy() *VSphereComputeClusterVmGroupList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroupObservation) DeepCopyInto(out *VSphereComputeClusterVmGroupObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroupObservation.
func (in *VSphereComputeClusterVmGroupObservation) DeepCopy() *VSphereComputeClusterVmGroupObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroupParameters) DeepCopyInto(out *VSphereComputeClusterVmGroupParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineIds != nil {
		in, out := &in.VirtualMachineIds, &out.VirtualMachineIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroupParameters.
func (in *VSphereComputeClusterVmGroupParameters) DeepCopy() *VSphereComputeClusterVmGroupParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroupSpec) DeepCopyInto(out *VSphereComputeClusterVmGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroupSpec.
func (in *VSphereComputeClusterVmGroupSpec) DeepCopy() *VSphereComputeClusterVmGroupSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmGroupStatus) DeepCopyInto(out *VSphereComputeClusterVmGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmGroupStatus.
func (in *VSphereComputeClusterVmGroupStatus) DeepCopy() *VSphereComputeClusterVmGroupStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRule) DeepCopyInto(out *VSphereComputeClusterVmHostRule) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRule.
func (in *VSphereComputeClusterVmHostRule) DeepCopy() *VSphereComputeClusterVmHostRule {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmHostRule) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRuleInitParameters) DeepCopyInto(out *VSphereComputeClusterVmHostRuleInitParameters) {
	*out = *in
	if in.AffinityHostGroupName != nil {
		in, out := &in.AffinityHostGroupName, &out.AffinityHostGroupName
		*out = new(string)
		**out = **in
	}
	if in.AntiAffinityHostGroupName != nil {
		in, out := &in.AntiAffinityHostGroupName, &out.AntiAffinityHostGroupName
		*out = new(string)
		**out = **in
	}
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VMGroupName != nil {
		in, out := &in.VMGroupName, &out.VMGroupName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRuleInitParameters.
func (in *VSphereComputeClusterVmHostRuleInitParameters) DeepCopy() *VSphereComputeClusterVmHostRuleInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRuleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRuleList) DeepCopyInto(out *VSphereComputeClusterVmHostRuleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereComputeClusterVmHostRule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRuleList.
func (in *VSphereComputeClusterVmHostRuleList) DeepCopy() *VSphereComputeClusterVmHostRuleList {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRuleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereComputeClusterVmHostRuleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRuleObservation) DeepCopyInto(out *VSphereComputeClusterVmHostRuleObservation) {
	*out = *in
	if in.AffinityHostGroupName != nil {
		in, out := &in.AffinityHostGroupName, &out.AffinityHostGroupName
		*out = new(string)
		**out = **in
	}
	if in.AntiAffinityHostGroupName != nil {
		in, out := &in.AntiAffinityHostGroupName, &out.AntiAffinityHostGroupName
		*out = new(string)
		**out = **in
	}
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VMGroupName != nil {
		in, out := &in.VMGroupName, &out.VMGroupName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRuleObservation.
func (in *VSphereComputeClusterVmHostRuleObservation) DeepCopy() *VSphereComputeClusterVmHostRuleObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRuleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRuleParameters) DeepCopyInto(out *VSphereComputeClusterVmHostRuleParameters) {
	*out = *in
	if in.AffinityHostGroupName != nil {
		in, out := &in.AffinityHostGroupName, &out.AffinityHostGroupName
		*out = new(string)
		**out = **in
	}
	if in.AntiAffinityHostGroupName != nil {
		in, out := &in.AntiAffinityHostGroupName, &out.AntiAffinityHostGroupName
		*out = new(string)
		**out = **in
	}
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Mandatory != nil {
		in, out := &in.Mandatory, &out.Mandatory
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.VMGroupName != nil {
		in, out := &in.VMGroupName, &out.VMGroupName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRuleParameters.
func (in *VSphereComputeClusterVmHostRuleParameters) DeepCopy() *VSphereComputeClusterVmHostRuleParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRuleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRuleSpec) DeepCopyInto(out *VSphereComputeClusterVmHostRuleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRuleSpec.
func (in *VSphereComputeClusterVmHostRuleSpec) DeepCopy() *VSphereComputeClusterVmHostRuleSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRuleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereComputeClusterVmHostRuleStatus) DeepCopyInto(out *VSphereComputeClusterVmHostRuleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereComputeClusterVmHostRuleStatus.
func (in *VSphereComputeClusterVmHostRuleStatus) DeepCopy() *VSphereComputeClusterVmHostRuleStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereComputeClusterVmHostRuleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverride) DeepCopyInto(out *VSphereDpmHostOverride) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverride.
func (in *VSphereDpmHostOverride) DeepCopy() *VSphereDpmHostOverride {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverride)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDpmHostOverride) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverrideInitParameters) DeepCopyInto(out *VSphereDpmHostOverrideInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverrideInitParameters.
func (in *VSphereDpmHostOverrideInitParameters) DeepCopy() *VSphereDpmHostOverrideInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverrideInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverrideList) DeepCopyInto(out *VSphereDpmHostOverrideList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereDpmHostOverride, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverrideList.
func (in *VSphereDpmHostOverrideList) DeepCopy() *VSphereDpmHostOverrideList {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverrideList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDpmHostOverrideList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverrideObservation) DeepCopyInto(out *VSphereDpmHostOverrideObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverrideObservation.
func (in *VSphereDpmHostOverrideObservation) DeepCopy() *VSphereDpmHostOverrideObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverrideObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverrideParameters) DeepCopyInto(out *VSphereDpmHostOverrideParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DpmAutomationLevel != nil {
		in, out := &in.DpmAutomationLevel, &out.DpmAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DpmEnabled != nil {
		in, out := &in.DpmEnabled, &out.DpmEnabled
		*out = new(bool)
		**out = **in
	}
	if in.HostSystemID != nil {
		in, out := &in.HostSystemID, &out.HostSystemID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverrideParameters.
func (in *VSphereDpmHostOverrideParameters) DeepCopy() *VSphereDpmHostOverrideParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverrideParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverrideSpec) DeepCopyInto(out *VSphereDpmHostOverrideSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverrideSpec.
func (in *VSphereDpmHostOverrideSpec) DeepCopy() *VSphereDpmHostOverrideSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverrideSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDpmHostOverrideStatus) DeepCopyInto(out *VSphereDpmHostOverrideStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDpmHostOverrideStatus.
func (in *VSphereDpmHostOverrideStatus) DeepCopy() *VSphereDpmHostOverrideStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereDpmHostOverrideStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverride) DeepCopyInto(out *VSphereDrsVmOverride) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverride.
func (in *VSphereDrsVmOverride) DeepCopy() *VSphereDrsVmOverride {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverride)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDrsVmOverride) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverrideInitParameters) DeepCopyInto(out *VSphereDrsVmOverrideInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VirtualMachineID != nil {
		in, out := &in.VirtualMachineID, &out.VirtualMachineID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverrideInitParameters.
func (in *VSphereDrsVmOverrideInitParameters) DeepCopy() *VSphereDrsVmOverrideInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverrideInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverrideList) DeepCopyInto(out *VSphereDrsVmOverrideList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereDrsVmOverride, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverrideList.
func (in *VSphereDrsVmOverrideList) DeepCopy() *VSphereDrsVmOverrideList {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverrideList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereDrsVmOverrideList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverrideObservation) DeepCopyInto(out *VSphereDrsVmOverrideObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineID != nil {
		in, out := &in.VirtualMachineID, &out.VirtualMachineID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverrideObservation.
func (in *VSphereDrsVmOverrideObservation) DeepCopy() *VSphereDrsVmOverrideObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverrideObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverrideParameters) DeepCopyInto(out *VSphereDrsVmOverrideParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.DrsAutomationLevel != nil {
		in, out := &in.DrsAutomationLevel, &out.DrsAutomationLevel
		*out = new(string)
		**out = **in
	}
	if in.DrsEnabled != nil {
		in, out := &in.DrsEnabled, &out.DrsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.VirtualMachineID != nil {
		in, out := &in.VirtualMachineID, &out.VirtualMachineID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverrideParameters.
func (in *VSphereDrsVmOverrideParameters) DeepCopy() *VSphereDrsVmOverrideParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverrideParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverrideSpec) DeepCopyInto(out *VSphereDrsVmOverrideSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverrideSpec.
func (in *VSphereDrsVmOverrideSpec) DeepCopy() *VSphereDrsVmOverrideSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverrideSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereDrsVmOverrideStatus) DeepCopyInto(out *VSphereDrsVmOverrideStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereDrsVmOverrideStatus.
func (in *VSphereDrsVmOverrideStatus) DeepCopy() *VSphereDrsVmOverrideStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereDrsVmOverrideStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverride) DeepCopyInto(out *VSphereHaVmOverride) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverride.
func (in *VSphereHaVmOverride) DeepCopy() *VSphereHaVmOverride {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverride)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHaVmOverride) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverrideInitParameters) DeepCopyInto(out *VSphereHaVmOverrideInitParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMMonitoringUseClusterDefaults != nil {
		in, out := &in.HaVMMonitoringUseClusterDefaults, &out.HaVMMonitoringUseClusterDefaults
		*out = new(bool)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.VirtualMachineID != nil {
		in, out := &in.VirtualMachineID, &out.VirtualMachineID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverrideInitParameters.
func (in *VSphereHaVmOverrideInitParameters) DeepCopy() *VSphereHaVmOverrideInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverrideInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverrideList) DeepCopyInto(out *VSphereHaVmOverrideList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereHaVmOverride, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverrideList.
func (in *VSphereHaVmOverrideList) DeepCopy() *VSphereHaVmOverrideList {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverrideList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHaVmOverrideList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverrideObservation) DeepCopyInto(out *VSphereHaVmOverrideObservation) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMMonitoringUseClusterDefaults != nil {
		in, out := &in.HaVMMonitoringUseClusterDefaults, &out.HaVMMonitoringUseClusterDefaults
		*out = new(bool)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.VirtualMachineID != nil {
		in, out := &in.VirtualMachineID, &out.VirtualMachineID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverrideObservation.
func (in *VSphereHaVmOverrideObservation) DeepCopy() *VSphereHaVmOverrideObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverrideObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverrideParameters) DeepCopyInto(out *VSphereHaVmOverrideParameters) {
	*out = *in
	if in.ComputeClusterID != nil {
		in, out := &in.ComputeClusterID, &out.ComputeClusterID
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdRecoveryAction != nil {
		in, out := &in.HaDatastoreApdRecoveryAction, &out.HaDatastoreApdRecoveryAction
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponse != nil {
		in, out := &in.HaDatastoreApdResponse, &out.HaDatastoreApdResponse
		*out = new(string)
		**out = **in
	}
	if in.HaDatastoreApdResponseDelay != nil {
		in, out := &in.HaDatastoreApdResponseDelay, &out.HaDatastoreApdResponseDelay
		*out = new(float64)
		**out = **in
	}
	if in.HaDatastorePdlResponse != nil {
		in, out := &in.HaDatastorePdlResponse, &out.HaDatastorePdlResponse
		*out = new(string)
		**out = **in
	}
	if in.HaHostIsolationResponse != nil {
		in, out := &in.HaHostIsolationResponse, &out.HaHostIsolationResponse
		*out = new(string)
		**out = **in
	}
	if in.HaVMFailureInterval != nil {
		in, out := &in.HaVMFailureInterval, &out.HaVMFailureInterval
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumFailureWindow != nil {
		in, out := &in.HaVMMaximumFailureWindow, &out.HaVMMaximumFailureWindow
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMaximumResets != nil {
		in, out := &in.HaVMMaximumResets, &out.HaVMMaximumResets
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMinimumUptime != nil {
		in, out := &in.HaVMMinimumUptime, &out.HaVMMinimumUptime
		*out = new(float64)
		**out = **in
	}
	if in.HaVMMonitoring != nil {
		in, out := &in.HaVMMonitoring, &out.HaVMMonitoring
		*out = new(string)
		**out = **in
	}
	if in.HaVMMonitoringUseClusterDefaults != nil {
		in, out := &in.HaVMMonitoringUseClusterDefaults, &out.HaVMMonitoringUseClusterDefaults
		*out = new(bool)
		**out = **in
	}
	if in.HaVMRestartPriority != nil {
		in, out := &in.HaVMRestartPriority, &out.HaVMRestartPriority
		*out = new(string)
		**out = **in
	}
	if in.HaVMRestartTimeout != nil {
		in, out := &in.HaVMRestartTimeout, &out.HaVMRestartTimeout
		*out = new(float64)
		**out = **in
	}
	if in.VirtualMachineID != nil {
		in, out := &in.VirtualMachineID, &out.VirtualMachineID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverrideParameters.
func (in *VSphereHaVmOverrideParameters) DeepCopy() *VSphereHaVmOverrideParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverrideParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverrideSpec) DeepCopyInto(out *VSphereHaVmOverrideSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverrideSpec.
func (in *VSphereHaVmOverrideSpec) DeepCopy() *VSphereHaVmOverrideSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverrideSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHaVmOverrideStatus) DeepCopyInto(out *VSphereHaVmOverrideStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHaVmOverrideStatus.
func (in *VSphereHaVmOverrideStatus) DeepCopy() *VSphereHaVmOverrideStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereHaVmOverrideStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHost) DeepCopyInto(out *VSphereHost) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHost.
func (in *VSphereHost) DeepCopy() *VSphereHost {
	if in == nil {
		return nil
	}
	out := new(VSphereHost)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHost) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostInitParameters) DeepCopyInto(out *VSphereHostInitParameters) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.ClusterManaged != nil {
		in, out := &in.ClusterManaged, &out.ClusterManaged
		*out = new(bool)
		**out = **in
	}
	if in.Connected != nil {
		in, out := &in.Connected, &out.Connected
		*out = new(bool)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.Force != nil {
		in, out := &in.Force, &out.Force
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		*out = new(string)
		**out = **in
	}
	if in.Lockdown != nil {
		in, out := &in.Lockdown, &out.Lockdown
		*out = new(string)
		**out = **in
	}
	if in.Maintenance != nil {
		in, out := &in.Maintenance, &out.Maintenance
		*out = new(bool)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]ServicesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Thumbprint != nil {
		in, out := &in.Thumbprint, &out.Thumbprint
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostInitParameters.
func (in *VSphereHostInitParameters) DeepCopy() *VSphereHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostList) DeepCopyInto(out *VSphereHostList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereHost, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostList.
func (in *VSphereHostList) DeepCopy() *VSphereHostList {
	if in == nil {
		return nil
	}
	out := new(VSphereHostList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereHostList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostObservation) DeepCopyInto(out *VSphereHostObservation) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.ClusterManaged != nil {
		in, out := &in.ClusterManaged, &out.ClusterManaged
		*out = new(bool)
		**out = **in
	}
	if in.Connected != nil {
		in, out := &in.Connected, &out.Connected
		*out = new(bool)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.Force != nil {
		in, out := &in.Force, &out.Force
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		*out = new(string)
		**out = **in
	}
	if in.Lockdown != nil {
		in, out := &in.Lockdown, &out.Lockdown
		*out = new(string)
		**out = **in
	}
	if in.Maintenance != nil {
		in, out := &in.Maintenance, &out.Maintenance
		*out = new(bool)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]ServicesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Thumbprint != nil {
		in, out := &in.Thumbprint, &out.Thumbprint
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostObservation.
func (in *VSphereHostObservation) DeepCopy() *VSphereHostObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostParameters) DeepCopyInto(out *VSphereHostParameters) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.ClusterManaged != nil {
		in, out := &in.ClusterManaged, &out.ClusterManaged
		*out = new(bool)
		**out = **in
	}
	if in.Connected != nil {
		in, out := &in.Connected, &out.Connected
		*out = new(bool)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Datacenter != nil {
		in, out := &in.Datacenter, &out.Datacenter
		*out = new(string)
		**out = **in
	}
	if in.Force != nil {
		in, out := &in.Force, &out.Force
		*out = new(bool)
		**out = **in
	}
	if in.Hostname != nil {
		in, out := &in.Hostname, &out.Hostname
		*out = new(string)
		**out = **in
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		*out = new(string)
		**out = **in
	}
	if in.Lockdown != nil {
		in, out := &in.Lockdown, &out.Lockdown
		*out = new(string)
		**out = **in
	}
	if in.Maintenance != nil {
		in, out := &in.Maintenance, &out.Maintenance
		*out = new(bool)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]ServicesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Thumbprint != nil {
		in, out := &in.Thumbprint, &out.Thumbprint
		*out = new(string)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostParameters.
func (in *VSphereHostParameters) DeepCopy() *VSphereHostParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostSpec) DeepCopyInto(out *VSphereHostSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostSpec.
func (in *VSphereHostSpec) DeepCopy() *VSphereHostSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereHostSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereHostStatus) DeepCopyInto(out *VSphereHostStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereHostStatus.
func (in *VSphereHostStatus) DeepCopy() *VSphereHostStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereHostStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePool) DeepCopyInto(out *VSphereResourcePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePool.
func (in *VSphereResourcePool) DeepCopy() *VSphereResourcePool {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereResourcePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePoolInitParameters) DeepCopyInto(out *VSphereResourcePoolInitParameters) {
	*out = *in
	if in.CPUExpandable != nil {
		in, out := &in.CPUExpandable, &out.CPUExpandable
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.CPUShares != nil {
		in, out := &in.CPUShares, &out.CPUShares
		*out = new(float64)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MemoryExpandable != nil {
		in, out := &in.MemoryExpandable, &out.MemoryExpandable
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MemoryShares != nil {
		in, out := &in.MemoryShares, &out.MemoryShares
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentResourcePoolID != nil {
		in, out := &in.ParentResourcePoolID, &out.ParentResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.ScaleDescendantsShares != nil {
		in, out := &in.ScaleDescendantsShares, &out.ScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePoolInitParameters.
func (in *VSphereResourcePoolInitParameters) DeepCopy() *VSphereResourcePoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePoolList) DeepCopyInto(out *VSphereResourcePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereResourcePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePoolList.
func (in *VSphereResourcePoolList) DeepCopy() *VSphereResourcePoolList {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereResourcePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePoolObservation) DeepCopyInto(out *VSphereResourcePoolObservation) {
	*out = *in
	if in.CPUExpandable != nil {
		in, out := &in.CPUExpandable, &out.CPUExpandable
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.CPUShares != nil {
		in, out := &in.CPUShares, &out.CPUShares
		*out = new(float64)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MemoryExpandable != nil {
		in, out := &in.MemoryExpandable, &out.MemoryExpandable
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MemoryShares != nil {
		in, out := &in.MemoryShares, &out.MemoryShares
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentResourcePoolID != nil {
		in, out := &in.ParentResourcePoolID, &out.ParentResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.ScaleDescendantsShares != nil {
		in, out := &in.ScaleDescendantsShares, &out.ScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePoolObservation.
func (in *VSphereResourcePoolObservation) DeepCopy() *VSphereResourcePoolObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePoolParameters) DeepCopyInto(out *VSphereResourcePoolParameters) {
	*out = *in
	if in.CPUExpandable != nil {
		in, out := &in.CPUExpandable, &out.CPUExpandable
		*out = new(bool)
		**out = **in
	}
	if in.CPULimit != nil {
		in, out := &in.CPULimit, &out.CPULimit
		*out = new(float64)
		**out = **in
	}
	if in.CPUReservation != nil {
		in, out := &in.CPUReservation, &out.CPUReservation
		*out = new(float64)
		**out = **in
	}
	if in.CPUShareLevel != nil {
		in, out := &in.CPUShareLevel, &out.CPUShareLevel
		*out = new(string)
		**out = **in
	}
	if in.CPUShares != nil {
		in, out := &in.CPUShares, &out.CPUShares
		*out = new(float64)
		**out = **in
	}
	if in.CustomAttributes != nil {
		in, out := &in.CustomAttributes, &out.CustomAttributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MemoryExpandable != nil {
		in, out := &in.MemoryExpandable, &out.MemoryExpandable
		*out = new(bool)
		**out = **in
	}
	if in.MemoryLimit != nil {
		in, out := &in.MemoryLimit, &out.MemoryLimit
		*out = new(float64)
		**out = **in
	}
	if in.MemoryReservation != nil {
		in, out := &in.MemoryReservation, &out.MemoryReservation
		*out = new(float64)
		**out = **in
	}
	if in.MemoryShareLevel != nil {
		in, out := &in.MemoryShareLevel, &out.MemoryShareLevel
		*out = new(string)
		**out = **in
	}
	if in.MemoryShares != nil {
		in, out := &in.MemoryShares, &out.MemoryShares
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParentResourcePoolID != nil {
		in, out := &in.ParentResourcePoolID, &out.ParentResourcePoolID
		*out = new(string)
		**out = **in
	}
	if in.ScaleDescendantsShares != nil {
		in, out := &in.ScaleDescendantsShares, &out.ScaleDescendantsShares
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePoolParameters.
func (in *VSphereResourcePoolParameters) DeepCopy() *VSphereResourcePoolParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePoolSpec) DeepCopyInto(out *VSphereResourcePoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePoolSpec.
func (in *VSphereResourcePoolSpec) DeepCopy() *VSphereResourcePoolSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereResourcePoolStatus) DeepCopyInto(out *VSphereResourcePoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereResourcePoolStatus.
func (in *VSphereResourcePoolStatus) DeepCopy() *VSphereResourcePoolStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereResourcePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnic) DeepCopyInto(out *VSphereVnic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnic.
func (in *VSphereVnic) DeepCopy() *VSphereVnic {
	if in == nil {
		return nil
	}
	out := new(VSphereVnic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVnic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnicInitParameters) DeepCopyInto(out *VSphereVnicInitParameters) {
	*out = *in
	if in.DistributedPortGroup != nil {
		in, out := &in.DistributedPortGroup, &out.DistributedPortGroup
		*out = new(string)
		**out = **in
	}
	if in.DistributedSwitchPort != nil {
		in, out := &in.DistributedSwitchPort, &out.DistributedSwitchPort
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IPv4 != nil {
		in, out := &in.IPv4, &out.IPv4
		*out = make([]IPv4InitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = make([]IPv6InitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mac != nil {
		in, out := &in.Mac, &out.Mac
		*out = new(string)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(float64)
		**out = **in
	}
	if in.Netstack != nil {
		in, out := &in.Netstack, &out.Netstack
		*out = new(string)
		**out = **in
	}
	if in.Portgroup != nil {
		in, out := &in.Portgroup, &out.Portgroup
		*out = new(string)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnicInitParameters.
func (in *VSphereVnicInitParameters) DeepCopy() *VSphereVnicInitParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVnicInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnicList) DeepCopyInto(out *VSphereVnicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VSphereVnic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnicList.
func (in *VSphereVnicList) DeepCopy() *VSphereVnicList {
	if in == nil {
		return nil
	}
	out := new(VSphereVnicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VSphereVnicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnicObservation) DeepCopyInto(out *VSphereVnicObservation) {
	*out = *in
	if in.DistributedPortGroup != nil {
		in, out := &in.DistributedPortGroup, &out.DistributedPortGroup
		*out = new(string)
		**out = **in
	}
	if in.DistributedSwitchPort != nil {
		in, out := &in.DistributedSwitchPort, &out.DistributedSwitchPort
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv4 != nil {
		in, out := &in.IPv4, &out.IPv4
		*out = make([]IPv4Observation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = make([]IPv6Observation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mac != nil {
		in, out := &in.Mac, &out.Mac
		*out = new(string)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(float64)
		**out = **in
	}
	if in.Netstack != nil {
		in, out := &in.Netstack, &out.Netstack
		*out = new(string)
		**out = **in
	}
	if in.Portgroup != nil {
		in, out := &in.Portgroup, &out.Portgroup
		*out = new(string)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnicObservation.
func (in *VSphereVnicObservation) DeepCopy() *VSphereVnicObservation {
	if in == nil {
		return nil
	}
	out := new(VSphereVnicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnicParameters) DeepCopyInto(out *VSphereVnicParameters) {
	*out = *in
	if in.DistributedPortGroup != nil {
		in, out := &in.DistributedPortGroup, &out.DistributedPortGroup
		*out = new(string)
		**out = **in
	}
	if in.DistributedSwitchPort != nil {
		in, out := &in.DistributedSwitchPort, &out.DistributedSwitchPort
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.IPv4 != nil {
		in, out := &in.IPv4, &out.IPv4
		*out = make([]IPv4Parameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = make([]IPv6Parameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mac != nil {
		in, out := &in.Mac, &out.Mac
		*out = new(string)
		**out = **in
	}
	if in.Mtu != nil {
		in, out := &in.Mtu, &out.Mtu
		*out = new(float64)
		**out = **in
	}
	if in.Netstack != nil {
		in, out := &in.Netstack, &out.Netstack
		*out = new(string)
		**out = **in
	}
	if in.Portgroup != nil {
		in, out := &in.Portgroup, &out.Portgroup
		*out = new(string)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnicParameters.
func (in *VSphereVnicParameters) DeepCopy() *VSphereVnicParameters {
	if in == nil {
		return nil
	}
	out := new(VSphereVnicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnicSpec) DeepCopyInto(out *VSphereVnicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnicSpec.
func (in *VSphereVnicSpec) DeepCopy() *VSphereVnicSpec {
	if in == nil {
		return nil
	}
	out := new(VSphereVnicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VSphereVnicStatus) DeepCopyInto(out *VSphereVnicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VSphereVnicStatus.
func (in *VSphereVnicStatus) DeepCopy() *VSphereVnicStatus {
	if in == nil {
		return nil
	}
	out := new(VSphereVnicStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanDiskGroupInitParameters) DeepCopyInto(out *VsanDiskGroupInitParameters) {
	*out = *in
	if in.Cache != nil {
		in, out := &in.Cache, &out.Cache
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanDiskGroupInitParameters.
func (in *VsanDiskGroupInitParameters) DeepCopy() *VsanDiskGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(VsanDiskGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanDiskGroupObservation) DeepCopyInto(out *VsanDiskGroupObservation) {
	*out = *in
	if in.Cache != nil {
		in, out := &in.Cache, &out.Cache
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanDiskGroupObservation.
func (in *VsanDiskGroupObservation) DeepCopy() *VsanDiskGroupObservation {
	if in == nil {
		return nil
	}
	out := new(VsanDiskGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanDiskGroupParameters) DeepCopyInto(out *VsanDiskGroupParameters) {
	*out = *in
	if in.Cache != nil {
		in, out := &in.Cache, &out.Cache
		*out = new(string)
		**out = **in
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanDiskGroupParameters.
func (in *VsanDiskGroupParameters) DeepCopy() *VsanDiskGroupParameters {
	if in == nil {
		return nil
	}
	out := new(VsanDiskGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanFaultDomainsInitParameters) DeepCopyInto(out *VsanFaultDomainsInitParameters) {
	*out = *in
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = make([]FaultDomainInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanFaultDomainsInitParameters.
func (in *VsanFaultDomainsInitParameters) DeepCopy() *VsanFaultDomainsInitParameters {
	if in == nil {
		return nil
	}
	out := new(VsanFaultDomainsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanFaultDomainsObservation) DeepCopyInto(out *VsanFaultDomainsObservation) {
	*out = *in
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = make([]FaultDomainObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanFaultDomainsObservation.
func (in *VsanFaultDomainsObservation) DeepCopy() *VsanFaultDomainsObservation {
	if in == nil {
		return nil
	}
	out := new(VsanFaultDomainsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanFaultDomainsParameters) DeepCopyInto(out *VsanFaultDomainsParameters) {
	*out = *in
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = make([]FaultDomainParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanFaultDomainsParameters.
func (in *VsanFaultDomainsParameters) DeepCopy() *VsanFaultDomainsParameters {
	if in == nil {
		return nil
	}
	out := new(VsanFaultDomainsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanStretchedClusterInitParameters) DeepCopyInto(out *VsanStretchedClusterInitParameters) {
	*out = *in
	if in.PreferredFaultDomainHostIds != nil {
		in, out := &in.PreferredFaultDomainHostIds, &out.PreferredFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredFaultDomainName != nil {
		in, out := &in.PreferredFaultDomainName, &out.PreferredFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.SecondaryFaultDomainHostIds != nil {
		in, out := &in.SecondaryFaultDomainHostIds, &out.SecondaryFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecondaryFaultDomainName != nil {
		in, out := &in.SecondaryFaultDomainName, &out.SecondaryFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.WitnessNode != nil {
		in, out := &in.WitnessNode, &out.WitnessNode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanStretchedClusterInitParameters.
func (in *VsanStretchedClusterInitParameters) DeepCopy() *VsanStretchedClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(VsanStretchedClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanStretchedClusterObservation) DeepCopyInto(out *VsanStretchedClusterObservation) {
	*out = *in
	if in.PreferredFaultDomainHostIds != nil {
		in, out := &in.PreferredFaultDomainHostIds, &out.PreferredFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredFaultDomainName != nil {
		in, out := &in.PreferredFaultDomainName, &out.PreferredFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.SecondaryFaultDomainHostIds != nil {
		in, out := &in.SecondaryFaultDomainHostIds, &out.SecondaryFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecondaryFaultDomainName != nil {
		in, out := &in.SecondaryFaultDomainName, &out.SecondaryFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.WitnessNode != nil {
		in, out := &in.WitnessNode, &out.WitnessNode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanStretchedClusterObservation.
func (in *VsanStretchedClusterObservation) DeepCopy() *VsanStretchedClusterObservation {
	if in == nil {
		return nil
	}
	out := new(VsanStretchedClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VsanStretchedClusterParameters) DeepCopyInto(out *VsanStretchedClusterParameters) {
	*out = *in
	if in.PreferredFaultDomainHostIds != nil {
		in, out := &in.PreferredFaultDomainHostIds, &out.PreferredFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredFaultDomainName != nil {
		in, out := &in.PreferredFaultDomainName, &out.PreferredFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.SecondaryFaultDomainHostIds != nil {
		in, out := &in.SecondaryFaultDomainHostIds, &out.SecondaryFaultDomainHostIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecondaryFaultDomainName != nil {
		in, out := &in.SecondaryFaultDomainName, &out.SecondaryFaultDomainName
		*out = new(string)
		**out = **in
	}
	if in.WitnessNode != nil {
		in, out := &in.WitnessNode, &out.WitnessNode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VsanStretchedClusterParameters.
func (in *VsanStretchedClusterParameters) DeepCopy() *VsanStretchedClusterParameters {
	if in == nil {
		return nil
	}
	out := new(VsanStretchedClusterParameters)
	in.DeepCopyInto(out)
	return out
}
