// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereHaVmOverrideInitParameters struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// Controls the action to take
	// on this virtual machine if an APD status on an affected datastore clears in
	// the middle of an APD event. Can be one of useClusterDefault, none or
	// reset.  Default: useClusterDefault.
	// *
	// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
	HaDatastoreApdRecoveryAction *string `json:"haDatastoreApdRecoveryAction,omitempty" tf:"ha_datastore_apd_recovery_action,omitempty"`

	// Controls the action to take on this
	// virtual machine when the cluster has detected loss to all paths to a relevant
	// datastore. Can be one of clusterDefault, disabled, warning,
	// restartConservative, or restartAggressive.  Default: clusterDefault.
	// *
	// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse *string `json:"haDatastoreApdResponse,omitempty" tf:"ha_datastore_apd_response,omitempty"`

	// Controls the delay in seconds
	// to wait after an APD timeout event to execute the response action defined in
	// ha_datastore_apd_response. Use -1 to use
	// the cluster default. Default: -1.
	// *
	// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
	HaDatastoreApdResponseDelay *float64 `json:"haDatastoreApdResponseDelay,omitempty" tf:"ha_datastore_apd_response_delay,omitempty"`

	// Controls the action to take on this
	// virtual machine when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of clusterDefault, disabled, warning, or
	// restartAggressive. Default: clusterDefault.
	// *
	// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
	HaDatastorePdlResponse *string `json:"haDatastorePdlResponse,omitempty" tf:"ha_datastore_pdl_response,omitempty"`

	// The action to take on this virtual
	// machine when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of clusterIsolationResponse, none, powerOff, or
	// shutdown. Default: clusterIsolationResponse.
	// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
	HaHostIsolationResponse *string `json:"haHostIsolationResponse,omitempty" tf:"ha_host_isolation_response,omitempty"`

	// If a heartbeat from this virtual
	// machine is not received within this configured interval, the virtual machine
	// is marked as failed. The value is in seconds. Default: 30.
	// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
	HaVMFailureInterval *float64 `json:"haVmFailureInterval,omitempty" tf:"ha_vm_failure_interval,omitempty"`

	// The length of the reset window in
	// which ha_vm_maximum_resets can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in ha_vm_maximum_resets. -1 means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// -1 (no window).
	// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
	HaVMMaximumFailureWindow *float64 `json:"haVmMaximumFailureWindow,omitempty" tf:"ha_vm_maximum_failure_window,omitempty"`

	// The maximum number of resets that HA will
	// perform to this virtual machine when responding to a failure event. Default:
	// 3
	// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
	HaVMMaximumResets *float64 `json:"haVmMaximumResets,omitempty" tf:"ha_vm_maximum_resets,omitempty"`

	// The time, in seconds, that HA waits after
	// powering on this virtual machine before monitoring for heartbeats. Default:
	// 120 (2 minutes).
	// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
	HaVMMinimumUptime *float64 `json:"haVmMinimumUptime,omitempty" tf:"ha_vm_minimum_uptime,omitempty"`

	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring. Default: vmMonitoringDisabled.
	// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
	HaVMMonitoring *string `json:"haVmMonitoring,omitempty" tf:"ha_vm_monitoring,omitempty"`

	// Determines whether or
	// not the cluster's default settings or the VM override settings specified in
	// this resource are used for virtual machine monitoring. The default is true
	// (use cluster defaults) - set to false to have overrides take effect.
	// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
	HaVMMonitoringUseClusterDefaults *bool `json:"haVmMonitoringUseClusterDefaults,omitempty" tf:"ha_vm_monitoring_use_cluster_defaults,omitempty"`

	// The restart priority for the virtual
	// machine when vSphere detects a host failure. Can be one of
	// clusterRestartPriority, lowest, low, medium, high, highest, or disabled.
	// Default: clusterRestartPriority.
	// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
	HaVMRestartPriority *string `json:"haVmRestartPriority,omitempty" tf:"ha_vm_restart_priority,omitempty"`

	// The maximum time, in seconds, that
	// vSphere HA will wait for this virtual machine to be ready. Use -1 to
	// specify the cluster default.  Default: -1.
	// *
	// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
	HaVMRestartTimeout *float64 `json:"haVmRestartTimeout,omitempty" tf:"ha_vm_restart_timeout,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type VSphereHaVmOverrideObservation struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// Controls the action to take
	// on this virtual machine if an APD status on an affected datastore clears in
	// the middle of an APD event. Can be one of useClusterDefault, none or
	// reset.  Default: useClusterDefault.
	// *
	// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
	HaDatastoreApdRecoveryAction *string `json:"haDatastoreApdRecoveryAction,omitempty" tf:"ha_datastore_apd_recovery_action,omitempty"`

	// Controls the action to take on this
	// virtual machine when the cluster has detected loss to all paths to a relevant
	// datastore. Can be one of clusterDefault, disabled, warning,
	// restartConservative, or restartAggressive.  Default: clusterDefault.
	// *
	// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
	HaDatastoreApdResponse *string `json:"haDatastoreApdResponse,omitempty" tf:"ha_datastore_apd_response,omitempty"`

	// Controls the delay in seconds
	// to wait after an APD timeout event to execute the response action defined in
	// ha_datastore_apd_response. Use -1 to use
	// the cluster default. Default: -1.
	// *
	// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
	HaDatastoreApdResponseDelay *float64 `json:"haDatastoreApdResponseDelay,omitempty" tf:"ha_datastore_apd_response_delay,omitempty"`

	// Controls the action to take on this
	// virtual machine when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of clusterDefault, disabled, warning, or
	// restartAggressive. Default: clusterDefault.
	// *
	// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
	HaDatastorePdlResponse *string `json:"haDatastorePdlResponse,omitempty" tf:"ha_datastore_pdl_response,omitempty"`

	// The action to take on this virtual
	// machine when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of clusterIsolationResponse, none, powerOff, or
	// shutdown. Default: clusterIsolationResponse.
	// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
	HaHostIsolationResponse *string `json:"haHostIsolationResponse,omitempty" tf:"ha_host_isolation_response,omitempty"`

	// If a heartbeat from this virtual
	// machine is not received within this configured interval, the virtual machine
	// is marked as failed. The value is in seconds. Default: 30.
	// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
	HaVMFailureInterval *float64 `json:"haVmFailureInterval,omitempty" tf:"ha_vm_failure_interval,omitempty"`

	// The length of the reset window in
	// which ha_vm_maximum_resets can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in ha_vm_maximum_resets. -1 means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// -1 (no window).
	// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
	HaVMMaximumFailureWindow *float64 `json:"haVmMaximumFailureWindow,omitempty" tf:"ha_vm_maximum_failure_window,omitempty"`

	// The maximum number of resets that HA will
	// perform to this virtual machine when responding to a failure event. Default:
	// 3
	// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
	HaVMMaximumResets *float64 `json:"haVmMaximumResets,omitempty" tf:"ha_vm_maximum_resets,omitempty"`

	// The time, in seconds, that HA waits after
	// powering on this virtual machine before monitoring for heartbeats. Default:
	// 120 (2 minutes).
	// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
	HaVMMinimumUptime *float64 `json:"haVmMinimumUptime,omitempty" tf:"ha_vm_minimum_uptime,omitempty"`

	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring. Default: vmMonitoringDisabled.
	// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
	HaVMMonitoring *string `json:"haVmMonitoring,omitempty" tf:"ha_vm_monitoring,omitempty"`

	// Determines whether or
	// not the cluster's default settings or the VM override settings specified in
	// this resource are used for virtual machine monitoring. The default is true
	// (use cluster defaults) - set to false to have overrides take effect.
	// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
	HaVMMonitoringUseClusterDefaults *bool `json:"haVmMonitoringUseClusterDefaults,omitempty" tf:"ha_vm_monitoring_use_cluster_defaults,omitempty"`

	// The restart priority for the virtual
	// machine when vSphere detects a host failure. Can be one of
	// clusterRestartPriority, lowest, low, medium, high, highest, or disabled.
	// Default: clusterRestartPriority.
	// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
	HaVMRestartPriority *string `json:"haVmRestartPriority,omitempty" tf:"ha_vm_restart_priority,omitempty"`

	// The maximum time, in seconds, that
	// vSphere HA will wait for this virtual machine to be ready. Use -1 to
	// specify the cluster default.  Default: -1.
	// *
	// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
	HaVMRestartTimeout *float64 `json:"haVmRestartTimeout,omitempty" tf:"ha_vm_restart_timeout,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type VSphereHaVmOverrideParameters struct {

	// The managed object reference
	// ID of the cluster to put the override in.  Forces a new
	// resource if changed.
	// The managed object ID of the cluster.
	// +kubebuilder:validation:Optional
	ComputeClusterID *string `json:"computeClusterId,omitempty" tf:"compute_cluster_id,omitempty"`

	// Controls the action to take
	// on this virtual machine if an APD status on an affected datastore clears in
	// the middle of an APD event. Can be one of useClusterDefault, none or
	// reset.  Default: useClusterDefault.
	// *
	// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
	// +kubebuilder:validation:Optional
	HaDatastoreApdRecoveryAction *string `json:"haDatastoreApdRecoveryAction,omitempty" tf:"ha_datastore_apd_recovery_action,omitempty"`

	// Controls the action to take on this
	// virtual machine when the cluster has detected loss to all paths to a relevant
	// datastore. Can be one of clusterDefault, disabled, warning,
	// restartConservative, or restartAggressive.  Default: clusterDefault.
	// *
	// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
	// +kubebuilder:validation:Optional
	HaDatastoreApdResponse *string `json:"haDatastoreApdResponse,omitempty" tf:"ha_datastore_apd_response,omitempty"`

	// Controls the delay in seconds
	// to wait after an APD timeout event to execute the response action defined in
	// ha_datastore_apd_response. Use -1 to use
	// the cluster default. Default: -1.
	// *
	// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
	// +kubebuilder:validation:Optional
	HaDatastoreApdResponseDelay *float64 `json:"haDatastoreApdResponseDelay,omitempty" tf:"ha_datastore_apd_response_delay,omitempty"`

	// Controls the action to take on this
	// virtual machine when the cluster has detected a permanent device loss to a
	// relevant datastore. Can be one of clusterDefault, disabled, warning, or
	// restartAggressive. Default: clusterDefault.
	// *
	// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
	// +kubebuilder:validation:Optional
	HaDatastorePdlResponse *string `json:"haDatastorePdlResponse,omitempty" tf:"ha_datastore_pdl_response,omitempty"`

	// The action to take on this virtual
	// machine when a host has detected that it has been isolated from the rest of
	// the cluster. Can be one of clusterIsolationResponse, none, powerOff, or
	// shutdown. Default: clusterIsolationResponse.
	// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
	// +kubebuilder:validation:Optional
	HaHostIsolationResponse *string `json:"haHostIsolationResponse,omitempty" tf:"ha_host_isolation_response,omitempty"`

	// If a heartbeat from this virtual
	// machine is not received within this configured interval, the virtual machine
	// is marked as failed. The value is in seconds. Default: 30.
	// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
	// +kubebuilder:validation:Optional
	HaVMFailureInterval *float64 `json:"haVmFailureInterval,omitempty" tf:"ha_vm_failure_interval,omitempty"`

	// The length of the reset window in
	// which ha_vm_maximum_resets can operate. When this
	// window expires, no more resets are attempted regardless of the setting
	// configured in ha_vm_maximum_resets. -1 means no window, meaning an
	// unlimited reset time is allotted. The value is specified in seconds. Default:
	// -1 (no window).
	// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
	// +kubebuilder:validation:Optional
	HaVMMaximumFailureWindow *float64 `json:"haVmMaximumFailureWindow,omitempty" tf:"ha_vm_maximum_failure_window,omitempty"`

	// The maximum number of resets that HA will
	// perform to this virtual machine when responding to a failure event. Default:
	// 3
	// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
	// +kubebuilder:validation:Optional
	HaVMMaximumResets *float64 `json:"haVmMaximumResets,omitempty" tf:"ha_vm_maximum_resets,omitempty"`

	// The time, in seconds, that HA waits after
	// powering on this virtual machine before monitoring for heartbeats. Default:
	// 120 (2 minutes).
	// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
	// +kubebuilder:validation:Optional
	HaVMMinimumUptime *float64 `json:"haVmMinimumUptime,omitempty" tf:"ha_vm_minimum_uptime,omitempty"`

	// The type of virtual machine monitoring to use
	// when HA is enabled in the cluster. Can be one of vmMonitoringDisabled,
	// vmMonitoringOnly, or vmAndAppMonitoring. Default: vmMonitoringDisabled.
	// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
	// +kubebuilder:validation:Optional
	HaVMMonitoring *string `json:"haVmMonitoring,omitempty" tf:"ha_vm_monitoring,omitempty"`

	// Determines whether or
	// not the cluster's default settings or the VM override settings specified in
	// this resource are used for virtual machine monitoring. The default is true
	// (use cluster defaults) - set to false to have overrides take effect.
	// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
	// +kubebuilder:validation:Optional
	HaVMMonitoringUseClusterDefaults *bool `json:"haVmMonitoringUseClusterDefaults,omitempty" tf:"ha_vm_monitoring_use_cluster_defaults,omitempty"`

	// The restart priority for the virtual
	// machine when vSphere detects a host failure. Can be one of
	// clusterRestartPriority, lowest, low, medium, high, highest, or disabled.
	// Default: clusterRestartPriority.
	// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
	// +kubebuilder:validation:Optional
	HaVMRestartPriority *string `json:"haVmRestartPriority,omitempty" tf:"ha_vm_restart_priority,omitempty"`

	// The maximum time, in seconds, that
	// vSphere HA will wait for this virtual machine to be ready. Use -1 to
	// specify the cluster default.  Default: -1.
	// *
	// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
	// +kubebuilder:validation:Optional
	HaVMRestartTimeout *float64 `json:"haVmRestartTimeout,omitempty" tf:"ha_vm_restart_timeout,omitempty"`

	// The UUID of the virtual machine to create
	// the override for.  Forces a new resource if changed.
	// The managed object ID of the virtual machine.
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// VSphereHaVmOverrideSpec defines the desired state of VSphereHaVmOverride
type VSphereHaVmOverrideSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereHaVmOverrideParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereHaVmOverrideInitParameters `json:"initProvider,omitempty"`
}

// VSphereHaVmOverrideStatus defines the observed state of VSphereHaVmOverride.
type VSphereHaVmOverrideStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereHaVmOverrideObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereHaVmOverride is the Schema for the VSphereHaVmOverrides API. Provides a VMware vSphere HA virtual machine override resource. This can be used to override high availability settings in a cluster.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereHaVmOverride struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.computeClusterId) || (has(self.initProvider) && has(self.initProvider.computeClusterId))",message="spec.forProvider.computeClusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualMachineId) || (has(self.initProvider) && has(self.initProvider.virtualMachineId))",message="spec.forProvider.virtualMachineId is a required parameter"
	Spec   VSphereHaVmOverrideSpec   `json:"spec"`
	Status VSphereHaVmOverrideStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereHaVmOverrideList contains a list of VSphereHaVmOverrides
type VSphereHaVmOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereHaVmOverride `json:"items"`
}

// Repository type metadata.
var (
	VSphereHaVmOverride_Kind             = "VSphereHaVmOverride"
	VSphereHaVmOverride_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereHaVmOverride_Kind}.String()
	VSphereHaVmOverride_KindAPIVersion   = VSphereHaVmOverride_Kind + "." + CRDGroupVersion.String()
	VSphereHaVmOverride_GroupVersionKind = CRDGroupVersion.WithKind(VSphereHaVmOverride_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereHaVmOverride{}, &VSphereHaVmOverrideList{})
}
