// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComponentInitParameters struct {
}

type ComponentObservation struct {

	// The name of the component. Useful for easier identification.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The identifier of the component.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The list of available versions of the component.
	Version []*string `json:"version,omitempty" tf:"version,omitempty"`
}

type ComponentParameters struct {
}

type VSphereOfflineSoftwareDepotInitParameters struct {

	// The URL where the depot source is hosted.
	// The remote location where the contents for this depot are served.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

type VSphereOfflineSoftwareDepotObservation struct {

	// The list of custom components in the depot.
	// The list of components in this depot.
	Component []ComponentObservation `json:"component,omitempty" tf:"component,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The URL where the depot source is hosted.
	// The remote location where the contents for this depot are served.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

type VSphereOfflineSoftwareDepotParameters struct {

	// The URL where the depot source is hosted.
	// The remote location where the contents for this depot are served.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

// VSphereOfflineSoftwareDepotSpec defines the desired state of VSphereOfflineSoftwareDepot
type VSphereOfflineSoftwareDepotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereOfflineSoftwareDepotParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereOfflineSoftwareDepotInitParameters `json:"initProvider,omitempty"`
}

// VSphereOfflineSoftwareDepotStatus defines the observed state of VSphereOfflineSoftwareDepot.
type VSphereOfflineSoftwareDepotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereOfflineSoftwareDepotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereOfflineSoftwareDepot is the Schema for the VSphereOfflineSoftwareDepots API. Provides a VMware vSphere offline software depot resource..
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereOfflineSoftwareDepot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	Spec   VSphereOfflineSoftwareDepotSpec   `json:"spec"`
	Status VSphereOfflineSoftwareDepotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereOfflineSoftwareDepotList contains a list of VSphereOfflineSoftwareDepots
type VSphereOfflineSoftwareDepotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereOfflineSoftwareDepot `json:"items"`
}

// Repository type metadata.
var (
	VSphereOfflineSoftwareDepot_Kind             = "VSphereOfflineSoftwareDepot"
	VSphereOfflineSoftwareDepot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereOfflineSoftwareDepot_Kind}.String()
	VSphereOfflineSoftwareDepot_KindAPIVersion   = VSphereOfflineSoftwareDepot_Kind + "." + CRDGroupVersion.String()
	VSphereOfflineSoftwareDepot_GroupVersionKind = CRDGroupVersion.WithKind(VSphereOfflineSoftwareDepot_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereOfflineSoftwareDepot{}, &VSphereOfflineSoftwareDepotList{})
}
