// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereFolderInitParameters struct {

	// Map of custom attribute ids to attribute
	// value strings to set for folder. See here
	// for a reference on how to set values for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	// The ID of the datacenter. Can be ignored if creating a datacenter folder, otherwise required.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// The path of the folder and any parents, relative to the datacenter and folder type being defined.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of folder to create. Allowed options are
	// datacenter for datacenter folders, host for host and cluster folders,
	// vm for virtual machine folders, datastore for datastore folders, and
	// network for network folders. Forces a new resource if changed.
	// The type of the folder.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereFolderObservation struct {

	// Map of custom attribute ids to attribute
	// value strings to set for folder. See here
	// for a reference on how to set values for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	// The ID of the datacenter. Can be ignored if creating a datacenter folder, otherwise required.
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// The path of the folder and any parents, relative to the datacenter and folder type being defined.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of folder to create. Allowed options are
	// datacenter for datacenter folders, host for host and cluster folders,
	// vm for virtual machine folders, datastore for datastore folders, and
	// network for network folders. Forces a new resource if changed.
	// The type of the folder.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VSphereFolderParameters struct {

	// Map of custom attribute ids to attribute
	// value strings to set for folder. See here
	// for a reference on how to set values for custom attributes.
	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The ID of the datacenter the folder will be created in.
	// Required for all folder types except for datacenter folders. Forces a new
	// resource if changed.
	// The ID of the datacenter. Can be ignored if creating a datacenter folder, otherwise required.
	// +kubebuilder:validation:Optional
	DatacenterID *string `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// The path of the folder to be created. This is relative to
	// the root of the type of folder you are creating, and the supplied datacenter.
	// The path of the folder and any parents, relative to the datacenter and folder type being defined.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The type of folder to create. Allowed options are
	// datacenter for datacenter folders, host for host and cluster folders,
	// vm for virtual machine folders, datastore for datastore folders, and
	// network for network folders. Forces a new resource if changed.
	// The type of the folder.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// VSphereFolderSpec defines the desired state of VSphereFolder
type VSphereFolderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereFolderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereFolderInitParameters `json:"initProvider,omitempty"`
}

// VSphereFolderStatus defines the observed state of VSphereFolder.
type VSphereFolderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereFolderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereFolder is the Schema for the VSphereFolders API. Provides a VMware vSphere folder resource. This can be used to manage vSphere inventory folders.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereFolder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.path) || (has(self.initProvider) && has(self.initProvider.path))",message="spec.forProvider.path is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   VSphereFolderSpec   `json:"spec"`
	Status VSphereFolderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereFolderList contains a list of VSphereFolders
type VSphereFolderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereFolder `json:"items"`
}

// Repository type metadata.
var (
	VSphereFolder_Kind             = "VSphereFolder"
	VSphereFolder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereFolder_Kind}.String()
	VSphereFolder_KindAPIVersion   = VSphereFolder_Kind + "." + CRDGroupVersion.String()
	VSphereFolder_GroupVersionKind = CRDGroupVersion.WithKind(VSphereFolder_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereFolder{}, &VSphereFolderList{})
}
