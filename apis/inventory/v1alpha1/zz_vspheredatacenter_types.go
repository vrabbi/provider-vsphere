// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VSphereDatacenterInitParameters struct {

	// Map of custom attribute ids to value
	// strings to set for datacenter resource. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The folder where the datacenter should be created.
	// Forces a new resource if changed.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The name of the datacenter. This name needs to be unique
	// within the folder. Forces a new resource if changed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereDatacenterObservation struct {

	// Map of custom attribute ids to value
	// strings to set for datacenter resource. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The folder where the datacenter should be created.
	// Forces a new resource if changed.
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The name of this datacenter. This will be changed to the managed
	// object ID in v2.0.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Managed object ID of this datacenter.
	// Managed object ID of the datacenter.
	Moid *string `json:"moid,omitempty" tf:"moid,omitempty"`

	// The name of the datacenter. This name needs to be unique
	// within the folder. Forces a new resource if changed.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type VSphereDatacenterParameters struct {

	// Map of custom attribute ids to value
	// strings to set for datacenter resource. See
	// here for a reference on how to set values
	// for custom attributes.
	// A list of custom attributes to set on this resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomAttributes map[string]*string `json:"customAttributes,omitempty" tf:"custom_attributes,omitempty"`

	// The folder where the datacenter should be created.
	// Forces a new resource if changed.
	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// The name of the datacenter. This name needs to be unique
	// within the folder. Forces a new resource if changed.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The IDs of any tags to attach to this resource. See
	// here for a reference on how to apply tags.
	// A list of tag IDs to apply to this object.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VSphereDatacenterSpec defines the desired state of VSphereDatacenter
type VSphereDatacenterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VSphereDatacenterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VSphereDatacenterInitParameters `json:"initProvider,omitempty"`
}

// VSphereDatacenterStatus defines the observed state of VSphereDatacenter.
type VSphereDatacenterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VSphereDatacenterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VSphereDatacenter is the Schema for the VSphereDatacenters API. Provides a VMware vSphere datacenter resource. This can be used as the primary container of inventory objects such as hosts and virtual machines.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vsphere}
type VSphereDatacenter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VSphereDatacenterSpec   `json:"spec"`
	Status VSphereDatacenterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VSphereDatacenterList contains a list of VSphereDatacenters
type VSphereDatacenterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VSphereDatacenter `json:"items"`
}

// Repository type metadata.
var (
	VSphereDatacenter_Kind             = "VSphereDatacenter"
	VSphereDatacenter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VSphereDatacenter_Kind}.String()
	VSphereDatacenter_KindAPIVersion   = VSphereDatacenter_Kind + "." + CRDGroupVersion.String()
	VSphereDatacenter_GroupVersionKind = CRDGroupVersion.WithKind(VSphereDatacenter_Kind)
)

func init() {
	SchemeBuilder.Register(&VSphereDatacenter{}, &VSphereDatacenterList{})
}
